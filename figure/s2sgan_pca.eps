%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: ADP7E5E.tmp.pdf
%%Creator: Adobe Acrobat 9.5.5
%%For: fenqiang
%%CreationDate: 2019/4/2, 18:54:47
%%BoundingBox: 0 0 607 298
%%HiResBoundingBox: 0 0 606.5441 297.5994
%%CropBox: 0 0 606.5441 297.5994
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1000 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.1-c043 52.372728, 2009/01/18-15:08:04        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   xmp:CreateDate="2019-04-02T18:54:09-04:00"
   xmp:CreatorTool="matplotlib version 3.0.2, http://matplotlib.org/"
   xmp:ModifyDate="2019-04-02T18:54:09-04:00"
   pdf:Producer="Acrobat Distiller 9.5.5 (Windows)"
   dc:format="application/pdf"
   xmpMM:DocumentID="uuid:cdec8e32-e4bf-4a1e-90d5-d53718dcb683"
   xmpMM:InstanceID="uuid:cfc4a854-1447-4e96-8cd5-e6fe5cda09c4">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">/home/fenqiang/harmonization/figures/paper_figure_pca.eps</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -297.599 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
1.52588e-5 0 mo
1.52588e-5 297.599 li
606.544 297.599 li
606.544 0 li
cp
clp
[1 0 0 1 -94.6907 0 ]ct
.059998 337.24 mo
776.08 337.24 li
776.08 -43.1999 li
.059998 -43.1999 li
cp
false sop
/0 
<<
/Name (Black)
/1 
[/DeviceCMYK] /CSA add_res
/CSA /1 get_csa_by_name
/MappedCSA /1 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
f
96.94 295.343 mo
698.464 295.343 li
698.464 2.06509 li
96.94 2.06509 li
cp
f
219.104 226.975 mo
225.104 220.975 li
219.104 220.975 mo
225.104 226.975 li
0 .990631 1 .000396735 cmyk
f
1.5 lw
0 lc
1 lj
10 ml
[] 0 dsh
false sadj
219.104 226.975 mo
225.104 220.975 li
219.104 220.975 mo
225.104 226.975 li
@
268.749 262.514 mo
274.749 256.514 li
268.749 256.514 mo
274.749 262.514 li
f
268.749 262.514 mo
274.749 256.514 li
268.749 256.514 mo
274.749 262.514 li
@
282.123 277.088 mo
288.123 271.088 li
282.123 271.088 mo
288.123 277.088 li
f
282.123 277.088 mo
288.123 271.088 li
282.123 271.088 mo
288.123 277.088 li
@
283.115 250.818 mo
289.115 244.818 li
283.115 244.818 mo
289.115 250.818 li
f
283.115 250.818 mo
289.115 244.818 li
283.115 244.818 mo
289.115 250.818 li
@
183.174 81.6861 mo
189.174 75.6861 li
183.174 75.6861 mo
189.174 81.6861 li
f
183.174 81.6861 mo
189.174 75.6861 li
183.174 75.6861 mo
189.174 81.6861 li
@
201.769 169.345 mo
207.769 163.345 li
201.769 163.345 mo
207.769 169.345 li
f
201.769 169.345 mo
207.769 163.345 li
201.769 163.345 mo
207.769 169.345 li
@
311.351 243.924 mo
317.351 237.924 li
311.351 237.924 mo
317.351 243.924 li
f
311.351 243.924 mo
317.351 237.924 li
311.351 237.924 mo
317.351 243.924 li
@
202.693 167.283 mo
208.693 161.283 li
202.693 161.283 mo
208.693 167.283 li
f
202.693 167.283 mo
208.693 161.283 li
202.693 161.283 mo
208.693 167.283 li
@
298.252 251.931 mo
304.252 245.931 li
298.252 245.931 mo
304.252 251.931 li
f
298.252 251.931 mo
304.252 245.931 li
298.252 245.931 mo
304.252 251.931 li
@
285.964 284.978 mo
291.964 278.978 li
285.964 278.978 mo
291.964 284.978 li
f
285.964 284.978 mo
291.964 278.978 li
285.964 278.978 mo
291.964 284.978 li
@
311.594 228.527 mo
317.594 222.527 li
311.594 222.527 mo
317.594 228.527 li
f
311.594 228.527 mo
317.594 222.527 li
311.594 222.527 mo
317.594 228.527 li
@
308.722 217.495 mo
314.722 211.495 li
308.722 211.495 mo
314.722 217.495 li
f
308.722 217.495 mo
314.722 211.495 li
308.722 211.495 mo
314.722 217.495 li
@
191.639 168.258 mo
197.639 162.258 li
191.639 162.258 mo
197.639 168.258 li
f
191.639 168.258 mo
197.639 162.258 li
191.639 162.258 mo
197.639 168.258 li
@
277.002 271.637 mo
283.002 265.637 li
277.002 265.637 mo
283.002 271.637 li
f
277.002 271.637 mo
283.002 265.637 li
277.002 265.637 mo
283.002 271.637 li
@
264.101 259.506 mo
270.101 253.506 li
264.101 253.506 mo
270.101 259.506 li
f
264.101 259.506 mo
270.101 253.506 li
264.101 253.506 mo
270.101 259.506 li
@
178.966 160.959 mo
184.966 154.959 li
178.966 154.959 mo
184.966 160.959 li
f
178.966 160.959 mo
184.966 154.959 li
178.966 154.959 mo
184.966 160.959 li
@
304.33 246.181 mo
310.33 240.181 li
304.33 240.181 mo
310.33 246.181 li
f
304.33 246.181 mo
310.33 240.181 li
304.33 240.181 mo
310.33 246.181 li
@
304.407 245.449 mo
310.407 239.449 li
304.407 239.449 mo
310.407 245.449 li
f
304.407 245.449 mo
310.407 239.449 li
304.407 239.449 mo
310.407 245.449 li
@
159.343 102.815 mo
165.343 96.8151 li
159.343 96.8151 mo
165.343 102.815 li
f
159.343 102.815 mo
165.343 96.8151 li
159.343 96.8151 mo
165.343 102.815 li
@
261.867 237.471 mo
267.867 231.471 li
261.867 231.471 mo
267.867 237.471 li
f
261.867 237.471 mo
267.867 231.471 li
261.867 231.471 mo
267.867 237.471 li
@
308.297 261.86 mo
314.297 255.86 li
308.297 255.86 mo
314.297 261.86 li
f
308.297 261.86 mo
314.297 255.86 li
308.297 255.86 mo
314.297 261.86 li
@
300.073 261.757 mo
306.073 255.757 li
300.073 255.757 mo
306.073 261.757 li
f
300.073 261.757 mo
306.073 255.757 li
300.073 255.757 mo
306.073 261.757 li
@
283.768 245.669 mo
289.768 239.669 li
283.768 239.669 mo
289.768 245.669 li
f
283.768 245.669 mo
289.768 239.669 li
283.768 239.669 mo
289.768 245.669 li
@
312.401 265.01 mo
318.401 259.01 li
312.401 259.01 mo
318.401 265.01 li
f
312.401 265.01 mo
318.401 259.01 li
312.401 259.01 mo
318.401 265.01 li
@
326.452 266.713 mo
332.452 260.713 li
326.452 260.713 mo
332.452 266.713 li
f
326.452 266.713 mo
332.452 260.713 li
326.452 260.713 mo
332.452 266.713 li
@
168.238 161.417 mo
174.238 155.417 li
168.238 155.417 mo
174.238 161.417 li
f
168.238 161.417 mo
174.238 155.417 li
168.238 155.417 mo
174.238 161.417 li
@
246.458 249.667 mo
252.458 243.667 li
246.458 243.667 mo
252.458 249.667 li
f
246.458 249.667 mo
252.458 243.667 li
246.458 243.667 mo
252.458 249.667 li
@
245.014 215.051 mo
251.014 209.051 li
245.014 209.051 mo
251.014 215.051 li
f
245.014 215.051 mo
251.014 209.051 li
245.014 209.051 mo
251.014 215.051 li
@
303.129 243.711 mo
309.129 237.711 li
303.129 237.711 mo
309.129 243.711 li
f
303.129 243.711 mo
309.129 237.711 li
303.129 237.711 mo
309.129 243.711 li
@
195.193 141.77 mo
201.193 135.77 li
195.193 135.77 mo
201.193 141.77 li
f
195.193 141.77 mo
201.193 135.77 li
195.193 135.77 mo
201.193 141.77 li
@
245.102 182.71 mo
251.102 176.71 li
245.102 176.71 mo
251.102 182.71 li
f
245.102 182.71 mo
251.102 176.71 li
245.102 176.71 mo
251.102 182.71 li
@
292.244 238.981 mo
298.244 232.981 li
292.244 232.981 mo
298.244 238.981 li
f
292.244 238.981 mo
298.244 232.981 li
292.244 232.981 mo
298.244 238.981 li
@
180.154 162.693 mo
186.154 156.693 li
180.154 156.693 mo
186.154 162.693 li
f
180.154 162.693 mo
186.154 156.693 li
180.154 156.693 mo
186.154 162.693 li
@
190.289 189.394 mo
196.289 183.394 li
190.289 183.394 mo
196.289 189.394 li
f
190.289 189.394 mo
196.289 183.394 li
190.289 183.394 mo
196.289 189.394 li
@
247.997 246.014 mo
253.997 240.014 li
247.997 240.014 mo
253.997 246.014 li
f
247.997 246.014 mo
253.997 240.014 li
247.997 240.014 mo
253.997 246.014 li
@
260.135 238.117 mo
266.135 232.117 li
260.135 232.117 mo
266.135 238.117 li
f
260.135 238.117 mo
266.135 232.117 li
260.135 232.117 mo
266.135 238.117 li
@
192.463 158.082 mo
198.463 152.082 li
192.463 152.082 mo
198.463 158.082 li
f
192.463 158.082 mo
198.463 152.082 li
192.463 152.082 mo
198.463 158.082 li
@
181.884 187.172 mo
187.884 181.172 li
181.884 181.172 mo
187.884 187.172 li
f
181.884 187.172 mo
187.884 181.172 li
181.884 181.172 mo
187.884 187.172 li
@
291.519 242.287 mo
297.519 236.287 li
291.519 236.287 mo
297.519 242.287 li
f
291.519 242.287 mo
297.519 236.287 li
291.519 236.287 mo
297.519 242.287 li
@
280.51 251.276 mo
286.51 245.276 li
280.51 245.276 mo
286.51 251.276 li
f
280.51 251.276 mo
286.51 245.276 li
280.51 245.276 mo
286.51 251.276 li
@
312.151 235.206 mo
318.151 229.206 li
312.151 229.206 mo
318.151 235.206 li
f
312.151 235.206 mo
318.151 229.206 li
312.151 229.206 mo
318.151 235.206 li
@
202.749 170.354 mo
208.749 164.354 li
202.749 164.354 mo
208.749 170.354 li
f
202.749 170.354 mo
208.749 164.354 li
202.749 164.354 mo
208.749 170.354 li
@
252.763 258.935 mo
258.763 252.935 li
252.763 252.935 mo
258.763 258.935 li
f
252.763 258.935 mo
258.763 252.935 li
252.763 252.935 mo
258.763 258.935 li
@
307.553 268.393 mo
313.553 262.393 li
307.553 262.393 mo
313.553 268.393 li
f
307.553 268.393 mo
313.553 262.393 li
307.553 262.393 mo
313.553 268.393 li
@
234.303 232.131 mo
240.303 226.131 li
234.303 226.131 mo
240.303 232.131 li
f
234.303 232.131 mo
240.303 226.131 li
234.303 226.131 mo
240.303 232.131 li
@
243.214 227.097 mo
249.214 221.097 li
243.214 221.097 mo
249.214 227.097 li
f
243.214 227.097 mo
249.214 221.097 li
243.214 221.097 mo
249.214 227.097 li
@
183.054 186.83 mo
189.054 180.83 li
183.054 180.83 mo
189.054 186.83 li
f
183.054 186.83 mo
189.054 180.83 li
183.054 180.83 mo
189.054 186.83 li
@
274.213 263.263 mo
280.213 257.263 li
274.213 257.263 mo
280.213 263.263 li
f
274.213 263.263 mo
280.213 257.263 li
274.213 257.263 mo
280.213 263.263 li
@
283.237 243.903 mo
289.237 237.903 li
283.237 237.903 mo
289.237 243.903 li
f
283.237 243.903 mo
289.237 237.903 li
283.237 237.903 mo
289.237 243.903 li
@
273.393 249.338 mo
279.393 243.338 li
273.393 243.338 mo
279.393 249.338 li
f
273.393 249.338 mo
279.393 243.338 li
273.393 243.338 mo
279.393 249.338 li
@
288.719 264.564 mo
294.719 258.564 li
288.719 258.564 mo
294.719 264.564 li
f
288.719 264.564 mo
294.719 258.564 li
288.719 258.564 mo
294.719 264.564 li
@
277.236 250.794 mo
283.236 244.794 li
277.236 244.794 mo
283.236 250.794 li
f
277.236 250.794 mo
283.236 244.794 li
277.236 244.794 mo
283.236 250.794 li
@
198.538 191.71 mo
204.538 185.71 li
198.538 185.71 mo
204.538 191.71 li
f
198.538 191.71 mo
204.538 185.71 li
198.538 185.71 mo
204.538 191.71 li
@
308.22 255.505 mo
314.22 249.505 li
308.22 249.505 mo
314.22 255.505 li
f
308.22 255.505 mo
314.22 249.505 li
308.22 249.505 mo
314.22 255.505 li
@
148.336 130.851 mo
154.336 124.851 li
148.336 124.851 mo
154.336 130.851 li
f
148.336 130.851 mo
154.336 124.851 li
148.336 124.851 mo
154.336 130.851 li
@
170.511 134.685 mo
176.511 128.685 li
170.511 128.685 mo
176.511 134.685 li
f
170.511 134.685 mo
176.511 128.685 li
170.511 128.685 mo
176.511 134.685 li
@
229.64 238.601 mo
235.64 232.601 li
229.64 232.601 mo
235.64 238.601 li
f
229.64 238.601 mo
235.64 232.601 li
229.64 232.601 mo
235.64 238.601 li
@
279.801 259.751 mo
285.801 253.751 li
279.801 253.751 mo
285.801 259.751 li
f
279.801 259.751 mo
285.801 253.751 li
279.801 253.751 mo
285.801 259.751 li
@
180.867 170.722 mo
186.867 164.722 li
180.867 164.722 mo
186.867 170.722 li
f
180.867 170.722 mo
186.867 164.722 li
180.867 164.722 mo
186.867 170.722 li
@
227.691 236.274 mo
233.691 230.274 li
227.691 230.274 mo
233.691 236.274 li
f
227.691 236.274 mo
233.691 230.274 li
227.691 230.274 mo
233.691 236.274 li
@
277.467 243.67 mo
283.467 237.67 li
277.467 237.67 mo
283.467 243.67 li
f
277.467 243.67 mo
283.467 237.67 li
277.467 237.67 mo
283.467 243.67 li
@
258.229 256.116 mo
264.229 250.116 li
258.229 250.116 mo
264.229 256.116 li
f
258.229 256.116 mo
264.229 250.116 li
258.229 250.116 mo
264.229 256.116 li
@
163.241 108.539 mo
169.241 102.539 li
163.241 102.539 mo
169.241 108.539 li
f
163.241 108.539 mo
169.241 102.539 li
163.241 102.539 mo
169.241 108.539 li
@
189.278 165.495 mo
195.278 159.495 li
189.278 159.495 mo
195.278 165.495 li
f
189.278 165.495 mo
195.278 159.495 li
189.278 159.495 mo
195.278 165.495 li
@
279.324 243.476 mo
285.324 237.476 li
279.324 237.476 mo
285.324 243.476 li
f
279.324 243.476 mo
285.324 237.476 li
279.324 237.476 mo
285.324 243.476 li
@
201.661 170.864 mo
207.661 164.864 li
201.661 164.864 mo
207.661 170.864 li
f
201.661 170.864 mo
207.661 164.864 li
201.661 164.864 mo
207.661 170.864 li
@
258.307 218.312 mo
264.307 212.312 li
258.307 212.312 mo
264.307 218.312 li
f
258.307 218.312 mo
264.307 212.312 li
258.307 212.312 mo
264.307 218.312 li
@
310.72 257.033 mo
316.72 251.033 li
310.72 251.033 mo
316.72 257.033 li
f
310.72 257.033 mo
316.72 251.033 li
310.72 251.033 mo
316.72 257.033 li
@
169.583 109.355 mo
175.583 103.355 li
169.583 103.355 mo
175.583 109.355 li
f
169.583 109.355 mo
175.583 103.355 li
169.583 103.355 mo
175.583 109.355 li
@
188.841 178.621 mo
194.841 172.621 li
188.841 172.621 mo
194.841 178.621 li
f
188.841 178.621 mo
194.841 172.621 li
188.841 172.621 mo
194.841 178.621 li
@
248.986 249.775 mo
254.986 243.775 li
248.986 243.775 mo
254.986 249.775 li
f
248.986 249.775 mo
254.986 243.775 li
248.986 243.775 mo
254.986 249.775 li
@
287.488 267.605 mo
293.488 261.605 li
287.488 261.605 mo
293.488 267.605 li
f
287.488 267.605 mo
293.488 261.605 li
287.488 261.605 mo
293.488 267.605 li
@
283.191 261.886 mo
289.191 255.886 li
283.191 255.886 mo
289.191 261.886 li
f
283.191 261.886 mo
289.191 255.886 li
283.191 255.886 mo
289.191 261.886 li
@
192.441 198.411 mo
198.441 192.411 li
192.441 192.411 mo
198.441 198.411 li
f
192.441 198.411 mo
198.441 192.411 li
192.441 192.411 mo
198.441 198.411 li
@
293.848 260.633 mo
299.848 254.633 li
293.848 254.633 mo
299.848 260.633 li
f
293.848 260.633 mo
299.848 254.633 li
293.848 254.633 mo
299.848 260.633 li
@
184.09 191.217 mo
190.09 185.217 li
184.09 185.217 mo
190.09 191.217 li
f
184.09 191.217 mo
190.09 185.217 li
184.09 185.217 mo
190.09 191.217 li
@
165.476 199.114 mo
171.476 193.114 li
165.476 193.114 mo
171.476 199.114 li
f
165.476 199.114 mo
171.476 193.114 li
165.476 193.114 mo
171.476 199.114 li
@
161.635 216.562 mo
167.635 210.562 li
161.635 210.562 mo
167.635 216.562 li
f
161.635 216.562 mo
167.635 210.562 li
161.635 210.562 mo
167.635 216.562 li
@
305.485 246.262 mo
311.485 240.262 li
305.485 240.262 mo
311.485 246.262 li
f
305.485 246.262 mo
311.485 240.262 li
305.485 240.262 mo
311.485 246.262 li
@
301.346 254.591 mo
307.346 248.591 li
301.346 248.591 mo
307.346 254.591 li
f
301.346 254.591 mo
307.346 248.591 li
301.346 248.591 mo
307.346 254.591 li
@
309.044 244.702 mo
315.044 238.702 li
309.044 238.702 mo
315.044 244.702 li
f
309.044 244.702 mo
315.044 238.702 li
309.044 238.702 mo
315.044 244.702 li
@
191.635 184.416 mo
197.635 178.416 li
191.635 178.416 mo
197.635 184.416 li
f
191.635 184.416 mo
197.635 178.416 li
191.635 178.416 mo
197.635 184.416 li
@
285.396 278.323 mo
291.396 272.323 li
285.396 272.323 mo
291.396 278.323 li
f
285.396 278.323 mo
291.396 272.323 li
285.396 272.323 mo
291.396 278.323 li
@
277.505 261.124 mo
283.505 255.124 li
277.505 255.124 mo
283.505 261.124 li
f
277.505 261.124 mo
283.505 255.124 li
277.505 255.124 mo
283.505 261.124 li
@
274.491 260.942 mo
280.491 254.942 li
274.491 254.942 mo
280.491 260.942 li
f
274.491 260.942 mo
280.491 254.942 li
274.491 254.942 mo
280.491 260.942 li
@
266.115 257.34 mo
272.115 251.34 li
266.115 251.34 mo
272.115 257.34 li
f
266.115 257.34 mo
272.115 251.34 li
266.115 251.34 mo
272.115 257.34 li
@
185.102 154.15 mo
191.102 148.15 li
185.102 148.15 mo
191.102 154.15 li
f
185.102 154.15 mo
191.102 148.15 li
185.102 148.15 mo
191.102 154.15 li
@
291.63 231.932 mo
297.63 225.932 li
291.63 225.932 mo
297.63 231.932 li
f
291.63 231.932 mo
297.63 225.932 li
291.63 225.932 mo
297.63 231.932 li
@
296.752 257.658 mo
302.752 251.658 li
296.752 251.658 mo
302.752 257.658 li
f
296.752 257.658 mo
302.752 251.658 li
296.752 251.658 mo
302.752 257.658 li
@
191.369 182.598 mo
197.369 176.598 li
191.369 176.598 mo
197.369 182.598 li
f
191.369 182.598 mo
197.369 176.598 li
191.369 176.598 mo
197.369 182.598 li
@
290.367 256.602 mo
296.367 250.602 li
290.367 250.602 mo
296.367 256.602 li
f
290.367 256.602 mo
296.367 250.602 li
290.367 250.602 mo
296.367 256.602 li
@
277.903 254.597 mo
283.903 248.597 li
277.903 248.597 mo
283.903 254.597 li
f
277.903 254.597 mo
283.903 248.597 li
277.903 248.597 mo
283.903 254.597 li
@
197.147 196.408 mo
203.147 190.408 li
197.147 190.408 mo
203.147 196.408 li
f
197.147 196.408 mo
203.147 190.408 li
197.147 190.408 mo
203.147 196.408 li
@
233.272 248.697 mo
239.272 242.697 li
233.272 242.697 mo
239.272 248.697 li
f
233.272 248.697 mo
239.272 242.697 li
233.272 242.697 mo
239.272 248.697 li
@
286.724 251.846 mo
292.724 245.846 li
286.724 245.846 mo
292.724 251.846 li
f
286.724 251.846 mo
292.724 245.846 li
286.724 245.846 mo
292.724 251.846 li
@
244.999 243.41 mo
250.999 237.41 li
244.999 237.41 mo
250.999 243.41 li
f
244.999 243.41 mo
250.999 237.41 li
244.999 237.41 mo
250.999 243.41 li
@
289.93 249.322 mo
295.93 243.322 li
289.93 243.322 mo
295.93 249.322 li
f
289.93 249.322 mo
295.93 243.322 li
289.93 243.322 mo
295.93 249.322 li
@
278.733 241.391 mo
284.733 235.391 li
278.733 235.391 mo
284.733 241.391 li
f
278.733 241.391 mo
284.733 235.391 li
278.733 235.391 mo
284.733 241.391 li
@
184.919 156.954 mo
190.919 150.954 li
184.919 150.954 mo
190.919 156.954 li
f
184.919 156.954 mo
190.919 150.954 li
184.919 150.954 mo
190.919 156.954 li
@
318.07 236.396 mo
324.07 230.396 li
318.07 230.396 mo
324.07 236.396 li
f
318.07 236.396 mo
324.07 230.396 li
318.07 230.396 mo
324.07 236.396 li
@
316.559 242.287 mo
322.559 236.287 li
316.559 236.287 mo
322.559 242.287 li
f
316.559 242.287 mo
322.559 236.287 li
316.559 236.287 mo
322.559 242.287 li
@
312.234 239.097 mo
318.234 233.097 li
312.234 233.097 mo
318.234 239.097 li
f
312.234 239.097 mo
318.234 233.097 li
312.234 233.097 mo
318.234 239.097 li
@
264.378 240.047 mo
270.378 234.047 li
264.378 234.047 mo
270.378 240.047 li
f
264.378 240.047 mo
270.378 234.047 li
264.378 234.047 mo
270.378 240.047 li
@
325.824 259.462 mo
331.824 253.462 li
325.824 253.462 mo
331.824 259.462 li
f
325.824 259.462 mo
331.824 253.462 li
325.824 253.462 mo
331.824 259.462 li
@
283.329 225.338 mo
289.329 219.338 li
283.329 219.338 mo
289.329 225.338 li
f
283.329 225.338 mo
289.329 219.338 li
283.329 219.338 mo
289.329 225.338 li
@
314.328 240.625 mo
320.328 234.625 li
314.328 234.625 mo
320.328 240.625 li
f
314.328 240.625 mo
320.328 234.625 li
314.328 234.625 mo
320.328 240.625 li
@
315.478 236.443 mo
321.478 230.443 li
315.478 230.443 mo
321.478 236.443 li
f
315.478 236.443 mo
321.478 230.443 li
315.478 230.443 mo
321.478 236.443 li
@
177.96 128.37 mo
183.96 122.37 li
177.96 122.37 mo
183.96 128.37 li
f
177.96 128.37 mo
183.96 122.37 li
177.96 122.37 mo
183.96 128.37 li
@
203.688 175.417 mo
209.688 169.417 li
203.688 169.417 mo
209.688 175.417 li
f
203.688 175.417 mo
209.688 169.417 li
203.688 169.417 mo
209.688 175.417 li
@
253.157 233.811 mo
259.157 227.811 li
253.157 227.811 mo
259.157 233.811 li
f
253.157 233.811 mo
259.157 227.811 li
253.157 227.811 mo
259.157 233.811 li
@
181.665 128.372 mo
187.665 122.372 li
181.665 122.372 mo
187.665 128.372 li
f
181.665 128.372 mo
187.665 122.372 li
181.665 122.372 mo
187.665 128.372 li
@
218.118 183.444 mo
224.118 177.444 li
218.118 177.444 mo
224.118 183.444 li
f
218.118 183.444 mo
224.118 177.444 li
218.118 177.444 mo
224.118 183.444 li
@
270.98 216.156 mo
276.98 210.156 li
270.98 210.156 mo
276.98 216.156 li
f
270.98 216.156 mo
276.98 210.156 li
270.98 210.156 mo
276.98 216.156 li
@
265.758 216.913 mo
271.758 210.913 li
265.758 210.913 mo
271.758 216.913 li
f
265.758 216.913 mo
271.758 210.913 li
265.758 210.913 mo
271.758 216.913 li
@
171.141 101.621 mo
177.141 95.6211 li
171.141 95.6211 mo
177.141 101.621 li
f
171.141 101.621 mo
177.141 95.6211 li
171.141 95.6211 mo
177.141 101.621 li
@
188.317 169.364 mo
194.317 163.364 li
188.317 163.364 mo
194.317 169.364 li
f
188.317 169.364 mo
194.317 163.364 li
188.317 163.364 mo
194.317 169.364 li
@
312.968 244.16 mo
318.968 238.16 li
312.968 238.16 mo
318.968 244.16 li
f
312.968 244.16 mo
318.968 238.16 li
312.968 238.16 mo
318.968 244.16 li
@
154.528 147.835 mo
160.528 141.835 li
154.528 141.835 mo
160.528 147.835 li
f
154.528 147.835 mo
160.528 141.835 li
154.528 141.835 mo
160.528 147.835 li
@
322.534 249.799 mo
328.534 243.799 li
322.534 243.799 mo
328.534 249.799 li
f
322.534 249.799 mo
328.534 243.799 li
322.534 243.799 mo
328.534 249.799 li
@
158.917 148.952 mo
164.917 142.952 li
158.917 142.952 mo
164.917 148.952 li
f
158.917 148.952 mo
164.917 142.952 li
158.917 142.952 mo
164.917 148.952 li
@
182.787 196.632 mo
188.787 190.632 li
182.787 190.632 mo
188.787 196.632 li
f
182.787 196.632 mo
188.787 190.632 li
182.787 190.632 mo
188.787 196.632 li
@
216.05 262.511 mo
222.05 256.511 li
216.05 256.511 mo
222.05 262.511 li
f
216.05 262.511 mo
222.05 256.511 li
216.05 256.511 mo
222.05 262.511 li
@
262.951 272.248 mo
268.951 266.248 li
262.951 266.248 mo
268.951 272.248 li
f
262.951 272.248 mo
268.951 266.248 li
262.951 266.248 mo
268.951 272.248 li
@
254.845 249.834 mo
260.845 243.834 li
254.845 243.834 mo
260.845 249.834 li
f
254.845 249.834 mo
260.845 243.834 li
254.845 243.834 mo
260.845 249.834 li
@
270.123 269.554 mo
276.123 263.554 li
270.123 263.554 mo
276.123 269.554 li
f
270.123 269.554 mo
276.123 263.554 li
270.123 263.554 mo
276.123 269.554 li
@
266.699 230.017 mo
272.699 224.017 li
266.699 224.017 mo
272.699 230.017 li
f
266.699 230.017 mo
272.699 224.017 li
266.699 224.017 mo
272.699 230.017 li
@
203.241 211.517 mo
209.241 205.517 li
203.241 205.517 mo
209.241 211.517 li
f
203.241 211.517 mo
209.241 205.517 li
203.241 205.517 mo
209.241 211.517 li
@
243.791 250.953 mo
249.791 244.953 li
243.791 244.953 mo
249.791 250.953 li
f
243.791 250.953 mo
249.791 244.953 li
243.791 244.953 mo
249.791 250.953 li
@
190.675 191.166 mo
196.675 185.166 li
190.675 185.166 mo
196.675 191.166 li
f
190.675 191.166 mo
196.675 185.166 li
190.675 185.166 mo
196.675 191.166 li
@
162.285 167.949 mo
168.285 161.949 li
162.285 161.949 mo
168.285 167.949 li
f
162.285 167.949 mo
168.285 161.949 li
162.285 161.949 mo
168.285 167.949 li
@
296.656 234.391 mo
302.656 228.391 li
296.656 228.391 mo
302.656 234.391 li
f
296.656 234.391 mo
302.656 228.391 li
296.656 228.391 mo
302.656 234.391 li
@
301.404 232.216 mo
307.404 226.216 li
301.404 226.216 mo
307.404 232.216 li
f
301.404 232.216 mo
307.404 226.216 li
301.404 226.216 mo
307.404 232.216 li
@
288.244 219.762 mo
294.244 213.762 li
288.244 213.762 mo
294.244 219.762 li
f
288.244 219.762 mo
294.244 213.762 li
288.244 213.762 mo
294.244 219.762 li
@
284.074 251.316 mo
290.074 245.316 li
284.074 245.316 mo
290.074 251.316 li
f
284.074 251.316 mo
290.074 245.316 li
284.074 245.316 mo
290.074 251.316 li
@
253.971 245.554 mo
259.971 239.554 li
253.971 239.554 mo
259.971 245.554 li
f
253.971 245.554 mo
259.971 239.554 li
253.971 239.554 mo
259.971 245.554 li
@
221.297 145.509 mo
227.297 139.509 li
221.297 139.509 mo
227.297 145.509 li
f
221.297 145.509 mo
227.297 139.509 li
221.297 139.509 mo
227.297 145.509 li
@
283.072 253.174 mo
289.072 247.174 li
283.072 247.174 mo
289.072 253.174 li
f
283.072 253.174 mo
289.072 247.174 li
283.072 247.174 mo
289.072 253.174 li
@
285.835 246.713 mo
291.835 240.713 li
285.835 240.713 mo
291.835 246.713 li
f
285.835 246.713 mo
291.835 240.713 li
285.835 240.713 mo
291.835 246.713 li
@
193.094 219.496 mo
199.094 213.496 li
193.094 213.496 mo
199.094 219.496 li
f
193.094 219.496 mo
199.094 213.496 li
193.094 213.496 mo
199.094 219.496 li
@
286.335 236.079 mo
292.335 230.079 li
286.335 230.079 mo
292.335 236.079 li
f
286.335 236.079 mo
292.335 230.079 li
286.335 230.079 mo
292.335 236.079 li
@
289.6 268.704 mo
295.6 262.704 li
289.6 262.704 mo
295.6 268.704 li
f
289.6 268.704 mo
295.6 262.704 li
289.6 262.704 mo
295.6 268.704 li
@
156.667 91.4751 mo
162.667 85.4751 li
156.667 85.4751 mo
162.667 91.4751 li
f
156.667 91.4751 mo
162.667 85.4751 li
156.667 85.4751 mo
162.667 91.4751 li
@
299.154 267.492 mo
305.154 261.492 li
299.154 261.492 mo
305.154 267.492 li
f
299.154 267.492 mo
305.154 261.492 li
299.154 261.492 mo
305.154 267.492 li
@
178.495 185.04 mo
184.495 179.04 li
178.495 179.04 mo
184.495 185.04 li
f
178.495 185.04 mo
184.495 179.04 li
178.495 179.04 mo
184.495 185.04 li
@
228.135 237.087 mo
234.135 231.087 li
228.135 231.087 mo
234.135 237.087 li
f
228.135 237.087 mo
234.135 231.087 li
228.135 231.087 mo
234.135 237.087 li
@
272.202 260.331 mo
278.202 254.331 li
272.202 254.331 mo
278.202 260.331 li
f
272.202 260.331 mo
278.202 254.331 li
272.202 254.331 mo
278.202 260.331 li
@
245.948 254.385 mo
251.948 248.385 li
245.948 248.385 mo
251.948 254.385 li
f
245.948 254.385 mo
251.948 248.385 li
245.948 248.385 mo
251.948 254.385 li
@
255.266 225.044 mo
261.266 219.044 li
255.266 219.044 mo
261.266 225.044 li
f
255.266 225.044 mo
261.266 219.044 li
255.266 219.044 mo
261.266 225.044 li
@
225.222 235.842 mo
231.222 229.842 li
225.222 229.842 mo
231.222 235.842 li
f
225.222 235.842 mo
231.222 229.842 li
225.222 229.842 mo
231.222 235.842 li
@
288.549 276.784 mo
294.549 270.784 li
288.549 270.784 mo
294.549 276.784 li
f
288.549 276.784 mo
294.549 270.784 li
288.549 270.784 mo
294.549 276.784 li
@
158.737 102.623 mo
164.737 96.6231 li
158.737 96.6231 mo
164.737 102.623 li
f
158.737 102.623 mo
164.737 96.6231 li
158.737 96.6231 mo
164.737 102.623 li
@
295.777 256.827 mo
301.777 250.827 li
295.777 250.827 mo
301.777 256.827 li
f
295.777 256.827 mo
301.777 250.827 li
295.777 250.827 mo
301.777 256.827 li
@
297.655 253.72 mo
303.655 247.72 li
297.655 247.72 mo
303.655 253.72 li
f
297.655 253.72 mo
303.655 247.72 li
297.655 247.72 mo
303.655 253.72 li
@
180.605 186.937 mo
186.605 180.937 li
180.605 180.937 mo
186.605 186.937 li
f
180.605 186.937 mo
186.605 180.937 li
180.605 180.937 mo
186.605 186.937 li
@
236.615 237.759 mo
242.615 231.759 li
236.615 231.759 mo
242.615 237.759 li
f
236.615 237.759 mo
242.615 231.759 li
236.615 231.759 mo
242.615 237.759 li
@
276.829 254.284 mo
282.829 248.284 li
276.829 248.284 mo
282.829 254.284 li
f
276.829 254.284 mo
282.829 248.284 li
276.829 248.284 mo
282.829 254.284 li
@
276.44 256.456 mo
282.44 250.456 li
276.44 250.456 mo
282.44 256.456 li
f
276.44 256.456 mo
282.44 250.456 li
276.44 250.456 mo
282.44 256.456 li
@
164.111 97.5261 mo
170.111 91.5261 li
164.111 91.5261 mo
170.111 97.5261 li
f
164.111 97.5261 mo
170.111 91.5261 li
164.111 91.5261 mo
170.111 97.5261 li
@
187.387 138.91 mo
193.387 132.91 li
187.387 132.91 mo
193.387 138.91 li
f
187.387 138.91 mo
193.387 132.91 li
187.387 132.91 mo
193.387 138.91 li
@
169.217 116.126 mo
175.217 110.126 li
169.217 110.126 mo
175.217 116.126 li
f
169.217 116.126 mo
175.217 110.126 li
169.217 110.126 mo
175.217 116.126 li
@
277.041 275.96 mo
283.041 269.96 li
277.041 269.96 mo
283.041 275.96 li
f
277.041 275.96 mo
283.041 269.96 li
277.041 269.96 mo
283.041 275.96 li
@
193.88 175.267 mo
199.88 169.267 li
193.88 169.267 mo
199.88 175.267 li
f
193.88 175.267 mo
199.88 169.267 li
193.88 169.267 mo
199.88 175.267 li
@
256.622 257.45 mo
262.622 251.45 li
256.622 251.45 mo
262.622 257.45 li
f
256.622 257.45 mo
262.622 251.45 li
256.622 251.45 mo
262.622 257.45 li
@
262.779 257.659 mo
268.779 251.659 li
262.779 251.659 mo
268.779 257.659 li
f
262.779 257.659 mo
268.779 251.659 li
262.779 251.659 mo
268.779 257.659 li
@
313.608 244.434 mo
319.608 238.434 li
313.608 238.434 mo
319.608 244.434 li
f
313.608 244.434 mo
319.608 238.434 li
313.608 238.434 mo
319.608 244.434 li
@
155.496 90.1761 mo
161.496 84.1761 li
155.496 84.1761 mo
161.496 90.1761 li
f
155.496 90.1761 mo
161.496 84.1761 li
155.496 84.1761 mo
161.496 90.1761 li
@
168.076 104.135 mo
174.076 98.1351 li
168.076 98.1351 mo
174.076 104.135 li
f
168.076 104.135 mo
174.076 98.1351 li
168.076 98.1351 mo
174.076 104.135 li
@
191.587 200.023 mo
197.587 194.023 li
191.587 194.023 mo
197.587 200.023 li
f
191.587 200.023 mo
197.587 194.023 li
191.587 194.023 mo
197.587 200.023 li
@
245.103 241.707 mo
251.103 235.707 li
245.103 235.707 mo
251.103 241.707 li
f
245.103 241.707 mo
251.103 235.707 li
245.103 235.707 mo
251.103 241.707 li
@
293.793 254.873 mo
299.793 248.873 li
293.793 248.873 mo
299.793 254.873 li
f
293.793 254.873 mo
299.793 248.873 li
293.793 248.873 mo
299.793 254.873 li
@
166.015 96.0771 mo
172.015 90.0771 li
166.015 90.0771 mo
172.015 96.0771 li
f
166.015 96.0771 mo
172.015 90.0771 li
166.015 90.0771 mo
172.015 96.0771 li
@
238.672 224.66 mo
244.672 218.66 li
238.672 218.66 mo
244.672 224.66 li
f
238.672 224.66 mo
244.672 218.66 li
238.672 218.66 mo
244.672 224.66 li
@
281.227 257.58 mo
287.227 251.58 li
281.227 251.58 mo
287.227 257.58 li
f
281.227 257.58 mo
287.227 251.58 li
281.227 251.58 mo
287.227 257.58 li
@
273.448 222.823 mo
279.448 216.823 li
273.448 216.823 mo
279.448 222.823 li
f
273.448 222.823 mo
279.448 216.823 li
273.448 216.823 mo
279.448 222.823 li
@
191.502 112.889 mo
197.502 106.889 li
191.502 106.889 mo
197.502 112.889 li
f
191.502 112.889 mo
197.502 106.889 li
191.502 106.889 mo
197.502 112.889 li
@
336.017 240.792 mo
342.017 234.792 li
336.017 234.792 mo
342.017 240.792 li
f
336.017 240.792 mo
342.017 234.792 li
336.017 234.792 mo
342.017 240.792 li
@
323.96 260.126 mo
329.96 254.126 li
323.96 254.126 mo
329.96 260.126 li
f
323.96 260.126 mo
329.96 254.126 li
323.96 254.126 mo
329.96 260.126 li
@
323.427 242.703 mo
329.427 236.703 li
323.427 236.703 mo
329.427 242.703 li
f
323.427 242.703 mo
329.427 236.703 li
323.427 236.703 mo
329.427 242.703 li
@
158.701 122.061 mo
164.701 116.061 li
158.701 116.061 mo
164.701 122.061 li
f
158.701 122.061 mo
164.701 116.061 li
158.701 116.061 mo
164.701 122.061 li
@
179.207 180.936 mo
185.207 174.936 li
179.207 174.936 mo
185.207 180.936 li
f
179.207 180.936 mo
185.207 174.936 li
179.207 174.936 mo
185.207 180.936 li
@
282.778 240.575 mo
288.778 234.575 li
282.778 234.575 mo
288.778 240.575 li
f
282.778 240.575 mo
288.778 234.575 li
282.778 234.575 mo
288.778 240.575 li
@
277.574 242.031 mo
283.574 236.031 li
277.574 236.031 mo
283.574 242.031 li
f
277.574 242.031 mo
283.574 236.031 li
277.574 236.031 mo
283.574 242.031 li
@
204.002 165.933 mo
210.002 159.933 li
204.002 159.933 mo
210.002 165.933 li
f
204.002 165.933 mo
210.002 159.933 li
204.002 159.933 mo
210.002 165.933 li
@
300.992 244.584 mo
306.992 238.584 li
300.992 238.584 mo
306.992 244.584 li
f
300.992 244.584 mo
306.992 238.584 li
300.992 238.584 mo
306.992 244.584 li
@
176.255 122.659 mo
182.255 116.659 li
176.255 116.659 mo
182.255 122.659 li
f
176.255 122.659 mo
182.255 116.659 li
176.255 116.659 mo
182.255 122.659 li
@
265.943 262.718 mo
271.943 256.718 li
265.943 256.718 mo
271.943 262.718 li
f
265.943 262.718 mo
271.943 256.718 li
265.943 256.718 mo
271.943 262.718 li
@
300.202 241.924 mo
306.202 235.924 li
300.202 235.924 mo
306.202 241.924 li
f
300.202 241.924 mo
306.202 235.924 li
300.202 235.924 mo
306.202 241.924 li
@
200.362 142.121 mo
206.362 136.121 li
200.362 136.121 mo
206.362 142.121 li
f
200.362 142.121 mo
206.362 136.121 li
200.362 136.121 mo
206.362 142.121 li
@
215.863 180.259 mo
221.863 174.259 li
215.863 174.259 mo
221.863 180.259 li
f
215.863 180.259 mo
221.863 174.259 li
215.863 174.259 mo
221.863 180.259 li
@
337.048 268.403 mo
343.048 262.403 li
337.048 262.403 mo
343.048 268.403 li
f
337.048 268.403 mo
343.048 262.403 li
337.048 262.403 mo
343.048 268.403 li
@
179.694 185.167 mo
185.694 179.167 li
179.694 179.167 mo
185.694 185.167 li
f
179.694 185.167 mo
185.694 179.167 li
179.694 179.167 mo
185.694 185.167 li
@
224.05 242.004 mo
230.05 236.004 li
224.05 236.004 mo
230.05 242.004 li
f
224.05 242.004 mo
230.05 236.004 li
224.05 236.004 mo
230.05 242.004 li
@
268.203 256.434 mo
274.203 250.434 li
268.203 250.434 mo
274.203 256.434 li
f
268.203 256.434 mo
274.203 250.434 li
268.203 250.434 mo
274.203 256.434 li
@
287.321 249.354 mo
293.321 243.354 li
287.321 243.354 mo
293.321 249.354 li
f
287.321 249.354 mo
293.321 243.354 li
287.321 243.354 mo
293.321 249.354 li
@
199.17 161.219 mo
205.17 155.219 li
199.17 155.219 mo
205.17 161.219 li
f
199.17 161.219 mo
205.17 155.219 li
199.17 155.219 mo
205.17 161.219 li
@
203.178 182.213 mo
209.178 176.213 li
203.178 176.213 mo
209.178 182.213 li
f
203.178 182.213 mo
209.178 176.213 li
203.178 176.213 mo
209.178 182.213 li
@
254.485 237.672 mo
260.485 231.672 li
254.485 231.672 mo
260.485 237.672 li
f
254.485 237.672 mo
260.485 231.672 li
254.485 231.672 mo
260.485 237.672 li
@
309.71 263.822 mo
315.71 257.822 li
309.71 257.822 mo
315.71 263.822 li
f
309.71 263.822 mo
315.71 257.822 li
309.71 257.822 mo
315.71 263.822 li
@
284.567 254.521 mo
290.567 248.521 li
284.567 248.521 mo
290.567 254.521 li
f
284.567 254.521 mo
290.567 248.521 li
284.567 248.521 mo
290.567 254.521 li
@
205.256 186.445 mo
211.256 180.445 li
205.256 180.445 mo
211.256 186.445 li
f
205.256 186.445 mo
211.256 180.445 li
205.256 180.445 mo
211.256 186.445 li
@
262.48 239.473 mo
268.48 233.473 li
262.48 233.473 mo
268.48 239.473 li
f
262.48 239.473 mo
268.48 233.473 li
262.48 233.473 mo
268.48 239.473 li
@
172.79 122.349 mo
178.79 116.349 li
172.79 116.349 mo
178.79 122.349 li
f
172.79 122.349 mo
178.79 116.349 li
172.79 116.349 mo
178.79 122.349 li
@
172.571 157.504 mo
178.571 151.504 li
172.571 151.504 mo
178.571 157.504 li
f
172.571 157.504 mo
178.571 151.504 li
172.571 151.504 mo
178.571 157.504 li
@
184.714 207.955 mo
190.714 201.955 li
184.714 201.955 mo
190.714 207.955 li
f
184.714 207.955 mo
190.714 201.955 li
184.714 201.955 mo
190.714 207.955 li
@
235.974 237.046 mo
241.974 231.046 li
235.974 231.046 mo
241.974 237.046 li
f
235.974 237.046 mo
241.974 231.046 li
235.974 231.046 mo
241.974 237.046 li
@
296.696 259.07 mo
302.696 253.07 li
296.696 253.07 mo
302.696 259.07 li
f
296.696 259.07 mo
302.696 253.07 li
296.696 253.07 mo
302.696 259.07 li
@
300.94 254.405 mo
306.94 248.405 li
300.94 248.405 mo
306.94 254.405 li
f
300.94 254.405 mo
306.94 248.405 li
300.94 248.405 mo
306.94 254.405 li
@
158.889 105.539 mo
164.889 99.5391 li
158.889 99.5391 mo
164.889 105.539 li
f
158.889 105.539 mo
164.889 99.5391 li
158.889 99.5391 mo
164.889 105.539 li
@
193.385 161.47 mo
199.385 155.47 li
193.385 155.47 mo
199.385 161.47 li
f
193.385 161.47 mo
199.385 155.47 li
193.385 155.47 mo
199.385 161.47 li
@
176.207 187.6 mo
182.207 181.6 li
176.207 181.6 mo
182.207 187.6 li
f
176.207 187.6 mo
182.207 181.6 li
176.207 181.6 mo
182.207 187.6 li
@
223.178 251.883 mo
229.178 245.883 li
223.178 245.883 mo
229.178 251.883 li
f
223.178 251.883 mo
229.178 245.883 li
223.178 245.883 mo
229.178 251.883 li
@
265.054 273.454 mo
271.054 267.454 li
265.054 267.454 mo
271.054 273.454 li
f
265.054 273.454 mo
271.054 267.454 li
265.054 267.454 mo
271.054 273.454 li
@
259.067 279.595 mo
265.067 273.595 li
259.067 273.595 mo
265.067 279.595 li
f
259.067 279.595 mo
265.067 273.595 li
259.067 273.595 mo
265.067 279.595 li
@
258.437 271.465 mo
264.437 265.465 li
258.437 265.465 mo
264.437 271.465 li
f
258.437 271.465 mo
264.437 265.465 li
258.437 265.465 mo
264.437 271.465 li
@
185.434 186.221 mo
191.434 180.221 li
185.434 180.221 mo
191.434 186.221 li
f
185.434 186.221 mo
191.434 180.221 li
185.434 180.221 mo
191.434 186.221 li
@
238.547 240.482 mo
244.547 234.482 li
238.547 234.482 mo
244.547 240.482 li
f
238.547 240.482 mo
244.547 234.482 li
238.547 234.482 mo
244.547 240.482 li
@
170.89 107.076 mo
176.89 101.076 li
170.89 101.076 mo
176.89 107.076 li
f
170.89 107.076 mo
176.89 101.076 li
170.89 101.076 mo
176.89 107.076 li
@
166.004 116.071 mo
172.004 110.071 li
166.004 110.071 mo
172.004 116.071 li
f
166.004 116.071 mo
172.004 110.071 li
166.004 110.071 mo
172.004 116.071 li
@
227.509 209.586 mo
233.509 203.586 li
227.509 203.586 mo
233.509 209.586 li
f
227.509 209.586 mo
233.509 203.586 li
227.509 203.586 mo
233.509 209.586 li
@
265.883 250.684 mo
271.883 244.684 li
265.883 244.684 mo
271.883 250.684 li
f
265.883 250.684 mo
271.883 244.684 li
265.883 244.684 mo
271.883 250.684 li
@
264.763 243.874 mo
270.763 237.874 li
264.763 237.874 mo
270.763 243.874 li
f
264.763 243.874 mo
270.763 237.874 li
264.763 237.874 mo
270.763 243.874 li
@
318.588 248.51 mo
324.588 242.51 li
318.588 242.51 mo
324.588 248.51 li
f
318.588 248.51 mo
324.588 242.51 li
318.588 242.51 mo
324.588 248.51 li
@
271.821 233.215 mo
277.821 227.215 li
271.821 227.215 mo
277.821 233.215 li
f
271.821 233.215 mo
277.821 227.215 li
271.821 227.215 mo
277.821 233.215 li
@
220.326 252.386 mo
226.326 246.386 li
220.326 246.386 mo
226.326 252.386 li
f
220.326 252.386 mo
226.326 246.386 li
220.326 246.386 mo
226.326 252.386 li
@
274.405 268.305 mo
280.405 262.305 li
274.405 262.305 mo
280.405 268.305 li
f
274.405 268.305 mo
280.405 262.305 li
274.405 262.305 mo
280.405 268.305 li
@
300.796 256.066 mo
306.796 250.066 li
300.796 250.066 mo
306.796 256.066 li
f
300.796 256.066 mo
306.796 250.066 li
300.796 250.066 mo
306.796 256.066 li
@
170.602 100.807 mo
176.602 94.8071 li
170.602 94.8071 mo
176.602 100.807 li
f
170.602 100.807 mo
176.602 94.8071 li
170.602 94.8071 mo
176.602 100.807 li
@
221.949 242.46 mo
227.949 236.46 li
221.949 236.46 mo
227.949 242.46 li
f
221.949 242.46 mo
227.949 236.46 li
221.949 236.46 mo
227.949 242.46 li
@
253.127 275.5 mo
259.127 269.5 li
253.127 269.5 mo
259.127 275.5 li
f
253.127 275.5 mo
259.127 269.5 li
253.127 269.5 mo
259.127 275.5 li
@
161.596 213.288 mo
167.596 207.288 li
161.596 207.288 mo
167.596 213.288 li
f
161.596 213.288 mo
167.596 207.288 li
161.596 207.288 mo
167.596 213.288 li
@
276.407 270.59 mo
282.407 264.59 li
276.407 264.59 mo
282.407 270.59 li
f
276.407 270.59 mo
282.407 264.59 li
276.407 264.59 mo
282.407 270.59 li
@
276.562 279.85 mo
282.562 273.85 li
276.562 273.85 mo
282.562 279.85 li
f
276.562 279.85 mo
282.562 273.85 li
276.562 273.85 mo
282.562 279.85 li
@
181.01 195.396 mo
187.01 189.396 li
181.01 189.396 mo
187.01 195.396 li
f
181.01 195.396 mo
187.01 189.396 li
181.01 189.396 mo
187.01 195.396 li
@
278.353 257.874 mo
284.353 251.874 li
278.353 251.874 mo
284.353 257.874 li
f
278.353 257.874 mo
284.353 251.874 li
278.353 251.874 mo
284.353 257.874 li
@
274.892 254.397 mo
280.892 248.397 li
274.892 248.397 mo
280.892 254.397 li
f
274.892 254.397 mo
280.892 248.397 li
274.892 248.397 mo
280.892 254.397 li
@
251.257 233.803 mo
257.257 227.803 li
251.257 227.803 mo
257.257 233.803 li
f
251.257 233.803 mo
257.257 227.803 li
251.257 227.803 mo
257.257 233.803 li
@
300.502 239.82 mo
306.502 233.82 li
300.502 233.82 mo
306.502 239.82 li
f
300.502 239.82 mo
306.502 233.82 li
300.502 233.82 mo
306.502 239.82 li
@
324.817 228.486 mo
330.817 222.486 li
324.817 222.486 mo
330.817 228.486 li
f
324.817 228.486 mo
330.817 222.486 li
324.817 222.486 mo
330.817 228.486 li
@
266.988 268.59 mo
272.988 262.59 li
266.988 262.59 mo
272.988 268.59 li
f
266.988 268.59 mo
272.988 262.59 li
266.988 262.59 mo
272.988 268.59 li
@
301.885 245.531 mo
307.885 239.531 li
301.885 239.531 mo
307.885 245.531 li
f
301.885 245.531 mo
307.885 239.531 li
301.885 239.531 mo
307.885 245.531 li
@
282.273 247.163 mo
288.273 241.163 li
282.273 241.163 mo
288.273 247.163 li
f
282.273 247.163 mo
288.273 241.163 li
282.273 241.163 mo
288.273 247.163 li
@
275.361 253.47 mo
281.361 247.47 li
275.361 247.47 mo
281.361 253.47 li
f
275.361 253.47 mo
281.361 247.47 li
275.361 247.47 mo
281.361 253.47 li
@
188.789 180.902 mo
194.789 174.902 li
188.789 174.902 mo
194.789 180.902 li
f
188.789 180.902 mo
194.789 174.902 li
188.789 174.902 mo
194.789 180.902 li
@
243.42 239.827 mo
249.42 233.827 li
243.42 233.827 mo
249.42 239.827 li
f
243.42 239.827 mo
249.42 233.827 li
243.42 233.827 mo
249.42 239.827 li
@
288.806 262.451 mo
294.806 256.451 li
288.806 256.451 mo
294.806 262.451 li
f
288.806 262.451 mo
294.806 256.451 li
288.806 256.451 mo
294.806 262.451 li
@
290.428 262.915 mo
296.428 256.915 li
290.428 256.915 mo
296.428 262.915 li
f
290.428 262.915 mo
296.428 256.915 li
290.428 256.915 mo
296.428 262.915 li
@
291.178 263.47 mo
297.178 257.47 li
291.178 257.47 mo
297.178 263.47 li
f
291.178 263.47 mo
297.178 257.47 li
291.178 257.47 mo
297.178 263.47 li
@
205.043 167.116 mo
211.043 161.116 li
205.043 161.116 mo
211.043 167.116 li
f
205.043 167.116 mo
211.043 161.116 li
205.043 161.116 mo
211.043 167.116 li
@
279.288 255.122 mo
285.288 249.122 li
279.288 249.122 mo
285.288 255.122 li
f
279.288 255.122 mo
285.288 249.122 li
279.288 249.122 mo
285.288 255.122 li
@
271.864 258.171 mo
277.864 252.171 li
271.864 252.171 mo
277.864 258.171 li
f
271.864 258.171 mo
277.864 252.171 li
271.864 252.171 mo
277.864 258.171 li
@
195.054 122.774 mo
201.054 116.774 li
195.054 116.774 mo
201.054 122.774 li
f
195.054 122.774 mo
201.054 116.774 li
195.054 116.774 mo
201.054 122.774 li
@
179.778 75.4641 mo
185.778 69.4641 li
179.778 69.4641 mo
185.778 75.4641 li
f
179.778 75.4641 mo
185.778 69.4641 li
179.778 69.4641 mo
185.778 75.4641 li
@
266.506 246.681 mo
272.506 240.681 li
266.506 240.681 mo
272.506 246.681 li
f
266.506 246.681 mo
272.506 240.681 li
266.506 240.681 mo
272.506 246.681 li
@
275.215 268.28 mo
281.215 262.28 li
275.215 262.28 mo
281.215 268.28 li
f
275.215 268.28 mo
281.215 262.28 li
275.215 262.28 mo
281.215 268.28 li
@
246.544 225.43 mo
252.544 219.43 li
246.544 219.43 mo
252.544 225.43 li
f
246.544 225.43 mo
252.544 219.43 li
246.544 219.43 mo
252.544 225.43 li
@
261.691 265.131 mo
267.691 259.131 li
261.691 259.131 mo
267.691 265.131 li
f
261.691 265.131 mo
267.691 259.131 li
261.691 259.131 mo
267.691 265.131 li
@
159.312 150.718 mo
165.312 144.718 li
159.312 144.718 mo
165.312 150.718 li
f
159.312 150.718 mo
165.312 144.718 li
159.312 144.718 mo
165.312 150.718 li
@
169.301 191.181 mo
175.301 185.181 li
169.301 185.181 mo
175.301 191.181 li
f
169.301 191.181 mo
175.301 185.181 li
169.301 185.181 mo
175.301 191.181 li
@
257.159 259.982 mo
263.159 253.982 li
257.159 253.982 mo
263.159 259.982 li
f
257.159 259.982 mo
263.159 253.982 li
257.159 253.982 mo
263.159 259.982 li
@
302.536 254.111 mo
308.536 248.111 li
302.536 248.111 mo
308.536 254.111 li
f
302.536 254.111 mo
308.536 248.111 li
302.536 248.111 mo
308.536 254.111 li
@
295.19 277.031 mo
301.19 271.031 li
295.19 271.031 mo
301.19 277.031 li
f
295.19 277.031 mo
301.19 271.031 li
295.19 271.031 mo
301.19 277.031 li
@
305.58 255.127 mo
311.58 249.127 li
305.58 249.127 mo
311.58 255.127 li
f
305.58 255.127 mo
311.58 249.127 li
305.58 249.127 mo
311.58 255.127 li
@
285.945 254.885 mo
291.945 248.885 li
285.945 248.885 mo
291.945 254.885 li
f
285.945 254.885 mo
291.945 248.885 li
285.945 248.885 mo
291.945 254.885 li
@
202.029 127.792 mo
208.029 121.792 li
202.029 121.792 mo
208.029 127.792 li
f
202.029 127.792 mo
208.029 121.792 li
202.029 121.792 mo
208.029 127.792 li
@
233.288 244.95 mo
239.288 238.95 li
233.288 238.95 mo
239.288 244.95 li
f
233.288 244.95 mo
239.288 238.95 li
233.288 238.95 mo
239.288 244.95 li
@
281.208 259.773 mo
287.208 253.773 li
281.208 253.773 mo
287.208 259.773 li
f
281.208 259.773 mo
287.208 253.773 li
281.208 253.773 mo
287.208 259.773 li
@
276.607 259.577 mo
282.607 253.577 li
276.607 253.577 mo
282.607 259.577 li
f
276.607 259.577 mo
282.607 253.577 li
276.607 253.577 mo
282.607 259.577 li
@
278.844 254.234 mo
284.844 248.234 li
278.844 248.234 mo
284.844 254.234 li
f
278.844 254.234 mo
284.844 248.234 li
278.844 248.234 mo
284.844 254.234 li
@
272.792 267.939 mo
278.792 261.939 li
272.792 261.939 mo
278.792 267.939 li
f
272.792 267.939 mo
278.792 261.939 li
272.792 261.939 mo
278.792 267.939 li
@
266.497 264.32 mo
272.497 258.32 li
266.497 258.32 mo
272.497 264.32 li
f
266.497 264.32 mo
272.497 258.32 li
266.497 258.32 mo
272.497 264.32 li
@
196.864 138.057 mo
202.864 132.057 li
196.864 132.057 mo
202.864 138.057 li
f
196.864 138.057 mo
202.864 132.057 li
196.864 132.057 mo
202.864 138.057 li
@
303.206 258.175 mo
309.206 252.175 li
303.206 252.175 mo
309.206 258.175 li
f
303.206 258.175 mo
309.206 252.175 li
303.206 252.175 mo
309.206 258.175 li
@
296.665 256.619 mo
302.665 250.619 li
296.665 250.619 mo
302.665 256.619 li
f
296.665 256.619 mo
302.665 250.619 li
296.665 250.619 mo
302.665 256.619 li
@
153.323 112.439 mo
159.323 106.439 li
153.323 106.439 mo
159.323 112.439 li
f
153.323 112.439 mo
159.323 106.439 li
153.323 106.439 mo
159.323 112.439 li
@
169.718 60.9281 mo
175.718 54.9281 li
169.718 54.9281 mo
175.718 60.9281 li
f
169.718 60.9281 mo
175.718 54.9281 li
169.718 54.9281 mo
175.718 60.9281 li
@
162.965 104.213 mo
168.965 98.2131 li
162.965 98.2131 mo
168.965 104.213 li
f
162.965 104.213 mo
168.965 98.2131 li
162.965 98.2131 mo
168.965 104.213 li
@
244.595 258.113 mo
250.595 252.113 li
244.595 252.113 mo
250.595 258.113 li
f
244.595 258.113 mo
250.595 252.113 li
244.595 252.113 mo
250.595 258.113 li
@
175.628 158.305 mo
181.628 152.305 li
175.628 152.305 mo
181.628 158.305 li
f
175.628 158.305 mo
181.628 152.305 li
175.628 152.305 mo
181.628 158.305 li
@
193.033 189.486 mo
199.033 183.486 li
193.033 183.486 mo
199.033 189.486 li
f
193.033 189.486 mo
199.033 183.486 li
193.033 183.486 mo
199.033 189.486 li
@
236.027 251.472 mo
242.027 245.472 li
236.027 245.472 mo
242.027 251.472 li
f
236.027 251.472 mo
242.027 245.472 li
236.027 245.472 mo
242.027 251.472 li
@
275.402 261.302 mo
281.402 255.302 li
275.402 255.302 mo
281.402 261.302 li
f
275.402 261.302 mo
281.402 255.302 li
275.402 255.302 mo
281.402 261.302 li
@
185.787 145.746 mo
191.787 139.746 li
185.787 139.746 mo
191.787 145.746 li
f
185.787 145.746 mo
191.787 139.746 li
185.787 139.746 mo
191.787 145.746 li
@
196.176 200.065 mo
202.176 194.065 li
196.176 194.065 mo
202.176 200.065 li
f
196.176 200.065 mo
202.176 194.065 li
196.176 194.065 mo
202.176 200.065 li
@
294.116 246.212 mo
300.116 240.212 li
294.116 240.212 mo
300.116 246.212 li
f
294.116 246.212 mo
300.116 240.212 li
294.116 240.212 mo
300.116 246.212 li
@
199.09 173.018 mo
205.09 167.018 li
199.09 167.018 mo
205.09 173.018 li
f
199.09 173.018 mo
205.09 167.018 li
199.09 167.018 mo
205.09 173.018 li
@
244.395 265.578 mo
250.395 259.578 li
244.395 259.578 mo
250.395 265.578 li
f
244.395 265.578 mo
250.395 259.578 li
244.395 259.578 mo
250.395 265.578 li
@
312.406 263.672 mo
318.406 257.672 li
312.406 257.672 mo
318.406 263.672 li
f
312.406 263.672 mo
318.406 257.672 li
312.406 257.672 mo
318.406 263.672 li
@
271.638 230.096 mo
277.638 224.096 li
271.638 224.096 mo
277.638 230.096 li
f
271.638 230.096 mo
277.638 224.096 li
271.638 224.096 mo
277.638 230.096 li
@
177.474 135.308 mo
183.474 129.308 li
177.474 129.308 mo
183.474 135.308 li
f
177.474 135.308 mo
183.474 129.308 li
177.474 129.308 mo
183.474 135.308 li
@
210.688 165.463 mo
216.688 159.463 li
210.688 159.463 mo
216.688 165.463 li
f
210.688 165.463 mo
216.688 159.463 li
210.688 159.463 mo
216.688 165.463 li
@
167.396 103 mo
173.396 97.0001 li
167.396 97.0001 mo
173.396 103 li
f
167.396 103 mo
173.396 97.0001 li
167.396 97.0001 mo
173.396 103 li
@
193.215 170.858 mo
199.215 164.858 li
193.215 164.858 mo
199.215 170.858 li
f
193.215 170.858 mo
199.215 164.858 li
193.215 164.858 mo
199.215 170.858 li
@
239.939 244.358 mo
245.939 238.358 li
239.939 238.358 mo
245.939 244.358 li
f
239.939 244.358 mo
245.939 238.358 li
239.939 238.358 mo
245.939 244.358 li
@
205.154 137.899 mo
211.154 131.899 li
205.154 131.899 mo
211.154 137.899 li
f
205.154 137.899 mo
211.154 131.899 li
205.154 131.899 mo
211.154 137.899 li
@
264.353 212.054 mo
270.353 206.054 li
264.353 206.054 mo
270.353 212.054 li
f
264.353 212.054 mo
270.353 206.054 li
264.353 206.054 mo
270.353 212.054 li
@
327.743 237.697 mo
333.743 231.697 li
327.743 231.697 mo
333.743 237.697 li
f
327.743 237.697 mo
333.743 231.697 li
327.743 231.697 mo
333.743 237.697 li
@
313.809 240.922 mo
319.809 234.922 li
313.809 234.922 mo
319.809 240.922 li
f
313.809 240.922 mo
319.809 234.922 li
313.809 234.922 mo
319.809 240.922 li
@
311.758 224.42 mo
317.758 218.42 li
311.758 218.42 mo
317.758 224.42 li
f
311.758 224.42 mo
317.758 218.42 li
311.758 218.42 mo
317.758 224.42 li
@
201.301 159.669 mo
207.301 153.669 li
201.301 153.669 mo
207.301 159.669 li
f
201.301 159.669 mo
207.301 153.669 li
201.301 153.669 mo
207.301 159.669 li
@
243.012 224.524 mo
249.012 218.524 li
243.012 218.524 mo
249.012 224.524 li
f
243.012 224.524 mo
249.012 218.524 li
243.012 218.524 mo
249.012 224.524 li
@
245.513 216.868 mo
251.513 210.868 li
245.513 210.868 mo
251.513 216.868 li
f
245.513 216.868 mo
251.513 210.868 li
245.513 210.868 mo
251.513 216.868 li
@
297.072 242.346 mo
303.072 236.346 li
297.072 236.346 mo
303.072 242.346 li
f
297.072 242.346 mo
303.072 236.346 li
297.072 236.346 mo
303.072 242.346 li
@
281.28 241.896 mo
287.28 235.896 li
281.28 235.896 mo
287.28 241.896 li
f
281.28 241.896 mo
287.28 235.896 li
281.28 235.896 mo
287.28 241.896 li
@
256.005 263.207 mo
262.005 257.207 li
256.005 257.207 mo
262.005 263.207 li
f
256.005 263.207 mo
262.005 257.207 li
256.005 257.207 mo
262.005 263.207 li
@
253.817 273.652 mo
259.817 267.652 li
253.817 267.652 mo
259.817 273.652 li
f
253.817 273.652 mo
259.817 267.652 li
253.817 267.652 mo
259.817 273.652 li
@
185.436 185.372 mo
191.436 179.372 li
185.436 179.372 mo
191.436 185.372 li
f
185.436 185.372 mo
191.436 179.372 li
185.436 179.372 mo
191.436 185.372 li
@
154.291 122.185 mo
160.291 116.185 li
154.291 116.185 mo
160.291 122.185 li
f
154.291 122.185 mo
160.291 116.185 li
154.291 116.185 mo
160.291 122.185 li
@
188.342 187.476 mo
194.342 181.476 li
188.342 181.476 mo
194.342 187.476 li
f
188.342 187.476 mo
194.342 181.476 li
188.342 181.476 mo
194.342 187.476 li
@
282.307 272.295 mo
288.307 266.295 li
282.307 266.295 mo
288.307 272.295 li
f
282.307 272.295 mo
288.307 266.295 li
282.307 266.295 mo
288.307 272.295 li
@
177.847 142.841 mo
183.847 136.841 li
177.847 136.841 mo
183.847 142.841 li
f
177.847 142.841 mo
183.847 136.841 li
177.847 136.841 mo
183.847 142.841 li
@
189.548 118.009 mo
195.548 112.009 li
189.548 112.009 mo
195.548 118.009 li
f
189.548 118.009 mo
195.548 112.009 li
189.548 112.009 mo
195.548 118.009 li
@
190.086 160.273 mo
196.086 154.273 li
190.086 154.273 mo
196.086 160.273 li
f
190.086 160.273 mo
196.086 154.273 li
190.086 154.273 mo
196.086 160.273 li
@
298.236 255.61 mo
304.236 249.61 li
298.236 249.61 mo
304.236 255.61 li
f
298.236 255.61 mo
304.236 249.61 li
298.236 249.61 mo
304.236 255.61 li
@
237.458 223.735 mo
243.458 217.735 li
237.458 217.735 mo
243.458 223.735 li
f
237.458 223.735 mo
243.458 217.735 li
237.458 217.735 mo
243.458 223.735 li
@
231.598 262.948 mo
237.598 256.948 li
231.598 256.948 mo
237.598 262.948 li
f
231.598 262.948 mo
237.598 256.948 li
231.598 256.948 mo
237.598 262.948 li
@
282.46 276.878 mo
288.46 270.878 li
282.46 270.878 mo
288.46 276.878 li
f
282.46 276.878 mo
288.46 270.878 li
282.46 270.878 mo
288.46 276.878 li
@
265.483 262.737 mo
271.483 256.737 li
265.483 256.737 mo
271.483 262.737 li
f
265.483 262.737 mo
271.483 256.737 li
265.483 256.737 mo
271.483 262.737 li
@
261.727 263.884 mo
267.727 257.884 li
261.727 257.884 mo
267.727 263.884 li
f
261.727 263.884 mo
267.727 257.884 li
261.727 257.884 mo
267.727 263.884 li
@
288.837 256.319 mo
294.837 250.319 li
288.837 250.319 mo
294.837 256.319 li
f
288.837 256.319 mo
294.837 250.319 li
288.837 250.319 mo
294.837 256.319 li
@
289.209 244.518 mo
295.209 238.518 li
289.209 238.518 mo
295.209 244.518 li
f
289.209 244.518 mo
295.209 238.518 li
289.209 238.518 mo
295.209 244.518 li
@
171.67 55.1201 mo
177.67 49.1201 li
171.67 49.1201 mo
177.67 55.1201 li
f
171.67 55.1201 mo
177.67 49.1201 li
171.67 49.1201 mo
177.67 55.1201 li
@
237.59 256.888 mo
243.59 250.888 li
237.59 250.888 mo
243.59 256.888 li
f
237.59 256.888 mo
243.59 250.888 li
237.59 250.888 mo
243.59 256.888 li
@
260.713 259.835 mo
266.713 253.835 li
260.713 253.835 mo
266.713 259.835 li
f
260.713 259.835 mo
266.713 253.835 li
260.713 253.835 mo
266.713 259.835 li
@
233.871 255.123 mo
239.871 249.123 li
233.871 249.123 mo
239.871 255.123 li
f
233.871 255.123 mo
239.871 249.123 li
233.871 249.123 mo
239.871 255.123 li
@
282.16 279.238 mo
288.16 273.238 li
282.16 273.238 mo
288.16 279.238 li
f
282.16 279.238 mo
288.16 273.238 li
282.16 273.238 mo
288.16 279.238 li
@
257.537 258.538 mo
263.537 252.538 li
257.537 252.538 mo
263.537 258.538 li
f
257.537 258.538 mo
263.537 252.538 li
257.537 252.538 mo
263.537 258.538 li
@
242.697 233.768 mo
248.697 227.768 li
242.697 227.768 mo
248.697 233.768 li
f
242.697 233.768 mo
248.697 227.768 li
242.697 227.768 mo
248.697 233.768 li
@
170.851 124.862 mo
176.851 118.862 li
170.851 118.862 mo
176.851 124.862 li
f
170.851 124.862 mo
176.851 118.862 li
170.851 118.862 mo
176.851 124.862 li
@
240.103 216.751 mo
246.103 210.751 li
240.103 210.751 mo
246.103 216.751 li
f
240.103 216.751 mo
246.103 210.751 li
240.103 210.751 mo
246.103 216.751 li
@
182.199 176.334 mo
188.199 170.334 li
182.199 170.334 mo
188.199 176.334 li
f
182.199 176.334 mo
188.199 170.334 li
182.199 170.334 mo
188.199 176.334 li
@
218.83 255.474 mo
224.83 249.474 li
218.83 249.474 mo
224.83 255.474 li
f
218.83 255.474 mo
224.83 249.474 li
218.83 249.474 mo
224.83 255.474 li
@
272.818 265.945 mo
278.818 259.945 li
272.818 259.945 mo
278.818 265.945 li
f
272.818 265.945 mo
278.818 259.945 li
272.818 259.945 mo
278.818 265.945 li
@
269.297 260.356 mo
275.297 254.356 li
269.297 254.356 mo
275.297 260.356 li
f
269.297 260.356 mo
275.297 254.356 li
269.297 254.356 mo
275.297 260.356 li
@
167.63 129.795 mo
173.63 123.795 li
167.63 123.795 mo
173.63 129.795 li
f
167.63 129.795 mo
173.63 123.795 li
167.63 123.795 mo
173.63 129.795 li
@
306.531 262.869 mo
312.531 256.869 li
306.531 256.869 mo
312.531 262.869 li
f
306.531 262.869 mo
312.531 256.869 li
306.531 256.869 mo
312.531 262.869 li
@
272.194 219.395 mo
278.194 213.395 li
272.194 213.395 mo
278.194 219.395 li
f
272.194 219.395 mo
278.194 213.395 li
272.194 213.395 mo
278.194 219.395 li
@
160.932 128.634 mo
166.932 122.634 li
160.932 122.634 mo
166.932 128.634 li
f
160.932 128.634 mo
166.932 122.634 li
160.932 122.634 mo
166.932 128.634 li
@
225.889 234.238 mo
231.889 228.238 li
225.889 228.238 mo
231.889 234.238 li
f
225.889 234.238 mo
231.889 228.238 li
225.889 228.238 mo
231.889 234.238 li
@
270.285 252.117 mo
276.285 246.117 li
270.285 246.117 mo
276.285 252.117 li
f
270.285 252.117 mo
276.285 246.117 li
270.285 246.117 mo
276.285 252.117 li
@
291.796 245.62 mo
297.796 239.62 li
291.796 239.62 mo
297.796 245.62 li
f
291.796 245.62 mo
297.796 239.62 li
291.796 239.62 mo
297.796 245.62 li
@
237.817 220 mo
243.817 214 li
237.817 214 mo
243.817 220 li
f
237.817 220 mo
243.817 214 li
237.817 214 mo
243.817 220 li
@
283.77 251.093 mo
289.77 245.093 li
283.77 245.093 mo
289.77 251.093 li
f
283.77 251.093 mo
289.77 245.093 li
283.77 245.093 mo
289.77 251.093 li
@
277.504 246.814 mo
283.504 240.814 li
277.504 240.814 mo
283.504 246.814 li
f
277.504 246.814 mo
283.504 240.814 li
277.504 240.814 mo
283.504 246.814 li
@
266.418 250.785 mo
272.418 244.785 li
266.418 244.785 mo
272.418 250.785 li
f
266.418 250.785 mo
272.418 244.785 li
266.418 244.785 mo
272.418 250.785 li
@
262.544 246.335 mo
268.544 240.335 li
262.544 240.335 mo
268.544 246.335 li
f
262.544 246.335 mo
268.544 240.335 li
262.544 240.335 mo
268.544 246.335 li
@
230.936 200.217 mo
236.936 194.217 li
230.936 194.217 mo
236.936 200.217 li
f
230.936 200.217 mo
236.936 194.217 li
230.936 194.217 mo
236.936 200.217 li
@
290.019 197.714 mo
296.019 191.714 li
290.019 191.714 mo
296.019 197.714 li
f
290.019 197.714 mo
296.019 191.714 li
290.019 191.714 mo
296.019 197.714 li
@
283.305 240.73 mo
289.305 234.73 li
283.305 234.73 mo
289.305 240.73 li
f
283.305 240.73 mo
289.305 234.73 li
283.305 234.73 mo
289.305 240.73 li
@
277.749 230.346 mo
283.749 224.346 li
277.749 224.346 mo
283.749 230.346 li
f
277.749 230.346 mo
283.749 224.346 li
277.749 224.346 mo
283.749 230.346 li
@
216.102 265.806 mo
222.102 259.806 li
216.102 259.806 mo
222.102 265.806 li
f
216.102 265.806 mo
222.102 259.806 li
216.102 259.806 mo
222.102 265.806 li
@
261.417 258.251 mo
267.417 252.251 li
261.417 252.251 mo
267.417 258.251 li
f
261.417 258.251 mo
267.417 252.251 li
261.417 252.251 mo
267.417 258.251 li
@
255.203 266.986 mo
261.203 260.986 li
255.203 260.986 mo
261.203 266.986 li
f
255.203 266.986 mo
261.203 260.986 li
255.203 260.986 mo
261.203 266.986 li
@
255.633 261.197 mo
261.633 255.197 li
255.633 255.197 mo
261.633 261.197 li
f
255.633 261.197 mo
261.633 255.197 li
255.633 255.197 mo
261.633 261.197 li
@
247.057 265.969 mo
253.057 259.969 li
247.057 259.969 mo
253.057 265.969 li
f
247.057 265.969 mo
253.057 259.969 li
247.057 259.969 mo
253.057 265.969 li
@
305.437 220.613 mo
311.437 214.613 li
305.437 214.613 mo
311.437 220.613 li
f
305.437 220.613 mo
311.437 214.613 li
305.437 214.613 mo
311.437 220.613 li
@
241.714 243.785 mo
247.714 237.785 li
241.714 237.785 mo
247.714 243.785 li
f
241.714 243.785 mo
247.714 237.785 li
241.714 237.785 mo
247.714 243.785 li
@
264.893 254.1 mo
270.893 248.1 li
264.893 248.1 mo
270.893 254.1 li
f
264.893 254.1 mo
270.893 248.1 li
264.893 248.1 mo
270.893 254.1 li
@
285.863 222.924 mo
291.863 216.924 li
285.863 216.924 mo
291.863 222.924 li
f
285.863 222.924 mo
291.863 216.924 li
285.863 216.924 mo
291.863 222.924 li
@
191.288 196.448 mo
197.288 190.448 li
191.288 190.448 mo
197.288 196.448 li
f
191.288 196.448 mo
197.288 190.448 li
191.288 190.448 mo
197.288 196.448 li
@
165.004 156.47 mo
171.004 150.47 li
165.004 150.47 mo
171.004 156.47 li
f
165.004 156.47 mo
171.004 150.47 li
165.004 150.47 mo
171.004 156.47 li
@
182.345 81.5501 mo
188.345 81.5501 li
185.345 84.5501 mo
185.345 78.5501 li
.895628 .7673 0 0 cmyk
f
182.345 81.5501 mo
188.345 81.5501 li
185.345 84.5501 mo
185.345 78.5501 li
@
251.393 86.0791 mo
257.393 86.0791 li
254.393 89.0791 mo
254.393 83.0791 li
f
251.393 86.0791 mo
257.393 86.0791 li
254.393 89.0791 mo
254.393 83.0791 li
@
340.725 176.645 mo
346.725 176.645 li
343.725 179.645 mo
343.725 173.645 li
f
340.725 176.645 mo
346.725 176.645 li
343.725 179.645 mo
343.725 173.645 li
@
392.658 171.136 mo
398.658 171.136 li
395.658 174.136 mo
395.658 168.136 li
f
392.658 171.136 mo
398.658 171.136 li
395.658 174.136 mo
395.658 168.136 li
@
433.35 167.23 mo
439.35 167.23 li
436.35 170.23 mo
436.35 164.23 li
f
433.35 167.23 mo
439.35 167.23 li
436.35 170.23 mo
436.35 164.23 li
@
410.803 187.104 mo
416.803 187.104 li
413.803 190.104 mo
413.803 184.104 li
f
410.803 187.104 mo
416.803 187.104 li
413.803 190.104 mo
413.803 184.104 li
@
179.362 98.1171 mo
185.362 98.1171 li
182.362 101.117 mo
182.362 95.1171 li
f
179.362 98.1171 mo
185.362 98.1171 li
182.362 101.117 mo
182.362 95.1171 li
@
251.765 107.201 mo
257.765 107.201 li
254.765 110.201 mo
254.765 104.201 li
f
251.765 107.201 mo
257.765 107.201 li
254.765 110.201 mo
254.765 104.201 li
@
390.715 196.731 mo
396.715 196.731 li
393.715 199.731 mo
393.715 193.731 li
f
390.715 196.731 mo
396.715 196.731 li
393.715 199.731 mo
393.715 193.731 li
@
389.772 205.094 mo
395.772 205.094 li
392.772 208.094 mo
392.772 202.094 li
f
389.772 205.094 mo
395.772 205.094 li
392.772 208.094 mo
392.772 202.094 li
@
200.934 81.6371 mo
206.934 81.6371 li
203.934 84.6371 mo
203.934 78.6371 li
f
200.934 81.6371 mo
206.934 81.6371 li
203.934 84.6371 mo
203.934 78.6371 li
@
244.906 91.0321 mo
250.906 91.0321 li
247.906 94.0321 mo
247.906 88.0321 li
f
244.906 91.0321 mo
250.906 91.0321 li
247.906 94.0321 mo
247.906 88.0321 li
@
335.162 186.21 mo
341.162 186.21 li
338.162 189.21 mo
338.162 183.21 li
f
335.162 186.21 mo
341.162 186.21 li
338.162 189.21 mo
338.162 183.21 li
@
368.067 183.824 mo
374.067 183.824 li
371.067 186.824 mo
371.067 180.824 li
f
368.067 183.824 mo
374.067 183.824 li
371.067 186.824 mo
371.067 180.824 li
@
406.849 165.991 mo
412.849 165.991 li
409.849 168.991 mo
409.849 162.991 li
f
406.849 165.991 mo
412.849 165.991 li
409.849 168.991 mo
409.849 162.991 li
@
410.497 180.871 mo
416.497 180.871 li
413.497 183.871 mo
413.497 177.871 li
f
410.497 180.871 mo
416.497 180.871 li
413.497 183.871 mo
413.497 177.871 li
@
410.242 177.267 mo
416.242 177.267 li
413.242 180.267 mo
413.242 174.267 li
f
410.242 177.267 mo
416.242 177.267 li
413.242 180.267 mo
413.242 174.267 li
@
255.503 93.1551 mo
261.503 93.1551 li
258.503 96.1551 mo
258.503 90.1551 li
f
255.503 93.1551 mo
261.503 93.1551 li
258.503 96.1551 mo
258.503 90.1551 li
@
309.845 99.8451 mo
315.845 99.8451 li
312.845 102.845 mo
312.845 96.8451 li
f
309.845 99.8451 mo
315.845 99.8451 li
312.845 102.845 mo
312.845 96.8451 li
@
408.852 177.022 mo
414.852 177.022 li
411.852 180.022 mo
411.852 174.022 li
f
408.852 177.022 mo
414.852 177.022 li
411.852 180.022 mo
411.852 174.022 li
@
464.263 178.402 mo
470.263 178.402 li
467.263 181.402 mo
467.263 175.402 li
f
464.263 178.402 mo
470.263 178.402 li
467.263 181.402 mo
467.263 175.402 li
@
474.668 192.227 mo
480.668 192.227 li
477.668 195.227 mo
477.668 189.227 li
f
474.668 192.227 mo
480.668 192.227 li
477.668 195.227 mo
477.668 189.227 li
@
466.438 191.667 mo
472.438 191.667 li
469.438 194.667 mo
469.438 188.667 li
f
466.438 191.667 mo
472.438 191.667 li
469.438 194.667 mo
469.438 188.667 li
@
208.909 101.205 mo
214.909 101.205 li
211.909 104.205 mo
211.909 98.2051 li
f
208.909 101.205 mo
214.909 101.205 li
211.909 104.205 mo
211.909 98.2051 li
@
342.458 190.52 mo
348.458 190.52 li
345.458 193.52 mo
345.458 187.52 li
f
342.458 190.52 mo
348.458 190.52 li
345.458 193.52 mo
345.458 187.52 li
@
395.801 166.892 mo
401.801 166.892 li
398.801 169.892 mo
398.801 163.892 li
f
395.801 166.892 mo
401.801 166.892 li
398.801 169.892 mo
398.801 163.892 li
@
427.558 160.046 mo
433.558 160.046 li
430.558 163.046 mo
430.558 157.046 li
f
427.558 160.046 mo
433.558 160.046 li
430.558 163.046 mo
430.558 157.046 li
@
424.452 181.909 mo
430.452 181.909 li
427.452 184.909 mo
427.452 178.909 li
f
424.452 181.909 mo
430.452 181.909 li
427.452 184.909 mo
427.452 178.909 li
@
394.961 180.194 mo
400.961 180.194 li
397.961 183.194 mo
397.961 177.194 li
f
394.961 180.194 mo
400.961 180.194 li
397.961 183.194 mo
397.961 177.194 li
@
230.858 78.6301 mo
236.858 78.6301 li
233.858 81.6301 mo
233.858 75.6301 li
f
230.858 78.6301 mo
236.858 78.6301 li
233.858 81.6301 mo
233.858 75.6301 li
@
385.402 180.266 mo
391.402 180.266 li
388.402 183.266 mo
388.402 177.266 li
f
385.402 180.266 mo
391.402 180.266 li
388.402 183.266 mo
388.402 177.266 li
@
453.62 162.281 mo
459.62 162.281 li
456.62 165.281 mo
456.62 159.281 li
f
453.62 162.281 mo
459.62 162.281 li
456.62 165.281 mo
456.62 159.281 li
@
455.167 157.471 mo
461.167 157.471 li
458.167 160.471 mo
458.167 154.471 li
f
455.167 157.471 mo
461.167 157.471 li
458.167 160.471 mo
458.167 154.471 li
@
505.853 159.114 mo
511.853 159.114 li
508.853 162.114 mo
508.853 156.114 li
f
505.853 159.114 mo
511.853 159.114 li
508.853 162.114 mo
508.853 156.114 li
@
294.883 101.208 mo
300.883 101.208 li
297.883 104.208 mo
297.883 98.2081 li
f
294.883 101.208 mo
300.883 101.208 li
297.883 104.208 mo
297.883 98.2081 li
@
369.006 196.527 mo
375.006 196.527 li
372.006 199.527 mo
372.006 193.527 li
f
369.006 196.527 mo
375.006 196.527 li
372.006 199.527 mo
372.006 193.527 li
@
440.44 172.619 mo
446.44 172.619 li
443.44 175.619 mo
443.44 169.619 li
f
440.44 172.619 mo
446.44 172.619 li
443.44 175.619 mo
443.44 169.619 li
@
462.128 169.225 mo
468.128 169.225 li
465.128 172.225 mo
465.128 166.225 li
f
462.128 169.225 mo
468.128 169.225 li
465.128 172.225 mo
465.128 166.225 li
@
369.672 198.833 mo
375.672 198.833 li
372.672 201.833 mo
372.672 195.833 li
f
369.672 198.833 mo
375.672 198.833 li
372.672 201.833 mo
372.672 195.833 li
@
244.757 82.5151 mo
250.757 82.5151 li
247.757 85.5151 mo
247.757 79.5151 li
f
244.757 82.5151 mo
250.757 82.5151 li
247.757 85.5151 mo
247.757 79.5151 li
@
273.395 66.7071 mo
279.395 66.7071 li
276.395 69.7071 mo
276.395 63.7071 li
f
273.395 66.7071 mo
279.395 66.7071 li
276.395 69.7071 mo
276.395 63.7071 li
@
362.705 161.042 mo
368.705 161.042 li
365.705 164.042 mo
365.705 158.042 li
f
362.705 161.042 mo
368.705 161.042 li
365.705 164.042 mo
365.705 158.042 li
@
417.469 129.992 mo
423.469 129.992 li
420.469 132.992 mo
420.469 126.992 li
f
417.469 129.992 mo
423.469 129.992 li
420.469 132.992 mo
420.469 126.992 li
@
428.678 152.567 mo
434.678 152.567 li
431.678 155.567 mo
431.678 149.567 li
f
428.678 152.567 mo
434.678 152.567 li
431.678 155.567 mo
431.678 149.567 li
@
221.94 69.5861 mo
227.94 69.5861 li
224.94 72.5861 mo
224.94 66.5861 li
f
221.94 69.5861 mo
227.94 69.5861 li
224.94 72.5861 mo
224.94 66.5861 li
@
304.356 62.3431 mo
310.356 62.3431 li
307.356 65.3431 mo
307.356 59.3431 li
f
304.356 62.3431 mo
310.356 62.3431 li
307.356 65.3431 mo
307.356 59.3431 li
@
388.221 155.016 mo
394.221 155.016 li
391.221 158.016 mo
391.221 152.016 li
f
388.221 155.016 mo
394.221 155.016 li
391.221 158.016 mo
391.221 152.016 li
@
439.766 156.852 mo
445.766 156.852 li
442.766 159.852 mo
442.766 153.852 li
f
439.766 156.852 mo
445.766 156.852 li
442.766 159.852 mo
442.766 153.852 li
@
445.831 163.079 mo
451.831 163.079 li
448.831 166.079 mo
448.831 160.079 li
f
445.831 163.079 mo
451.831 163.079 li
448.831 166.079 mo
448.831 160.079 li
@
426.009 174.358 mo
432.009 174.358 li
429.009 177.358 mo
429.009 171.358 li
f
426.009 174.358 mo
432.009 174.358 li
429.009 177.358 mo
429.009 171.358 li
@
438.792 175.734 mo
444.792 175.734 li
441.792 178.734 mo
441.792 172.734 li
f
438.792 175.734 mo
444.792 175.734 li
441.792 178.734 mo
441.792 172.734 li
@
202.716 57.5451 mo
208.716 57.5451 li
205.716 60.5451 mo
205.716 54.5451 li
f
202.716 57.5451 mo
208.716 57.5451 li
205.716 60.5451 mo
205.716 54.5451 li
@
251.839 63.9761 mo
257.839 63.9761 li
254.839 66.9761 mo
254.839 60.9761 li
f
251.839 63.9761 mo
257.839 63.9761 li
254.839 66.9761 mo
254.839 60.9761 li
@
351.456 142.083 mo
357.456 142.083 li
354.456 145.083 mo
354.456 139.083 li
f
351.456 142.083 mo
357.456 142.083 li
354.456 145.083 mo
354.456 139.083 li
@
392.944 168.052 mo
398.944 168.052 li
395.944 171.052 mo
395.944 165.052 li
f
392.944 168.052 mo
398.944 168.052 li
395.944 171.052 mo
395.944 165.052 li
@
402.644 162.041 mo
408.644 162.041 li
405.644 165.041 mo
405.644 159.041 li
f
402.644 162.041 mo
408.644 162.041 li
405.644 165.041 mo
405.644 159.041 li
@
454.455 166.32 mo
460.455 166.32 li
457.455 169.32 mo
457.455 163.32 li
f
454.455 166.32 mo
460.455 166.32 li
457.455 169.32 mo
457.455 163.32 li
@
240.427 60.8811 mo
246.427 60.8811 li
243.427 63.8811 mo
243.427 57.8811 li
f
240.427 60.8811 mo
246.427 60.8811 li
243.427 63.8811 mo
243.427 57.8811 li
@
306.228 147.913 mo
312.228 147.913 li
309.228 150.913 mo
309.228 144.913 li
f
306.228 147.913 mo
312.228 147.913 li
309.228 150.913 mo
309.228 144.913 li
@
373.59 144.916 mo
379.59 144.916 li
376.59 147.916 mo
376.59 141.916 li
f
373.59 144.916 mo
379.59 144.916 li
376.59 147.916 mo
376.59 141.916 li
@
455.268 137.627 mo
461.268 137.627 li
458.268 140.627 mo
458.268 134.627 li
f
455.268 137.627 mo
461.268 137.627 li
458.268 140.627 mo
458.268 134.627 li
@
437.111 146.622 mo
443.111 146.622 li
440.111 149.622 mo
440.111 143.622 li
f
437.111 146.622 mo
443.111 146.622 li
440.111 149.622 mo
440.111 143.622 li
@
441.266 155.372 mo
447.266 155.372 li
444.266 158.372 mo
444.266 152.372 li
f
441.266 155.372 mo
447.266 155.372 li
444.266 158.372 mo
444.266 152.372 li
@
349.784 17.4491 mo
355.784 17.4491 li
352.784 20.4491 mo
352.784 14.4491 li
f
349.784 17.4491 mo
355.784 17.4491 li
352.784 20.4491 mo
352.784 14.4491 li
@
393.229 31.5621 mo
399.229 31.5621 li
396.229 34.5621 mo
396.229 28.5621 li
f
393.229 31.5621 mo
399.229 31.5621 li
396.229 34.5621 mo
396.229 28.5621 li
@
534.317 118.757 mo
540.317 118.757 li
537.317 121.757 mo
537.317 115.757 li
f
534.317 118.757 mo
540.317 118.757 li
537.317 121.757 mo
537.317 115.757 li
@
559.456 92.8491 mo
565.456 92.8491 li
562.456 95.8491 mo
562.456 89.8491 li
f
559.456 92.8491 mo
565.456 92.8491 li
562.456 95.8491 mo
562.456 89.8491 li
@
602.182 76.4141 mo
608.182 76.4141 li
605.182 79.4141 mo
605.182 73.4141 li
f
602.182 76.4141 mo
608.182 76.4141 li
605.182 79.4141 mo
605.182 73.4141 li
@
450.265 180.702 mo
456.265 180.702 li
453.265 183.702 mo
453.265 177.702 li
f
450.265 180.702 mo
456.265 180.702 li
453.265 183.702 mo
453.265 177.702 li
@
271.123 87.7771 mo
277.123 87.7771 li
274.123 90.7771 mo
274.123 84.7771 li
f
271.123 87.7771 mo
277.123 87.7771 li
274.123 90.7771 mo
274.123 84.7771 li
@
340.891 99.2151 mo
346.891 99.2151 li
343.891 102.215 mo
343.891 96.2151 li
f
340.891 99.2151 mo
346.891 99.2151 li
343.891 102.215 mo
343.891 96.2151 li
@
395.596 192.382 mo
401.596 192.382 li
398.596 195.382 mo
398.596 189.382 li
f
395.596 192.382 mo
401.596 192.382 li
398.596 195.382 mo
398.596 189.382 li
@
425.715 178.48 mo
431.715 178.48 li
428.715 181.48 mo
428.715 175.48 li
f
425.715 178.48 mo
431.715 178.48 li
428.715 181.48 mo
428.715 175.48 li
@
495.583 187.206 mo
501.583 187.206 li
498.583 190.206 mo
498.583 184.206 li
f
495.583 187.206 mo
501.583 187.206 li
498.583 190.206 mo
498.583 184.206 li
@
428.116 205.149 mo
434.116 205.149 li
431.116 208.149 mo
431.116 202.149 li
f
428.116 205.149 mo
434.116 205.149 li
431.116 208.149 mo
431.116 202.149 li
@
476.979 200.627 mo
482.979 200.627 li
479.979 203.627 mo
479.979 197.627 li
f
476.979 200.627 mo
482.979 200.627 li
479.979 203.627 mo
479.979 197.627 li
@
400.299 196.846 mo
406.299 196.846 li
403.299 199.846 mo
403.299 193.846 li
f
400.299 196.846 mo
406.299 196.846 li
403.299 199.846 mo
403.299 193.846 li
@
279.4 77.1911 mo
285.4 77.1911 li
282.4 80.1911 mo
282.4 74.1911 li
f
279.4 77.1911 mo
285.4 77.1911 li
282.4 80.1911 mo
282.4 74.1911 li
@
381.504 181.27 mo
387.504 181.27 li
384.504 184.27 mo
384.504 178.27 li
f
381.504 181.27 mo
387.504 181.27 li
384.504 184.27 mo
384.504 178.27 li
@
445.397 165.239 mo
451.397 165.239 li
448.397 168.239 mo
448.397 162.239 li
f
445.397 165.239 mo
451.397 165.239 li
448.397 168.239 mo
448.397 162.239 li
@
438.961 173.92 mo
444.961 173.92 li
441.961 176.92 mo
441.961 170.92 li
f
438.961 173.92 mo
444.961 173.92 li
441.961 176.92 mo
441.961 170.92 li
@
203.434 87.1291 mo
209.434 87.1291 li
206.434 90.1291 mo
206.434 84.1291 li
f
203.434 87.1291 mo
209.434 87.1291 li
206.434 90.1291 mo
206.434 84.1291 li
@
269.103 73.1481 mo
275.103 73.1481 li
272.103 76.1481 mo
272.103 70.1481 li
f
269.103 73.1481 mo
275.103 73.1481 li
272.103 76.1481 mo
272.103 70.1481 li
@
444.167 167.95 mo
450.167 167.95 li
447.167 170.95 mo
447.167 164.95 li
f
444.167 167.95 mo
450.167 167.95 li
447.167 170.95 mo
447.167 164.95 li
@
456.422 143.364 mo
462.422 143.364 li
459.422 146.364 mo
459.422 140.364 li
f
456.422 143.364 mo
462.422 143.364 li
459.422 146.364 mo
459.422 140.364 li
@
270.489 54.5091 mo
276.489 54.5091 li
273.489 57.5091 mo
273.489 51.5091 li
f
270.489 54.5091 mo
276.489 54.5091 li
273.489 57.5091 mo
273.489 51.5091 li
@
448.167 158.625 mo
454.167 158.625 li
451.167 161.625 mo
451.167 155.625 li
f
448.167 158.625 mo
454.167 158.625 li
451.167 161.625 mo
451.167 155.625 li
@
505.036 142.868 mo
511.036 142.868 li
508.036 145.868 mo
508.036 139.868 li
f
505.036 142.868 mo
511.036 142.868 li
508.036 145.868 mo
508.036 139.868 li
@
536.179 119.061 mo
542.179 119.061 li
539.179 122.061 mo
539.179 116.061 li
f
536.179 119.061 mo
542.179 119.061 li
539.179 122.061 mo
539.179 116.061 li
@
470.198 137.339 mo
476.198 137.339 li
473.198 140.339 mo
473.198 134.339 li
f
470.198 137.339 mo
476.198 137.339 li
473.198 140.339 mo
473.198 134.339 li
@
184.108 75.1601 mo
190.108 75.1601 li
187.108 78.1601 mo
187.108 72.1601 li
f
184.108 75.1601 mo
190.108 75.1601 li
187.108 78.1601 mo
187.108 72.1601 li
@
251.899 70.6821 mo
257.899 70.6821 li
254.899 73.6821 mo
254.899 67.6821 li
f
251.899 70.6821 mo
257.899 70.6821 li
254.899 73.6821 mo
254.899 67.6821 li
@
340.803 175.144 mo
346.803 175.144 li
343.803 178.144 mo
343.803 172.144 li
f
340.803 175.144 mo
346.803 175.144 li
343.803 178.144 mo
343.803 172.144 li
@
417.591 165.482 mo
423.591 165.482 li
420.591 168.482 mo
420.591 162.482 li
f
417.591 165.482 mo
423.591 165.482 li
420.591 168.482 mo
420.591 162.482 li
@
426.177 163.786 mo
432.177 163.786 li
429.177 166.786 mo
429.177 160.786 li
f
426.177 163.786 mo
432.177 163.786 li
429.177 166.786 mo
429.177 160.786 li
@
442.626 169.431 mo
448.626 169.431 li
445.626 172.431 mo
445.626 166.431 li
f
442.626 169.431 mo
448.626 169.431 li
445.626 172.431 mo
445.626 166.431 li
@
240.969 91.0161 mo
246.969 91.0161 li
243.969 94.0161 mo
243.969 88.0161 li
f
240.969 91.0161 mo
246.969 91.0161 li
243.969 94.0161 mo
243.969 88.0161 li
@
279.493 72.1741 mo
285.493 72.1741 li
282.493 75.1741 mo
282.493 69.1741 li
f
279.493 72.1741 mo
285.493 72.1741 li
282.493 75.1741 mo
282.493 69.1741 li
@
381.193 201.084 mo
387.193 201.084 li
384.193 204.084 mo
384.193 198.084 li
f
381.193 201.084 mo
387.193 201.084 li
384.193 204.084 mo
384.193 198.084 li
@
459.588 163.053 mo
465.588 163.053 li
462.588 166.053 mo
462.588 160.053 li
f
459.588 163.053 mo
465.588 163.053 li
462.588 166.053 mo
462.588 160.053 li
@
424.829 182.516 mo
430.829 182.516 li
427.829 185.516 mo
427.829 179.516 li
f
424.829 182.516 mo
430.829 182.516 li
427.829 185.516 mo
427.829 179.516 li
@
454.346 176.667 mo
460.346 176.667 li
457.346 179.667 mo
457.346 173.667 li
f
454.346 176.667 mo
460.346 176.667 li
457.346 179.667 mo
457.346 173.667 li
@
227.004 127.429 mo
233.004 127.429 li
230.004 130.429 mo
230.004 124.429 li
f
227.004 127.429 mo
233.004 127.429 li
230.004 130.429 mo
230.004 124.429 li
@
275.467 106.831 mo
281.467 106.831 li
278.467 109.831 mo
278.467 103.831 li
f
275.467 106.831 mo
281.467 106.831 li
278.467 109.831 mo
278.467 103.831 li
@
361.216 198.669 mo
367.216 198.669 li
364.216 201.669 mo
364.216 195.669 li
f
361.216 198.669 mo
367.216 198.669 li
364.216 201.669 mo
364.216 195.669 li
@
399.089 195.493 mo
405.089 195.493 li
402.089 198.493 mo
402.089 192.493 li
f
399.089 195.493 mo
405.089 195.493 li
402.089 198.493 mo
402.089 192.493 li
@
404.925 195.406 mo
410.925 195.406 li
407.925 198.406 mo
407.925 192.406 li
f
404.925 195.406 mo
410.925 195.406 li
407.925 198.406 mo
407.925 192.406 li
@
294.12 71.5261 mo
300.12 71.5261 li
297.12 74.5261 mo
297.12 68.5261 li
f
294.12 71.5261 mo
300.12 71.5261 li
297.12 74.5261 mo
297.12 68.5261 li
@
307.717 82.8581 mo
313.717 82.8581 li
310.717 85.8581 mo
310.717 79.8581 li
f
307.717 82.8581 mo
313.717 82.8581 li
310.717 85.8581 mo
310.717 79.8581 li
@
442.64 169.221 mo
448.64 169.221 li
445.64 172.221 mo
445.64 166.221 li
f
442.64 169.221 mo
448.64 169.221 li
445.64 172.221 mo
445.64 166.221 li
@
454.617 216.426 mo
460.617 216.426 li
457.617 219.426 mo
457.617 213.426 li
f
454.617 216.426 mo
460.617 216.426 li
457.617 219.426 mo
457.617 213.426 li
@
498.977 176.249 mo
504.977 176.249 li
501.977 179.249 mo
501.977 173.249 li
f
498.977 176.249 mo
504.977 176.249 li
501.977 179.249 mo
501.977 173.249 li
@
528.813 169.435 mo
534.813 169.435 li
531.813 172.435 mo
531.813 166.435 li
f
528.813 169.435 mo
534.813 169.435 li
531.813 172.435 mo
531.813 166.435 li
@
484.297 196.312 mo
490.297 196.312 li
487.297 199.312 mo
487.297 193.312 li
f
484.297 196.312 mo
490.297 196.312 li
487.297 199.312 mo
487.297 193.312 li
@
369.537 190.157 mo
375.537 190.157 li
372.537 193.157 mo
372.537 187.157 li
f
369.537 190.157 mo
375.537 190.157 li
372.537 193.157 mo
372.537 187.157 li
@
417.366 169.948 mo
423.366 169.948 li
420.366 172.948 mo
420.366 166.948 li
f
417.366 169.948 mo
423.366 169.948 li
420.366 172.948 mo
420.366 166.948 li
@
289.751 104.984 mo
295.751 104.984 li
292.751 107.984 mo
292.751 101.984 li
f
289.751 104.984 mo
295.751 104.984 li
292.751 107.984 mo
292.751 101.984 li
@
419.147 205.825 mo
425.147 205.825 li
422.147 208.825 mo
422.147 202.825 li
f
419.147 205.825 mo
425.147 205.825 li
422.147 208.825 mo
422.147 202.825 li
@
463.194 197.953 mo
469.194 197.953 li
466.194 200.953 mo
466.194 194.953 li
f
463.194 197.953 mo
469.194 197.953 li
466.194 200.953 mo
466.194 194.953 li
@
213.501 69.0071 mo
219.501 69.0071 li
216.501 72.0071 mo
216.501 66.0071 li
f
213.501 69.0071 mo
219.501 69.0071 li
216.501 72.0071 mo
216.501 66.0071 li
@
267.404 67.7631 mo
273.404 67.7631 li
270.404 70.7631 mo
270.404 64.7631 li
f
267.404 67.7631 mo
273.404 67.7631 li
270.404 70.7631 mo
270.404 64.7631 li
@
241.974 78.8041 mo
247.974 78.8041 li
244.974 81.8041 mo
244.974 75.8041 li
f
241.974 78.8041 mo
247.974 78.8041 li
244.974 81.8041 mo
244.974 75.8041 li
@
279.571 87.7481 mo
285.571 87.7481 li
282.571 90.7481 mo
282.571 84.7481 li
f
279.571 87.7481 mo
285.571 87.7481 li
282.571 90.7481 mo
282.571 84.7481 li
@
358.366 178.352 mo
364.366 178.352 li
361.366 181.352 mo
361.366 175.352 li
f
358.366 178.352 mo
364.366 178.352 li
361.366 181.352 mo
361.366 175.352 li
@
438.249 179.434 mo
444.249 179.434 li
441.249 182.434 mo
441.249 176.434 li
f
438.249 179.434 mo
444.249 179.434 li
441.249 182.434 mo
441.249 176.434 li
@
426.516 176.717 mo
432.516 176.717 li
429.516 179.717 mo
429.516 173.717 li
f
426.516 176.717 mo
432.516 176.717 li
429.516 179.717 mo
429.516 173.717 li
@
495.446 182.715 mo
501.446 182.715 li
498.446 185.715 mo
498.446 179.715 li
f
495.446 182.715 mo
501.446 182.715 li
498.446 185.715 mo
498.446 179.715 li
@
247.7 36.6561 mo
253.7 36.6561 li
250.7 39.6561 mo
250.7 33.6561 li
f
247.7 36.6561 mo
253.7 36.6561 li
250.7 39.6561 mo
250.7 33.6561 li
@
344.863 168.177 mo
350.863 168.177 li
347.863 171.177 mo
347.863 165.177 li
f
344.863 168.177 mo
350.863 168.177 li
347.863 171.177 mo
347.863 165.177 li
@
385.346 189.518 mo
391.346 189.518 li
388.346 192.518 mo
388.346 186.518 li
f
385.346 189.518 mo
391.346 189.518 li
388.346 192.518 mo
388.346 186.518 li
@
398.735 186.606 mo
404.735 186.606 li
401.735 189.606 mo
401.735 183.606 li
f
398.735 186.606 mo
404.735 186.606 li
401.735 189.606 mo
401.735 183.606 li
@
446.585 177.971 mo
452.585 177.971 li
449.585 180.971 mo
449.585 174.971 li
f
446.585 177.971 mo
452.585 177.971 li
449.585 180.971 mo
449.585 174.971 li
@
179.964 99.3821 mo
185.964 99.3821 li
182.964 102.382 mo
182.964 96.3821 li
f
179.964 99.3821 mo
185.964 99.3821 li
182.964 102.382 mo
182.964 96.3821 li
@
233.184 107.064 mo
239.184 107.064 li
236.184 110.064 mo
236.184 104.064 li
f
233.184 107.064 mo
239.184 107.064 li
236.184 110.064 mo
236.184 104.064 li
@
313.27 239.991 mo
319.27 239.991 li
316.27 242.991 mo
316.27 236.991 li
f
313.27 239.991 mo
319.27 239.991 li
316.27 242.991 mo
316.27 236.991 li
@
366.075 234.762 mo
372.075 234.762 li
369.075 237.762 mo
369.075 231.762 li
f
366.075 234.762 mo
372.075 234.762 li
369.075 237.762 mo
369.075 231.762 li
@
383.871 212.487 mo
389.871 212.487 li
386.871 215.487 mo
386.871 209.487 li
f
383.871 212.487 mo
389.871 212.487 li
386.871 215.487 mo
386.871 209.487 li
@
421.258 199.075 mo
427.258 199.075 li
424.258 202.075 mo
424.258 196.075 li
f
421.258 199.075 mo
427.258 199.075 li
424.258 202.075 mo
424.258 196.075 li
@
241.632 58.2921 mo
247.632 58.2921 li
244.632 61.2921 mo
244.632 55.2921 li
f
241.632 58.2921 mo
247.632 58.2921 li
244.632 61.2921 mo
244.632 55.2921 li
@
283.5 77.1671 mo
289.5 77.1671 li
286.5 80.1671 mo
286.5 74.1671 li
f
283.5 77.1671 mo
289.5 77.1671 li
286.5 80.1671 mo
286.5 74.1671 li
@
454.872 169.245 mo
460.872 169.245 li
457.872 172.245 mo
457.872 166.245 li
f
454.872 169.245 mo
460.872 169.245 li
457.872 172.245 mo
457.872 166.245 li
@
485.581 167.001 mo
491.581 167.001 li
488.581 170.001 mo
488.581 164.001 li
f
485.581 167.001 mo
491.581 167.001 li
488.581 170.001 mo
488.581 164.001 li
@
235.15 77.9941 mo
241.15 77.9941 li
238.15 80.9941 mo
238.15 74.9941 li
f
235.15 77.9941 mo
241.15 77.9941 li
238.15 80.9941 mo
238.15 74.9941 li
@
289.637 80.6901 mo
295.637 80.6901 li
292.637 83.6901 mo
292.637 77.6901 li
f
289.637 80.6901 mo
295.637 80.6901 li
292.637 83.6901 mo
292.637 77.6901 li
@
366.312 196.609 mo
372.312 196.609 li
369.312 199.609 mo
369.312 193.609 li
f
366.312 196.609 mo
372.312 196.609 li
369.312 199.609 mo
369.312 193.609 li
@
437.024 187.688 mo
443.024 187.688 li
440.024 190.688 mo
440.024 184.688 li
f
437.024 187.688 mo
443.024 187.688 li
440.024 190.688 mo
440.024 184.688 li
@
463.619 186.292 mo
469.619 186.292 li
466.619 189.292 mo
466.619 183.292 li
f
463.619 186.292 mo
469.619 186.292 li
466.619 189.292 mo
466.619 183.292 li
@
457.733 181.366 mo
463.733 181.366 li
460.733 184.366 mo
460.733 178.366 li
f
457.733 181.366 mo
463.733 181.366 li
460.733 184.366 mo
460.733 178.366 li
@
281.984 47.7251 mo
287.984 47.7251 li
284.984 50.7251 mo
284.984 44.7251 li
f
281.984 47.7251 mo
287.984 47.7251 li
284.984 50.7251 mo
284.984 44.7251 li
@
487.051 202.904 mo
493.051 202.904 li
490.051 205.904 mo
490.051 199.904 li
f
487.051 202.904 mo
493.051 202.904 li
490.051 205.904 mo
490.051 199.904 li
@
540.713 205.427 mo
546.713 205.427 li
543.713 208.427 mo
543.713 202.427 li
f
540.713 205.427 mo
546.713 205.427 li
543.713 208.427 mo
543.713 202.427 li
@
576.708 161.072 mo
582.708 161.072 li
579.708 164.072 mo
579.708 158.072 li
f
576.708 161.072 mo
582.708 161.072 li
579.708 164.072 mo
579.708 158.072 li
@
212.602 41.8351 mo
218.602 41.8351 li
215.602 44.8351 mo
215.602 38.8351 li
f
212.602 41.8351 mo
218.602 41.8351 li
215.602 44.8351 mo
215.602 38.8351 li
@
269.373 58.3171 mo
275.373 58.3171 li
272.373 61.3171 mo
272.373 55.3171 li
f
269.373 58.3171 mo
275.373 58.3171 li
272.373 61.3171 mo
272.373 55.3171 li
@
428.318 151.493 mo
434.318 151.493 li
431.318 154.493 mo
431.318 148.493 li
f
428.318 151.493 mo
434.318 151.493 li
431.318 154.493 mo
431.318 148.493 li
@
441.542 153.83 mo
447.542 153.83 li
444.542 156.83 mo
444.542 150.83 li
f
441.542 153.83 mo
447.542 153.83 li
444.542 156.83 mo
444.542 150.83 li
@
258.546 64.7521 mo
264.546 64.7521 li
261.546 67.7521 mo
261.546 61.7521 li
f
258.546 64.7521 mo
264.546 64.7521 li
261.546 67.7521 mo
261.546 61.7521 li
@
422.73 173.75 mo
428.73 173.75 li
425.73 176.75 mo
425.73 170.75 li
f
422.73 173.75 mo
428.73 173.75 li
425.73 176.75 mo
425.73 170.75 li
@
435.272 170.856 mo
441.272 170.856 li
438.272 173.856 mo
438.272 167.856 li
f
435.272 170.856 mo
441.272 170.856 li
438.272 173.856 mo
438.272 167.856 li
@
267.712 78.4551 mo
273.712 78.4551 li
270.712 81.4551 mo
270.712 75.4551 li
f
267.712 78.4551 mo
273.712 78.4551 li
270.712 81.4551 mo
270.712 75.4551 li
@
338.426 65.7171 mo
344.426 65.7171 li
341.426 68.7171 mo
341.426 62.7171 li
f
338.426 65.7171 mo
344.426 65.7171 li
341.426 68.7171 mo
341.426 62.7171 li
@
423.783 198.156 mo
429.783 198.156 li
426.783 201.156 mo
426.783 195.156 li
f
423.783 198.156 mo
429.783 198.156 li
426.783 201.156 mo
426.783 195.156 li
@
481.715 163.693 mo
487.715 163.693 li
484.715 166.693 mo
484.715 160.693 li
f
481.715 163.693 mo
487.715 163.693 li
484.715 166.693 mo
484.715 160.693 li
@
463.923 181.976 mo
469.923 181.976 li
466.923 184.976 mo
466.923 178.976 li
f
463.923 181.976 mo
469.923 181.976 li
466.923 184.976 mo
466.923 178.976 li
@
348.853 38.2421 mo
354.853 38.2421 li
351.853 41.2421 mo
351.853 35.2421 li
f
348.853 38.2421 mo
354.853 38.2421 li
351.853 41.2421 mo
351.853 35.2421 li
@
437.593 153.918 mo
443.593 153.918 li
440.593 156.918 mo
440.593 150.918 li
f
437.593 153.918 mo
443.593 153.918 li
440.593 156.918 mo
440.593 150.918 li
@
479.897 165.099 mo
485.897 165.099 li
482.897 168.099 mo
482.897 162.099 li
f
479.897 165.099 mo
485.897 165.099 li
482.897 168.099 mo
482.897 162.099 li
@
487.775 159.6 mo
493.775 159.6 li
490.775 162.6 mo
490.775 156.6 li
f
487.775 159.6 mo
493.775 159.6 li
490.775 162.6 mo
490.775 156.6 li
@
462.528 146.219 mo
468.528 146.219 li
465.528 149.219 mo
465.528 143.219 li
f
462.528 146.219 mo
468.528 146.219 li
465.528 149.219 mo
465.528 143.219 li
@
527.159 138.31 mo
533.159 138.31 li
530.159 141.31 mo
530.159 135.31 li
f
527.159 138.31 mo
533.159 138.31 li
530.159 141.31 mo
530.159 135.31 li
@
340.957 74.8181 mo
346.957 74.8181 li
343.957 77.8181 mo
343.957 71.8181 li
f
340.957 74.8181 mo
346.957 74.8181 li
343.957 77.8181 mo
343.957 71.8181 li
@
603.938 203.629 mo
609.938 203.629 li
606.938 206.629 mo
606.938 200.629 li
f
603.938 203.629 mo
609.938 203.629 li
606.938 206.629 mo
606.938 200.629 li
@
466.862 234.906 mo
472.862 234.906 li
469.862 237.906 mo
469.862 231.906 li
f
466.862 234.906 mo
472.862 234.906 li
469.862 237.906 mo
469.862 231.906 li
@
313.88 49.4861 mo
319.88 49.4861 li
316.88 52.4861 mo
316.88 46.4861 li
f
313.88 49.4861 mo
319.88 49.4861 li
316.88 52.4861 mo
316.88 46.4861 li
@
474.042 199.518 mo
480.042 199.518 li
477.042 202.518 mo
477.042 196.518 li
f
474.042 199.518 mo
480.042 199.518 li
477.042 202.518 mo
477.042 196.518 li
@
463.555 193.599 mo
469.555 193.599 li
466.555 196.599 mo
466.555 190.599 li
f
463.555 193.599 mo
469.555 193.599 li
466.555 196.599 mo
466.555 190.599 li
@
309.307 33.4721 mo
315.307 33.4721 li
312.307 36.4721 mo
312.307 30.4721 li
f
309.307 33.4721 mo
315.307 33.4721 li
312.307 36.4721 mo
312.307 30.4721 li
@
388.956 24.4401 mo
394.956 24.4401 li
391.956 27.4401 mo
391.956 21.4401 li
f
388.956 24.4401 mo
394.956 24.4401 li
391.956 27.4401 mo
391.956 21.4401 li
@
513.306 170.031 mo
519.306 170.031 li
516.306 173.031 mo
516.306 167.031 li
f
513.306 170.031 mo
519.306 170.031 li
516.306 173.031 mo
516.306 167.031 li
@
485.466 211.181 mo
491.466 211.181 li
488.466 214.181 mo
488.466 208.181 li
f
485.466 211.181 mo
491.466 211.181 li
488.466 214.181 mo
488.466 208.181 li
@
522.683 161.67 mo
528.683 161.67 li
525.683 164.67 mo
525.683 158.67 li
f
522.683 161.67 mo
528.683 161.67 li
525.683 164.67 mo
525.683 158.67 li
@
617.042 188.466 mo
623.042 188.466 li
620.042 191.466 mo
620.042 185.466 li
f
617.042 188.466 mo
623.042 188.466 li
620.042 191.466 mo
620.042 185.466 li
@
507.421 199.512 mo
513.421 199.512 li
510.421 202.512 mo
510.421 196.512 li
f
507.421 199.512 mo
513.421 199.512 li
510.421 202.512 mo
510.421 196.512 li
@
401.384 39.6671 mo
407.384 39.6671 li
404.384 42.6671 mo
404.384 36.6671 li
f
401.384 39.6671 mo
407.384 39.6671 li
404.384 42.6671 mo
404.384 36.6671 li
@
579.614 197.119 mo
585.614 197.119 li
582.614 200.119 mo
582.614 194.119 li
f
579.614 197.119 mo
585.614 197.119 li
582.614 200.119 mo
582.614 194.119 li
@
630.45 170.757 mo
636.45 170.757 li
633.45 173.757 mo
633.45 167.757 li
f
630.45 170.757 mo
636.45 170.757 li
633.45 173.757 mo
633.45 167.757 li
@
666.866 177.474 mo
672.866 177.474 li
669.866 180.474 mo
669.866 174.474 li
f
666.866 177.474 mo
672.866 177.474 li
669.866 180.474 mo
669.866 174.474 li
@
517.474 220.724 mo
523.474 220.724 li
520.474 223.724 mo
520.474 217.724 li
f
517.474 220.724 mo
523.474 220.724 li
520.474 223.724 mo
520.474 217.724 li
@
266.554 80.2771 mo
272.554 80.2771 li
269.554 83.2771 mo
269.554 77.2771 li
f
266.554 80.2771 mo
272.554 80.2771 li
269.554 83.2771 mo
269.554 77.2771 li
@
282.959 67.9241 mo
288.959 67.9241 li
285.959 70.9241 mo
285.959 64.9241 li
f
282.959 67.9241 mo
288.959 67.9241 li
285.959 70.9241 mo
285.959 64.9241 li
@
381.079 152.926 mo
387.079 152.926 li
384.079 155.926 mo
384.079 149.926 li
f
381.079 152.926 mo
387.079 152.926 li
384.079 155.926 mo
384.079 149.926 li
@
451.809 150.539 mo
457.809 150.539 li
454.809 153.539 mo
454.809 147.539 li
f
451.809 150.539 mo
457.809 150.539 li
454.809 153.539 mo
454.809 147.539 li
@
456.387 160.049 mo
462.387 160.049 li
459.387 163.049 mo
459.387 157.049 li
f
456.387 160.049 mo
462.387 160.049 li
459.387 163.049 mo
459.387 157.049 li
@
378.379 167.667 mo
384.379 167.667 li
381.379 170.667 mo
381.379 164.667 li
f
378.379 167.667 mo
384.379 167.667 li
381.379 170.667 mo
381.379 164.667 li
@
455.257 175.297 mo
461.257 175.297 li
458.257 178.297 mo
458.257 172.297 li
f
455.257 175.297 mo
461.257 175.297 li
458.257 178.297 mo
458.257 172.297 li
@
243.898 88.1031 mo
249.898 88.1031 li
246.898 91.1031 mo
246.898 85.1031 li
f
243.898 88.1031 mo
249.898 88.1031 li
246.898 91.1031 mo
246.898 85.1031 li
@
287.679 98.8231 mo
293.679 98.8231 li
290.679 101.823 mo
290.679 95.8231 li
f
287.679 98.8231 mo
293.679 98.8231 li
290.679 101.823 mo
290.679 95.8231 li
@
365.632 195.755 mo
371.632 195.755 li
368.632 198.755 mo
368.632 192.755 li
f
365.632 195.755 mo
371.632 195.755 li
368.632 198.755 mo
368.632 192.755 li
@
430.425 200.261 mo
436.425 200.261 li
433.425 203.261 mo
433.425 197.261 li
f
430.425 200.261 mo
436.425 200.261 li
433.425 203.261 mo
433.425 197.261 li
@
432.729 199.513 mo
438.729 199.513 li
435.729 202.513 mo
435.729 196.513 li
f
432.729 199.513 mo
438.729 199.513 li
435.729 202.513 mo
435.729 196.513 li
@
399.646 205.699 mo
405.646 205.699 li
402.646 208.699 mo
402.646 202.699 li
f
399.646 205.699 mo
405.646 205.699 li
402.646 208.699 mo
402.646 202.699 li
@
221.552 77.5751 mo
227.552 77.5751 li
224.552 80.5751 mo
224.552 74.5751 li
f
221.552 77.5751 mo
227.552 77.5751 li
224.552 80.5751 mo
224.552 74.5751 li
@
260.425 74.9501 mo
266.425 74.9501 li
263.425 77.9501 mo
263.425 71.9501 li
f
260.425 74.9501 mo
266.425 74.9501 li
263.425 77.9501 mo
263.425 71.9501 li
@
341.565 164.764 mo
347.565 164.764 li
344.565 167.764 mo
344.565 161.764 li
f
341.565 164.764 mo
347.565 164.764 li
344.565 167.764 mo
344.565 161.764 li
@
412.272 163.285 mo
418.272 163.285 li
415.272 166.285 mo
415.272 160.285 li
f
412.272 163.285 mo
418.272 163.285 li
415.272 166.285 mo
415.272 160.285 li
@
396.918 170.902 mo
402.918 170.902 li
399.918 173.902 mo
399.918 167.902 li
f
396.918 170.902 mo
402.918 170.902 li
399.918 173.902 mo
399.918 167.902 li
@
453.412 181.836 mo
459.412 181.836 li
456.412 184.836 mo
456.412 178.836 li
f
453.412 181.836 mo
459.412 181.836 li
456.412 184.836 mo
456.412 178.836 li
@
446.987 172.933 mo
452.987 172.933 li
449.987 175.933 mo
449.987 169.933 li
f
446.987 172.933 mo
452.987 172.933 li
449.987 175.933 mo
449.987 169.933 li
@
293.91 67.7521 mo
299.91 67.7521 li
296.91 70.7521 mo
296.91 64.7521 li
f
293.91 67.7521 mo
299.91 67.7521 li
296.91 70.7521 mo
296.91 64.7521 li
@
411.83 144.002 mo
417.83 144.002 li
414.83 147.002 mo
414.83 141.002 li
f
411.83 144.002 mo
417.83 144.002 li
414.83 147.002 mo
414.83 141.002 li
@
475.913 157.945 mo
481.913 157.945 li
478.913 160.945 mo
478.913 154.945 li
f
475.913 157.945 mo
481.913 157.945 li
478.913 160.945 mo
478.913 154.945 li
@
487.004 150.333 mo
493.004 150.333 li
490.004 153.333 mo
490.004 147.333 li
f
487.004 150.333 mo
493.004 150.333 li
490.004 153.333 mo
490.004 147.333 li
@
445.923 170.382 mo
451.923 170.382 li
448.923 173.382 mo
448.923 167.382 li
f
445.923 170.382 mo
451.923 170.382 li
448.923 173.382 mo
448.923 167.382 li
@
500.585 170.696 mo
506.585 170.696 li
503.585 173.696 mo
503.585 167.696 li
f
500.585 170.696 mo
506.585 170.696 li
503.585 173.696 mo
503.585 167.696 li
@
259.446 120.716 mo
265.446 120.716 li
262.446 123.716 mo
262.446 117.716 li
f
259.446 120.716 mo
265.446 120.716 li
262.446 123.716 mo
262.446 117.716 li
@
306.727 210.497 mo
312.727 210.497 li
309.727 213.497 mo
309.727 207.497 li
f
306.727 210.497 mo
312.727 210.497 li
309.727 213.497 mo
309.727 207.497 li
@
342.268 216.837 mo
348.268 216.837 li
345.268 219.837 mo
345.268 213.837 li
f
342.268 216.837 mo
348.268 216.837 li
345.268 219.837 mo
345.268 213.837 li
@
340.223 210.729 mo
346.223 210.729 li
343.223 213.729 mo
343.223 207.729 li
f
340.223 210.729 mo
346.223 210.729 li
343.223 213.729 mo
343.223 207.729 li
@
361.313 26.8801 mo
367.313 26.8801 li
364.313 29.8801 mo
364.313 23.8801 li
f
361.313 26.8801 mo
367.313 26.8801 li
364.313 29.8801 mo
364.313 23.8801 li
@
423.462 23.6461 mo
429.462 23.6461 li
426.462 26.6461 mo
426.462 20.6461 li
f
423.462 23.6461 mo
429.462 23.6461 li
426.462 26.6461 mo
426.462 20.6461 li
@
544.2 143.48 mo
550.2 143.48 li
547.2 146.48 mo
547.2 140.48 li
f
544.2 143.48 mo
550.2 143.48 li
547.2 146.48 mo
547.2 140.48 li
@
635.076 125.245 mo
641.076 125.245 li
638.076 128.245 mo
638.076 122.245 li
f
635.076 125.245 mo
641.076 125.245 li
638.076 128.245 mo
638.076 122.245 li
@
648.108 107.777 mo
654.108 107.777 li
651.108 110.777 mo
651.108 104.777 li
f
648.108 107.777 mo
654.108 107.777 li
651.108 110.777 mo
651.108 104.777 li
@
492.598 205.584 mo
498.598 205.584 li
495.598 208.584 mo
495.598 202.584 li
f
492.598 205.584 mo
498.598 205.584 li
495.598 208.584 mo
495.598 202.584 li
@
154.476 55.8011 mo
160.476 55.8011 li
157.476 58.8011 mo
157.476 52.8011 li
f
154.476 55.8011 mo
160.476 55.8011 li
157.476 58.8011 mo
157.476 52.8011 li
@
329.38 108.606 mo
335.38 108.606 li
332.38 111.606 mo
332.38 105.606 li
f
329.38 108.606 mo
335.38 108.606 li
332.38 111.606 mo
332.38 105.606 li
@
374.06 112.225 mo
380.06 112.225 li
377.06 115.225 mo
377.06 109.225 li
f
374.06 112.225 mo
380.06 112.225 li
377.06 115.225 mo
377.06 109.225 li
@
392.83 122.298 mo
398.83 122.298 li
395.83 125.298 mo
395.83 119.298 li
f
392.83 122.298 mo
398.83 122.298 li
395.83 125.298 mo
395.83 119.298 li
@
386.769 142.066 mo
392.769 142.066 li
389.769 145.066 mo
389.769 139.066 li
f
386.769 142.066 mo
392.769 142.066 li
389.769 145.066 mo
389.769 139.066 li
@
420.77 134.881 mo
426.77 134.881 li
423.77 137.881 mo
423.77 131.881 li
f
420.77 134.881 mo
426.77 134.881 li
423.77 137.881 mo
423.77 131.881 li
@
346.377 80.3271 mo
352.377 80.3271 li
349.377 83.3271 mo
349.377 77.3271 li
f
346.377 80.3271 mo
352.377 80.3271 li
349.377 83.3271 mo
349.377 77.3271 li
@
540.333 207.627 mo
546.333 207.627 li
543.333 210.627 mo
543.333 204.627 li
f
540.333 207.627 mo
546.333 207.627 li
543.333 210.627 mo
543.333 204.627 li
@
619.214 220.69 mo
625.214 220.69 li
622.214 223.69 mo
622.214 217.69 li
f
619.214 220.69 mo
625.214 220.69 li
622.214 223.69 mo
622.214 217.69 li
@
655.224 207.737 mo
661.224 207.737 li
658.224 210.737 mo
658.224 204.737 li
f
655.224 207.737 mo
661.224 207.737 li
658.224 210.737 mo
658.224 204.737 li
@
539.924 236.101 mo
545.924 236.101 li
542.924 239.101 mo
542.924 233.101 li
f
539.924 236.101 mo
545.924 236.101 li
542.924 239.101 mo
542.924 233.101 li
@
349.063 112.1 mo
355.063 112.1 li
352.063 115.1 mo
352.063 109.1 li
f
349.063 112.1 mo
355.063 112.1 li
352.063 115.1 mo
352.063 109.1 li
@
440.489 209.129 mo
446.489 209.129 li
443.489 212.129 mo
443.489 206.129 li
f
440.489 209.129 mo
446.489 209.129 li
443.489 212.129 mo
443.489 206.129 li
@
518.05 210.795 mo
524.05 210.795 li
521.05 213.795 mo
521.05 207.795 li
f
518.05 210.795 mo
524.05 210.795 li
521.05 213.795 mo
521.05 207.795 li
@
479.195 207.399 mo
485.195 207.399 li
482.195 210.399 mo
482.195 204.399 li
f
479.195 207.399 mo
485.195 207.399 li
482.195 210.399 mo
482.195 204.399 li
@
445.826 202.627 mo
451.826 202.627 li
448.826 205.627 mo
448.826 199.627 li
f
445.826 202.627 mo
451.826 202.627 li
448.826 205.627 mo
448.826 199.627 li
@
288.132 70.2621 mo
294.132 70.2621 li
291.132 73.2621 mo
291.132 67.2621 li
f
288.132 70.2621 mo
294.132 70.2621 li
291.132 73.2621 mo
291.132 67.2621 li
@
357.327 64.2801 mo
363.327 64.2801 li
360.327 67.2801 mo
360.327 61.2801 li
f
357.327 64.2801 mo
363.327 64.2801 li
360.327 67.2801 mo
360.327 61.2801 li
@
458.763 204.231 mo
464.763 204.231 li
461.763 207.231 mo
461.763 201.231 li
f
458.763 204.231 mo
464.763 204.231 li
461.763 207.231 mo
461.763 201.231 li
@
553.272 211.905 mo
559.272 211.905 li
556.272 214.905 mo
556.272 208.905 li
f
553.272 211.905 mo
559.272 211.905 li
556.272 214.905 mo
556.272 208.905 li
@
462.098 231.223 mo
468.098 231.223 li
465.098 234.223 mo
465.098 228.223 li
f
462.098 231.223 mo
468.098 231.223 li
465.098 234.223 mo
465.098 228.223 li
@
279.122 128.372 mo
285.122 128.372 li
282.122 131.372 mo
282.122 125.372 li
f
279.122 128.372 mo
285.122 128.372 li
282.122 131.372 mo
282.122 125.372 li
@
369.522 123.655 mo
375.522 123.655 li
372.522 126.655 mo
372.522 120.655 li
f
369.522 123.655 mo
375.522 123.655 li
372.522 126.655 mo
372.522 120.655 li
@
491.886 214.071 mo
497.886 214.071 li
494.886 217.071 mo
494.886 211.071 li
f
491.886 214.071 mo
497.886 214.071 li
494.886 217.071 mo
494.886 211.071 li
@
517.172 198.331 mo
523.172 198.331 li
520.172 201.331 mo
520.172 195.331 li
f
517.172 198.331 mo
523.172 198.331 li
520.172 201.331 mo
520.172 195.331 li
@
503.514 213.766 mo
509.514 213.766 li
506.514 216.766 mo
506.514 210.766 li
f
503.514 213.766 mo
509.514 213.766 li
506.514 216.766 mo
506.514 210.766 li
@
441.081 234.12 mo
447.081 234.12 li
444.081 237.12 mo
444.081 231.12 li
f
441.081 234.12 mo
447.081 234.12 li
444.081 237.12 mo
444.081 231.12 li
@
142.584 164.033 mo
139.584 170.033 li
145.584 170.033 li
cp
.878538 .2439 1 .131716 cmyk
f
1 lw
142.584 164.033 mo
139.584 170.033 li
145.584 170.033 li
cp
@
181.622 174.38 mo
178.622 180.38 li
184.622 180.38 li
cp
f
181.622 174.38 mo
178.622 180.38 li
184.622 180.38 li
cp
@
226.674 232.676 mo
223.674 238.676 li
229.674 238.676 li
cp
f
226.674 232.676 mo
223.674 238.676 li
229.674 238.676 li
cp
@
248.666 223.561 mo
245.666 229.561 li
251.666 229.561 li
cp
f
248.666 223.561 mo
245.666 229.561 li
251.666 229.561 li
cp
@
264.745 227.439 mo
261.745 233.439 li
267.745 233.439 li
cp
f
264.745 227.439 mo
261.745 233.439 li
267.745 233.439 li
cp
@
254.028 234.846 mo
251.028 240.846 li
257.028 240.846 li
cp
f
254.028 234.846 mo
251.028 240.846 li
257.028 240.846 li
cp
@
141.45 178.146 mo
138.45 184.146 li
144.45 184.146 li
cp
f
141.45 178.146 mo
138.45 184.146 li
144.45 184.146 li
cp
@
180.801 189.24 mo
177.801 195.24 li
183.801 195.24 li
cp
f
180.801 189.24 mo
177.801 195.24 li
183.801 195.24 li
cp
@
247.004 242.533 mo
244.004 248.533 li
250.004 248.533 li
cp
f
247.004 242.533 mo
244.004 248.533 li
250.004 248.533 li
cp
@
245.283 243.277 mo
242.283 249.277 li
248.283 249.277 li
cp
f
245.283 243.277 mo
242.283 249.277 li
248.283 249.277 li
cp
@
151.262 172.452 mo
148.262 178.452 li
154.262 178.452 li
cp
f
151.262 172.452 mo
148.262 178.452 li
154.262 178.452 li
cp
@
174.99 179.831 mo
171.99 185.831 li
177.99 185.831 li
cp
f
174.99 179.831 mo
171.99 185.831 li
177.99 185.831 li
cp
@
223.372 240.853 mo
220.372 246.853 li
226.372 246.853 li
cp
f
223.372 240.853 mo
220.372 246.853 li
226.372 246.853 li
cp
@
236.721 239.574 mo
233.721 245.574 li
239.721 245.574 li
cp
f
236.721 239.574 mo
233.721 245.574 li
239.721 245.574 li
cp
@
256.277 230.97 mo
253.277 236.97 li
259.277 236.97 li
cp
f
256.277 230.97 mo
253.277 236.97 li
259.277 236.97 li
cp
@
256.946 241.419 mo
253.946 247.419 li
259.946 247.419 li
cp
f
256.946 241.419 mo
253.946 247.419 li
259.946 247.419 li
cp
@
256.116 237.111 mo
253.116 243.111 li
259.116 243.111 li
cp
f
256.116 237.111 mo
253.116 243.111 li
259.116 243.111 li
cp
@
179.882 178.23 mo
176.882 184.23 li
182.882 184.23 li
cp
f
179.882 178.23 mo
176.882 184.23 li
182.882 184.23 li
cp
@
211.139 189.867 mo
208.139 195.867 li
214.139 195.867 li
cp
f
211.139 189.867 mo
208.139 195.867 li
214.139 195.867 li
cp
@
254.39 234.584 mo
251.39 240.584 li
257.39 240.584 li
cp
f
254.39 234.584 mo
251.39 240.584 li
257.39 240.584 li
cp
@
278.437 238.223 mo
275.437 244.223 li
281.437 244.223 li
cp
f
278.437 238.223 mo
275.437 244.223 li
281.437 244.223 li
cp
@
283.324 243.53 mo
280.324 249.53 li
286.324 249.53 li
cp
f
283.324 243.53 mo
280.324 249.53 li
286.324 249.53 li
cp
@
278.333 240.156 mo
275.333 246.156 li
281.333 246.156 li
cp
f
278.333 240.156 mo
275.333 246.156 li
281.333 246.156 li
cp
@
157.248 181.264 mo
154.248 187.264 li
160.248 187.264 li
cp
f
157.248 181.264 mo
154.248 187.264 li
160.248 187.264 li
cp
@
225.619 238.468 mo
222.619 244.468 li
228.619 244.468 li
cp
f
225.619 238.468 mo
222.619 244.468 li
228.619 244.468 li
cp
@
249.709 219.575 mo
246.709 225.575 li
252.709 225.575 li
cp
f
249.709 219.575 mo
246.709 225.575 li
252.709 225.575 li
cp
@
263.32 216.492 mo
260.32 222.492 li
266.32 222.492 li
cp
f
263.32 216.492 mo
260.32 222.492 li
266.32 222.492 li
cp
@
262.071 227.329 mo
259.071 233.329 li
265.071 233.329 li
cp
f
262.071 227.329 mo
259.071 233.329 li
265.071 233.329 li
cp
@
248.513 224.87 mo
245.513 230.87 li
251.513 230.87 li
cp
f
248.513 224.87 mo
245.513 230.87 li
251.513 230.87 li
cp
@
167.865 168.292 mo
164.865 174.292 li
170.865 174.292 li
cp
f
167.865 168.292 mo
164.865 174.292 li
170.865 174.292 li
cp
@
243.881 237.796 mo
240.881 243.796 li
246.881 243.796 li
cp
f
243.881 237.796 mo
240.881 243.796 li
246.881 243.796 li
cp
@
275.265 229.311 mo
272.265 235.311 li
278.265 235.311 li
cp
f
275.265 229.311 mo
272.265 235.311 li
278.265 235.311 li
cp
@
275.958 216.975 mo
272.958 222.975 li
278.958 222.975 li
cp
f
275.958 216.975 mo
272.958 222.975 li
278.958 222.975 li
cp
@
297.719 222.223 mo
294.719 228.223 li
300.719 228.223 li
cp
f
297.719 222.223 mo
294.719 228.223 li
300.719 228.223 li
cp
@
202.655 186.159 mo
199.655 192.159 li
205.655 192.159 li
cp
f
202.655 186.159 mo
199.655 192.159 li
205.655 192.159 li
cp
@
236.335 249.663 mo
233.335 255.663 li
239.335 255.663 li
cp
f
236.335 249.663 mo
233.335 255.663 li
239.335 255.663 li
cp
@
269.149 232.316 mo
266.149 238.316 li
272.149 238.316 li
cp
f
269.149 232.316 mo
266.149 238.316 li
272.149 238.316 li
cp
@
278.061 232.021 mo
275.061 238.021 li
281.061 238.021 li
cp
f
278.061 232.021 mo
275.061 238.021 li
281.061 238.021 li
cp
@
237.044 246.402 mo
234.044 252.402 li
240.044 252.402 li
cp
f
237.044 246.402 mo
234.044 252.402 li
240.044 252.402 li
cp
@
175.367 170.081 mo
172.367 176.081 li
178.367 176.081 li
cp
f
175.367 170.081 mo
172.367 176.081 li
178.367 176.081 li
cp
@
192.292 167.973 mo
189.292 173.973 li
195.292 173.973 li
cp
f
192.292 167.973 mo
189.292 173.973 li
195.292 173.973 li
cp
@
234.239 223.74 mo
231.239 229.74 li
237.239 229.74 li
cp
f
234.239 223.74 mo
231.239 229.74 li
237.239 229.74 li
cp
@
258.386 204.321 mo
255.386 210.321 li
261.386 210.321 li
cp
f
258.386 204.321 mo
255.386 210.321 li
261.386 210.321 li
cp
@
263.241 221.625 mo
260.241 227.625 li
266.241 227.625 li
cp
f
263.241 221.625 mo
260.241 227.625 li
266.241 227.625 li
cp
@
163.882 157.077 mo
160.882 163.077 li
166.882 163.077 li
cp
f
163.882 157.077 mo
160.882 163.077 li
166.882 163.077 li
cp
@
208.565 163.964 mo
205.565 169.964 li
211.565 169.964 li
cp
f
208.565 163.964 mo
205.565 169.964 li
211.565 169.964 li
cp
@
246.284 223.16 mo
243.284 229.16 li
249.284 229.16 li
cp
f
246.284 223.16 mo
243.284 229.16 li
249.284 229.16 li
cp
@
268.565 226.257 mo
265.565 232.257 li
271.565 232.257 li
cp
f
268.565 226.257 mo
265.565 232.257 li
271.565 232.257 li
cp
@
270.867 227.286 mo
267.867 233.286 li
273.867 233.286 li
cp
f
270.867 227.286 mo
267.867 233.286 li
273.867 233.286 li
cp
@
262.172 232.643 mo
259.172 238.643 li
265.172 238.643 li
cp
f
262.172 232.643 mo
259.172 238.643 li
265.172 238.643 li
cp
@
267.218 235.281 mo
264.218 241.281 li
270.218 241.281 li
cp
f
267.218 235.281 mo
264.218 241.281 li
270.218 241.281 li
cp
@
153.076 148.659 mo
150.076 154.659 li
156.076 154.659 li
cp
f
153.076 148.659 mo
150.076 154.659 li
156.076 154.659 li
cp
@
180.647 154.745 mo
177.647 160.745 li
183.647 160.745 li
cp
f
180.647 154.745 mo
177.647 160.745 li
183.647 160.745 li
cp
@
230.517 204.203 mo
227.517 210.203 li
233.517 210.203 li
cp
f
230.517 204.203 mo
227.517 210.203 li
233.517 210.203 li
cp
@
248.382 220.355 mo
245.382 226.355 li
251.382 226.355 li
cp
f
248.382 220.355 mo
245.382 226.355 li
251.382 226.355 li
cp
@
252.293 214.296 mo
249.293 220.296 li
255.293 220.296 li
cp
f
252.293 214.296 mo
249.293 220.296 li
255.293 220.296 li
cp
@
274.806 217.955 mo
271.806 223.955 li
277.806 223.955 li
cp
f
274.806 217.955 mo
271.806 223.955 li
277.806 223.955 li
cp
@
171.651 146.996 mo
168.651 152.996 li
174.651 152.996 li
cp
f
171.651 146.996 mo
168.651 152.996 li
174.651 152.996 li
cp
@
210.383 206.024 mo
207.383 212.024 li
213.383 212.024 li
cp
f
210.383 206.024 mo
207.383 212.024 li
213.383 212.024 li
cp
@
240.514 204.086 mo
237.514 210.086 li
243.514 210.086 li
cp
f
240.514 204.086 mo
237.514 210.086 li
243.514 210.086 li
cp
@
274.612 203.566 mo
271.612 209.566 li
277.612 209.566 li
cp
f
274.612 203.566 mo
271.612 209.566 li
277.612 209.566 li
cp
@
265.429 211.414 mo
262.429 217.414 li
268.429 217.414 li
cp
f
265.429 211.414 mo
262.429 217.414 li
268.429 217.414 li
cp
@
268.605 217.3 mo
265.605 223.3 li
271.605 223.3 li
cp
f
268.605 217.3 mo
265.605 223.3 li
271.605 223.3 li
cp
@
225.546 158.661 mo
222.546 164.661 li
228.546 164.661 li
cp
f
225.546 158.661 mo
222.546 164.661 li
228.546 164.661 li
cp
@
244.786 168.685 mo
241.786 174.685 li
247.786 174.685 li
cp
f
244.786 168.685 mo
241.786 174.685 li
247.786 174.685 li
cp
@
302.769 217.17 mo
299.769 223.17 li
305.769 223.17 li
cp
f
302.769 217.17 mo
299.769 223.17 li
305.769 223.17 li
cp
@
311.61 206.146 mo
308.61 212.146 li
314.61 212.146 li
cp
f
311.61 206.146 mo
308.61 212.146 li
314.61 212.146 li
cp
@
326.041 200.687 mo
323.041 206.687 li
329.041 206.687 li
cp
f
326.041 200.687 mo
323.041 206.687 li
329.041 206.687 li
cp
@
271.489 241.82 mo
268.489 247.82 li
274.489 247.82 li
cp
f
271.489 241.82 mo
268.489 247.82 li
274.489 247.82 li
cp
@
190.28 179.137 mo
187.28 185.137 li
193.28 185.137 li
cp
f
190.28 179.137 mo
187.28 185.137 li
193.28 185.137 li
cp
@
223.321 181.951 mo
220.321 187.951 li
226.321 187.951 li
cp
f
223.321 181.951 mo
220.321 187.951 li
226.321 187.951 li
cp
@
247.694 244.64 mo
244.694 250.64 li
250.694 250.64 li
cp
f
247.694 244.64 mo
244.694 250.64 li
250.694 250.64 li
cp
@
260.139 231.952 mo
257.139 237.952 li
263.139 237.952 li
cp
f
260.139 231.952 mo
257.139 237.952 li
263.139 237.952 li
cp
@
290.823 239.15 mo
287.823 245.15 li
293.823 245.15 li
cp
f
290.823 239.15 mo
287.823 245.15 li
293.823 245.15 li
cp
@
262.05 248.204 mo
259.05 254.204 li
265.05 254.204 li
cp
f
262.05 248.204 mo
259.05 254.204 li
265.05 254.204 li
cp
@
282.083 247.119 mo
279.083 253.119 li
285.083 253.119 li
cp
f
282.083 247.119 mo
279.083 253.119 li
285.083 253.119 li
cp
@
252.425 240.697 mo
249.425 246.697 li
255.425 246.697 li
cp
f
252.425 240.697 mo
249.425 246.697 li
255.425 246.697 li
cp
@
194.909 167.101 mo
191.909 173.101 li
197.909 173.101 li
cp
f
194.909 167.101 mo
191.909 173.101 li
197.909 173.101 li
cp
@
241.132 223.932 mo
238.132 229.932 li
244.132 229.932 li
cp
f
241.132 223.932 mo
238.132 229.932 li
244.132 229.932 li
cp
@
270.117 219.424 mo
267.117 225.424 li
273.117 225.424 li
cp
f
270.117 219.424 mo
267.117 225.424 li
273.117 225.424 li
cp
@
266.8 221.412 mo
263.8 227.412 li
269.8 227.412 li
cp
f
266.8 221.412 mo
263.8 227.412 li
269.8 227.412 li
cp
@
154.814 184.415 mo
151.814 190.415 li
157.814 190.415 li
cp
f
154.814 184.415 mo
151.814 190.415 li
157.814 190.415 li
cp
@
189.798 174.891 mo
186.798 180.891 li
192.798 180.891 li
cp
f
189.798 174.891 mo
186.798 180.891 li
192.798 180.891 li
cp
@
269.917 226.288 mo
266.917 232.288 li
272.917 232.288 li
cp
f
269.917 226.288 mo
266.917 232.288 li
272.917 232.288 li
cp
@
275.99 214.812 mo
272.99 220.812 li
278.99 220.812 li
cp
f
275.99 214.812 mo
272.99 220.812 li
278.99 220.812 li
cp
@
187.612 162.457 mo
184.612 168.457 li
190.612 168.457 li
cp
f
187.612 162.457 mo
184.612 168.457 li
190.612 168.457 li
cp
@
267.743 232.232 mo
264.743 238.232 li
270.743 238.232 li
cp
f
267.743 232.232 mo
264.743 238.232 li
270.743 238.232 li
cp
@
292.918 219.255 mo
289.918 225.255 li
295.918 225.255 li
cp
f
292.918 219.255 mo
289.918 225.255 li
295.918 225.255 li
cp
@
304.723 200.818 mo
301.723 206.818 li
307.723 206.818 li
cp
f
304.723 200.818 mo
301.723 206.818 li
307.723 206.818 li
cp
@
277.751 213.259 mo
274.751 219.259 li
280.751 219.259 li
cp
f
277.751 213.259 mo
274.751 219.259 li
280.751 219.259 li
cp
@
144.128 165.19 mo
141.128 171.19 li
147.128 171.19 li
cp
f
144.128 165.19 mo
141.128 171.19 li
147.128 171.19 li
cp
@
176.774 162.358 mo
173.774 168.358 li
179.774 168.358 li
cp
f
176.774 162.358 mo
173.774 168.358 li
179.774 168.358 li
cp
@
222.394 230.57 mo
219.394 236.57 li
225.394 236.57 li
cp
f
222.394 230.57 mo
219.394 236.57 li
225.394 236.57 li
cp
@
257.82 228.416 mo
254.82 234.416 li
260.82 234.416 li
cp
f
257.82 228.416 mo
254.82 234.416 li
260.82 234.416 li
cp
@
261.458 224.459 mo
258.458 230.459 li
264.458 230.459 li
cp
f
261.458 224.459 mo
258.458 230.459 li
264.458 230.459 li
cp
@
268.892 226.775 mo
265.892 232.775 li
271.892 232.775 li
cp
f
268.892 226.775 mo
265.892 232.775 li
271.892 232.775 li
cp
@
174.501 177.412 mo
171.501 183.412 li
177.501 183.412 li
cp
f
174.501 177.412 mo
171.501 183.412 li
177.501 183.412 li
cp
@
196.276 160.36 mo
193.276 166.36 li
199.276 166.36 li
cp
f
196.276 160.36 mo
193.276 166.36 li
199.276 166.36 li
cp
@
242.414 251.076 mo
239.414 257.076 li
245.414 257.076 li
cp
f
242.414 251.076 mo
239.414 257.076 li
245.414 257.076 li
cp
@
275.178 224.605 mo
272.178 230.605 li
278.178 230.605 li
cp
f
275.178 224.605 mo
272.178 230.605 li
278.178 230.605 li
cp
@
258.844 238.321 mo
255.844 244.321 li
261.844 244.321 li
cp
f
258.844 238.321 mo
255.844 244.321 li
261.844 244.321 li
cp
@
271.34 236.174 mo
268.34 242.174 li
274.34 242.174 li
cp
f
271.34 236.174 mo
268.34 242.174 li
274.34 242.174 li
cp
@
169.914 204.941 mo
166.914 210.941 li
172.914 210.941 li
cp
f
169.914 204.941 mo
166.914 210.941 li
172.914 210.941 li
cp
@
192.958 193.044 mo
189.958 199.044 li
195.958 199.044 li
cp
f
192.958 193.044 mo
189.958 199.044 li
195.958 199.044 li
cp
@
231.818 241.558 mo
228.818 247.558 li
234.818 247.558 li
cp
f
231.818 241.558 mo
228.818 247.558 li
234.818 247.558 li
cp
@
248.317 239.336 mo
245.317 245.336 li
251.317 245.336 li
cp
f
248.317 239.336 mo
245.317 245.336 li
251.317 245.336 li
cp
@
250.51 239.672 mo
247.51 245.672 li
253.51 245.672 li
cp
f
250.51 239.672 mo
247.51 245.672 li
253.51 245.672 li
cp
@
202.423 175.738 mo
199.423 181.738 li
205.423 181.738 li
cp
f
202.423 175.738 mo
199.423 181.738 li
205.423 181.738 li
cp
@
208.822 186.082 mo
205.822 192.082 li
211.822 192.082 li
cp
f
208.822 186.082 mo
205.822 192.082 li
211.822 192.082 li
cp
@
269.244 236.522 mo
266.244 242.522 li
272.244 242.522 li
cp
f
269.244 236.522 mo
266.244 242.522 li
272.244 242.522 li
cp
@
273.9 262.843 mo
270.9 268.843 li
276.9 268.843 li
cp
f
273.9 262.843 mo
270.9 268.843 li
276.9 268.843 li
cp
@
293.17 239.669 mo
290.17 245.669 li
296.17 245.669 li
cp
f
293.17 239.669 mo
290.17 245.669 li
296.17 245.669 li
cp
@
303.948 240.847 mo
300.948 246.847 li
306.948 246.847 li
cp
f
303.948 240.847 mo
300.948 246.847 li
306.948 246.847 li
cp
@
286.508 246.127 mo
283.508 252.127 li
289.508 252.127 li
cp
f
286.508 246.127 mo
283.508 252.127 li
289.508 252.127 li
cp
@
237.588 238.315 mo
234.588 244.315 li
240.588 244.315 li
cp
f
237.588 238.315 mo
234.588 244.315 li
240.588 244.315 li
cp
@
259.832 225.707 mo
256.832 231.707 li
262.832 231.707 li
cp
f
259.832 225.707 mo
256.832 231.707 li
262.832 231.707 li
cp
@
201.377 184.542 mo
198.377 190.542 li
204.377 190.542 li
cp
f
201.377 184.542 mo
198.377 190.542 li
204.377 190.542 li
cp
@
258.832 246.863 mo
255.832 252.863 li
261.832 252.863 li
cp
f
258.832 246.863 mo
255.832 252.863 li
261.832 252.863 li
cp
@
277.857 244.113 mo
274.857 250.113 li
280.857 250.113 li
cp
f
277.857 244.113 mo
274.857 250.113 li
280.857 250.113 li
cp
@
160.915 163.492 mo
157.915 169.492 li
163.915 169.492 li
cp
f
160.915 163.492 mo
157.915 169.492 li
163.915 169.492 li
cp
@
191.63 168.91 mo
188.63 174.91 li
194.63 174.91 li
cp
f
191.63 168.91 mo
188.63 174.91 li
194.63 174.91 li
cp
@
174.975 172.946 mo
171.975 178.946 li
177.975 178.946 li
cp
f
174.975 172.946 mo
171.975 178.946 li
177.975 178.946 li
cp
@
194.102 181.624 mo
191.102 187.624 li
197.102 187.624 li
cp
f
194.102 181.624 mo
191.102 187.624 li
197.102 187.624 li
cp
@
232.014 228.732 mo
229.014 234.732 li
235.014 234.732 li
cp
f
232.014 228.732 mo
229.014 234.732 li
235.014 234.732 li
cp
@
268.201 234.021 mo
265.201 240.021 li
271.201 240.021 li
cp
f
268.201 234.021 mo
265.201 240.021 li
271.201 240.021 li
cp
@
263.521 229.925 mo
260.521 235.925 li
266.521 235.925 li
cp
f
263.521 229.925 mo
260.521 235.925 li
266.521 235.925 li
cp
@
292.658 238.31 mo
289.658 244.31 li
295.658 244.31 li
cp
f
292.658 238.31 mo
289.658 244.31 li
295.658 244.31 li
cp
@
178.27 140.737 mo
175.27 146.737 li
181.27 146.737 li
cp
f
178.27 140.737 mo
175.27 146.737 li
181.27 146.737 li
cp
@
226.351 219.086 mo
223.351 225.086 li
229.351 225.086 li
cp
f
226.351 219.086 mo
223.351 225.086 li
229.351 225.086 li
cp
@
244.729 239.107 mo
241.729 245.107 li
247.729 245.107 li
cp
f
244.729 239.107 mo
241.729 245.107 li
247.729 245.107 li
cp
@
249.267 233.692 mo
246.267 239.692 li
252.267 239.692 li
cp
f
249.267 233.692 mo
246.267 239.692 li
252.267 239.692 li
cp
@
271.333 227.542 mo
268.333 233.542 li
274.333 233.542 li
cp
f
271.333 227.542 mo
268.333 233.542 li
274.333 233.542 li
cp
@
139.369 175.134 mo
136.369 181.134 li
142.369 181.134 li
cp
f
139.369 175.134 mo
136.369 181.134 li
142.369 181.134 li
cp
@
170.465 185.166 mo
167.465 191.166 li
173.465 191.166 li
cp
f
170.465 185.166 mo
167.465 191.166 li
173.465 191.166 li
cp
@
211.854 263.919 mo
208.854 269.919 li
214.854 269.919 li
cp
f
211.854 263.919 mo
208.854 269.919 li
214.854 269.919 li
cp
@
235.379 261.416 mo
232.379 267.416 li
238.379 267.416 li
cp
f
235.379 261.416 mo
232.379 267.416 li
238.379 267.416 li
cp
@
243.61 243.122 mo
240.61 249.122 li
246.61 249.122 li
cp
f
243.61 243.122 mo
240.61 249.122 li
246.61 249.122 li
cp
@
258.609 237.85 mo
255.609 243.85 li
261.609 243.85 li
cp
f
258.609 237.85 mo
255.609 243.85 li
261.609 243.85 li
cp
@
175.519 157.218 mo
172.519 163.218 li
178.519 163.218 li
cp
f
175.519 157.218 mo
172.519 163.218 li
178.519 163.218 li
cp
@
197.748 175.059 mo
194.748 181.059 li
200.748 181.059 li
cp
f
197.748 175.059 mo
194.748 181.059 li
200.748 181.059 li
cp
@
272.609 237.225 mo
269.609 243.225 li
275.609 243.225 li
cp
f
272.609 237.225 mo
269.609 243.225 li
275.609 243.225 li
cp
@
287.519 233.108 mo
284.519 239.108 li
290.519 239.108 li
cp
f
287.519 233.108 mo
284.519 239.108 li
290.519 239.108 li
cp
@
168.704 163.813 mo
165.704 169.813 li
171.704 169.813 li
cp
f
168.704 163.813 mo
165.704 169.813 li
171.704 169.813 li
cp
@
199.761 169.12 mo
196.761 175.12 li
202.761 175.12 li
cp
f
199.761 169.12 mo
196.761 175.12 li
202.761 175.12 li
cp
@
232.368 235.089 mo
229.368 241.089 li
235.368 241.089 li
cp
f
232.368 235.089 mo
229.368 241.089 li
235.368 241.089 li
cp
@
261.928 235.562 mo
258.928 241.562 li
264.928 241.562 li
cp
f
261.928 235.562 mo
258.928 241.562 li
264.928 241.562 li
cp
@
274.245 230.05 mo
271.245 236.05 li
277.245 236.05 li
cp
f
274.245 230.05 mo
271.245 236.05 li
277.245 236.05 li
cp
@
272.262 231.689 mo
269.262 237.689 li
275.262 237.689 li
cp
f
272.262 231.689 mo
269.262 237.689 li
275.262 237.689 li
cp
@
199.593 156.808 mo
196.593 162.808 li
202.593 162.808 li
cp
f
199.593 156.808 mo
196.593 162.808 li
202.593 162.808 li
cp
@
288.58 249.815 mo
285.58 255.815 li
291.58 255.815 li
cp
f
288.58 249.815 mo
285.58 255.815 li
291.58 255.815 li
cp
@
312.017 250.084 mo
309.017 256.084 li
315.017 256.084 li
cp
f
312.017 250.084 mo
309.017 256.084 li
315.017 256.084 li
cp
@
321.572 231.275 mo
318.572 237.275 li
324.572 237.275 li
cp
f
321.572 231.275 mo
318.572 237.275 li
324.572 237.275 li
cp
@
159.894 139.131 mo
156.894 145.131 li
162.894 145.131 li
cp
f
159.894 139.131 mo
156.894 145.131 li
162.894 145.131 li
cp
@
189.084 158.961 mo
186.084 164.961 li
192.084 164.961 li
cp
f
189.084 158.961 mo
186.084 164.961 li
192.084 164.961 li
cp
@
262.757 217.737 mo
259.757 223.737 li
265.757 223.737 li
cp
f
262.757 217.737 mo
259.757 223.737 li
265.757 223.737 li
cp
@
269.351 217.629 mo
266.351 223.629 li
272.351 223.629 li
cp
f
269.351 217.629 mo
266.351 223.629 li
272.351 223.629 li
cp
@
183.872 167.334 mo
180.872 173.334 li
186.872 173.334 li
cp
f
183.872 167.334 mo
180.872 173.334 li
186.872 173.334 li
cp
@
259.583 228.609 mo
256.583 234.609 li
262.583 234.609 li
cp
f
259.583 228.609 mo
256.583 234.609 li
262.583 234.609 li
cp
@
266.995 237.101 mo
263.995 243.101 li
269.995 243.101 li
cp
f
266.995 237.101 mo
263.995 243.101 li
269.995 243.101 li
cp
@
188.694 172.241 mo
185.694 178.241 li
191.694 178.241 li
cp
f
188.694 172.241 mo
185.694 178.241 li
191.694 178.241 li
cp
@
222.033 176.989 mo
219.033 182.989 li
225.033 182.989 li
cp
f
222.033 176.989 mo
219.033 182.989 li
225.033 182.989 li
cp
@
259.503 243.452 mo
256.503 249.452 li
262.503 249.452 li
cp
f
259.503 243.452 mo
256.503 249.452 li
262.503 249.452 li
cp
@
286.182 230.695 mo
283.182 236.695 li
289.182 236.695 li
cp
f
286.182 230.695 mo
283.182 236.695 li
289.182 236.695 li
cp
@
277.584 232.945 mo
274.584 238.945 li
280.584 238.945 li
cp
f
277.584 232.945 mo
274.584 238.945 li
280.584 238.945 li
cp
@
228.903 161.195 mo
225.903 167.195 li
231.903 167.195 li
cp
f
228.903 161.195 mo
225.903 167.195 li
231.903 167.195 li
cp
@
264.644 224.25 mo
261.644 230.25 li
267.644 230.25 li
cp
f
264.644 224.25 mo
261.644 230.25 li
267.644 230.25 li
cp
@
282.443 227.75 mo
279.443 233.75 li
285.443 233.75 li
cp
f
282.443 227.75 mo
279.443 233.75 li
285.443 233.75 li
cp
@
286.411 226.411 mo
283.411 232.411 li
289.411 232.411 li
cp
f
286.411 226.411 mo
283.411 232.411 li
289.411 232.411 li
cp
@
276.37 220.161 mo
273.37 226.161 li
279.37 226.161 li
cp
f
276.37 220.161 mo
273.37 226.161 li
279.37 226.161 li
cp
@
302.071 217.777 mo
299.071 223.777 li
305.071 223.777 li
cp
f
302.071 217.777 mo
299.071 223.777 li
305.071 223.777 li
cp
@
222.679 180.945 mo
219.679 186.945 li
225.679 186.945 li
cp
f
222.679 180.945 mo
219.679 186.945 li
225.679 186.945 li
cp
@
326.65 245.356 mo
323.65 251.356 li
329.65 251.356 li
cp
f
326.65 245.356 mo
323.65 251.356 li
329.65 251.356 li
cp
@
279.237 268.511 mo
276.237 274.511 li
282.237 274.511 li
cp
f
279.237 268.511 mo
276.237 274.511 li
282.237 274.511 li
cp
@
213.976 155.264 mo
210.976 161.264 li
216.976 161.264 li
cp
f
213.976 155.264 mo
210.976 161.264 li
216.976 161.264 li
cp
@
282.809 241.518 mo
279.809 247.518 li
285.809 247.518 li
cp
f
282.809 241.518 mo
279.809 247.518 li
285.809 247.518 li
cp
@
278.331 237.09 mo
275.331 243.09 li
281.331 243.09 li
cp
f
278.331 237.09 mo
275.331 243.09 li
281.331 243.09 li
cp
@
208.724 152.93 mo
205.724 158.93 li
211.724 158.93 li
cp
f
208.724 152.93 mo
205.724 158.93 li
211.724 158.93 li
cp
@
244.937 150.997 mo
241.937 156.997 li
247.937 156.997 li
cp
f
244.937 150.997 mo
241.937 156.997 li
247.937 156.997 li
cp
@
296.988 231.999 mo
293.988 237.999 li
299.988 237.999 li
cp
f
296.988 231.999 mo
293.988 237.999 li
299.988 237.999 li
cp
@
287.699 252.574 mo
284.699 258.574 li
290.699 258.574 li
cp
f
287.699 252.574 mo
284.699 258.574 li
290.699 258.574 li
cp
@
298.494 229.076 mo
295.494 235.076 li
301.494 235.076 li
cp
f
298.494 229.076 mo
295.494 235.076 li
301.494 235.076 li
cp
@
331.526 245.793 mo
328.526 251.793 li
334.526 251.793 li
cp
f
331.526 245.793 mo
328.526 251.793 li
334.526 251.793 li
cp
@
294.927 250.516 mo
291.927 256.516 li
297.927 256.516 li
cp
f
294.927 250.516 mo
291.927 256.516 li
297.927 256.516 li
cp
@
249.811 167.065 mo
246.811 173.065 li
252.811 173.065 li
cp
f
249.811 167.065 mo
246.811 173.065 li
252.811 173.065 li
cp
@
319.343 247.219 mo
316.343 253.219 li
322.343 253.219 li
cp
f
319.343 247.219 mo
316.343 253.219 li
322.343 253.219 li
cp
@
333.744 233.055 mo
330.744 239.055 li
336.744 239.055 li
cp
f
333.744 233.055 mo
330.744 239.055 li
336.744 239.055 li
cp
@
345.023 234.813 mo
342.023 240.813 li
348.023 240.813 li
cp
f
345.023 234.813 mo
342.023 240.813 li
348.023 240.813 li
cp
@
301.122 257.081 mo
298.122 263.081 li
304.122 263.081 li
cp
f
301.122 257.081 mo
298.122 263.081 li
304.122 263.081 li
cp
@
187.751 164.369 mo
184.751 170.369 li
190.751 170.369 li
cp
f
187.751 164.369 mo
184.751 170.369 li
190.751 170.369 li
cp
@
197.254 157.964 mo
194.254 163.964 li
200.254 163.964 li
cp
f
197.254 157.964 mo
194.254 163.964 li
200.254 163.964 li
cp
@
242.989 214.975 mo
239.989 220.975 li
245.989 220.975 li
cp
f
242.989 214.975 mo
239.989 220.975 li
245.989 220.975 li
cp
@
274.149 218.592 mo
271.149 224.592 li
277.149 224.592 li
cp
f
274.149 218.592 mo
271.149 224.592 li
277.149 224.592 li
cp
@
274.474 222.123 mo
271.474 228.123 li
277.474 228.123 li
cp
f
274.474 222.123 mo
271.474 228.123 li
277.474 228.123 li
cp
@
240.862 222.721 mo
237.862 228.721 li
243.862 228.721 li
cp
f
240.862 222.721 mo
237.862 228.721 li
243.862 228.721 li
cp
@
273.589 226.493 mo
270.589 232.493 li
276.589 232.493 li
cp
f
273.589 226.493 mo
270.589 232.493 li
276.589 232.493 li
cp
@
175.091 176.208 mo
172.091 182.208 li
178.091 182.208 li
cp
f
175.091 176.208 mo
172.091 182.208 li
178.091 182.208 li
cp
@
200.71 180.128 mo
197.71 186.128 li
203.71 186.128 li
cp
f
200.71 180.128 mo
197.71 186.128 li
203.71 186.128 li
cp
@
237.68 248.898 mo
234.68 254.898 li
240.68 254.898 li
cp
f
237.68 248.898 mo
234.68 254.898 li
240.68 254.898 li
cp
@
266.172 248.845 mo
263.172 254.845 li
269.172 254.845 li
cp
f
266.172 248.845 mo
263.172 254.845 li
269.172 254.845 li
cp
@
267.16 245.883 mo
264.16 251.883 li
270.16 251.883 li
cp
f
267.16 245.883 mo
264.16 251.883 li
270.16 251.883 li
cp
@
251.405 251.375 mo
248.405 257.375 li
254.405 257.375 li
cp
f
251.405 251.375 mo
248.405 257.375 li
254.405 257.375 li
cp
@
164.02 166.391 mo
161.02 172.391 li
167.02 172.391 li
cp
f
164.02 166.391 mo
161.02 172.391 li
167.02 172.391 li
cp
@
183.693 165.753 mo
180.693 171.753 li
186.693 171.753 li
cp
f
183.693 165.753 mo
180.693 171.753 li
186.693 171.753 li
cp
@
225.687 222.589 mo
222.687 228.589 li
228.687 228.589 li
cp
f
225.687 222.589 mo
222.687 228.589 li
228.687 228.589 li
cp
@
256.94 222.346 mo
253.94 228.346 li
259.94 228.346 li
cp
f
256.94 222.346 mo
253.94 228.346 li
259.94 228.346 li
cp
@
249.692 225.582 mo
246.692 231.582 li
252.692 231.582 li
cp
f
249.692 225.582 mo
246.692 231.582 li
252.692 231.582 li
cp
@
273.52 236.119 mo
270.52 242.119 li
276.52 242.119 li
cp
f
273.52 236.119 mo
270.52 242.119 li
276.52 242.119 li
cp
@
268.673 228.25 mo
265.673 234.25 li
271.673 234.25 li
cp
f
268.673 228.25 mo
265.673 234.25 li
271.673 234.25 li
cp
@
202.124 166.063 mo
199.124 172.063 li
205.124 172.063 li
cp
f
202.124 166.063 mo
199.124 172.063 li
205.124 172.063 li
cp
@
257.871 209.746 mo
254.871 215.746 li
260.871 215.746 li
cp
f
257.871 209.746 mo
254.871 215.746 li
260.871 215.746 li
cp
@
283.891 219.032 mo
280.891 225.032 li
286.891 225.032 li
cp
f
283.891 219.032 mo
280.891 225.032 li
286.891 225.032 li
cp
@
288.917 213.262 mo
285.917 219.262 li
291.917 219.262 li
cp
f
288.917 213.262 mo
285.917 219.262 li
291.917 219.262 li
cp
@
271.142 226.99 mo
268.142 232.99 li
274.142 232.99 li
cp
f
271.142 226.99 mo
268.142 232.99 li
274.142 232.99 li
cp
@
293.347 225.568 mo
290.347 231.568 li
296.347 231.568 li
cp
f
293.347 225.568 mo
290.347 231.568 li
296.347 231.568 li
cp
@
184.483 193.365 mo
181.483 199.365 li
187.483 199.365 li
cp
f
184.483 193.365 mo
181.483 199.365 li
187.483 199.365 li
cp
@
207.942 247.489 mo
204.942 253.489 li
210.942 253.489 li
cp
f
207.942 247.489 mo
204.942 253.489 li
210.942 253.489 li
cp
@
223.656 250.785 mo
220.656 256.785 li
226.656 256.785 li
cp
f
223.656 250.785 mo
220.656 256.785 li
226.656 256.785 li
cp
@
221.908 247.069 mo
218.908 253.069 li
224.908 253.069 li
cp
f
221.908 247.069 mo
218.908 253.069 li
224.908 253.069 li
cp
@
231.948 158.435 mo
228.948 164.435 li
234.948 164.435 li
cp
f
231.948 158.435 mo
228.948 164.435 li
234.948 164.435 li
cp
@
257.81 161.297 mo
254.81 167.297 li
260.81 167.297 li
cp
f
257.81 161.297 mo
254.81 167.297 li
260.81 167.297 li
cp
@
307.42 227.222 mo
304.42 233.222 li
310.42 233.222 li
cp
f
307.42 227.222 mo
304.42 233.222 li
310.42 233.222 li
cp
@
337.552 215.739 mo
334.552 221.739 li
340.552 221.739 li
cp
f
337.552 215.739 mo
334.552 221.739 li
340.552 221.739 li
cp
@
340.661 209.929 mo
337.661 215.929 li
343.661 215.929 li
cp
f
340.661 209.929 mo
337.661 215.929 li
343.661 215.929 li
cp
@
289.681 251.078 mo
286.681 257.078 li
292.681 257.078 li
cp
f
289.681 251.078 mo
286.681 257.078 li
292.681 257.078 li
cp
@
127.74 137.803 mo
124.74 143.803 li
130.74 143.803 li
cp
f
127.74 137.803 mo
124.74 143.803 li
130.74 143.803 li
cp
@
220.892 191.05 mo
217.892 197.05 li
223.892 197.05 li
cp
f
220.892 191.05 mo
217.892 197.05 li
223.892 197.05 li
cp
@
238.522 189.512 mo
235.522 195.512 li
241.522 195.512 li
cp
f
238.522 189.512 mo
235.522 195.512 li
241.522 195.512 li
cp
@
246.99 198.315 mo
243.99 204.315 li
249.99 204.315 li
cp
f
246.99 198.315 mo
243.99 204.315 li
249.99 204.315 li
cp
@
243.304 206.945 mo
240.304 212.945 li
246.304 212.945 li
cp
f
243.304 206.945 mo
240.304 212.945 li
246.304 212.945 li
cp
@
258.04 199.477 mo
255.04 205.477 li
261.04 205.477 li
cp
f
258.04 199.477 mo
255.04 205.477 li
261.04 205.477 li
cp
@
225.375 184.439 mo
222.375 190.439 li
228.375 190.439 li
cp
f
225.375 184.439 mo
222.375 190.439 li
228.375 190.439 li
cp
@
306.159 258.997 mo
303.159 264.997 li
309.159 264.997 li
cp
f
306.159 258.997 mo
303.159 264.997 li
309.159 264.997 li
cp
@
333.559 259.909 mo
330.559 265.909 li
336.559 265.909 li
cp
f
333.559 259.909 mo
330.559 265.909 li
336.559 265.909 li
cp
@
341.845 253.74 mo
338.845 259.74 li
344.845 259.74 li
cp
f
341.845 253.74 mo
338.845 259.74 li
344.845 259.74 li
cp
@
310.055 269.635 mo
307.055 275.635 li
313.055 275.635 li
cp
f
310.055 269.635 mo
307.055 275.635 li
313.055 275.635 li
cp
@
227.182 195.176 mo
224.182 201.176 li
230.182 201.176 li
cp
f
227.182 195.176 mo
224.182 201.176 li
230.182 201.176 li
cp
@
266.432 248.657 mo
263.432 254.657 li
269.432 254.657 li
cp
f
266.432 248.657 mo
263.432 254.657 li
269.432 254.657 li
cp
@
298.282 247.802 mo
295.282 253.802 li
301.282 253.802 li
cp
f
298.282 247.802 mo
295.282 253.802 li
301.282 253.802 li
cp
@
282.818 248.496 mo
279.818 254.496 li
285.818 254.496 li
cp
f
282.818 248.496 mo
279.818 254.496 li
285.818 254.496 li
cp
@
268.642 239.085 mo
265.642 245.085 li
271.642 245.085 li
cp
f
268.642 239.085 mo
265.642 245.085 li
271.642 245.085 li
cp
@
198.794 172.772 mo
195.794 178.772 li
201.794 178.772 li
cp
f
198.794 172.772 mo
195.794 178.772 li
201.794 178.772 li
cp
@
232.23 175.533 mo
229.23 181.533 li
235.23 181.533 li
cp
f
232.23 175.533 mo
229.23 181.533 li
235.23 181.533 li
cp
@
272.744 250.932 mo
269.744 256.932 li
275.744 256.932 li
cp
f
272.744 250.932 mo
269.744 256.932 li
275.744 256.932 li
cp
@
312.842 251.215 mo
309.842 257.215 li
315.842 257.215 li
cp
f
312.842 251.215 mo
309.842 257.215 li
315.842 257.215 li
cp
@
279.933 259.524 mo
276.933 265.524 li
282.933 265.524 li
cp
f
279.933 259.524 mo
276.933 265.524 li
282.933 265.524 li
cp
@
192.036 204.633 mo
189.036 210.633 li
195.036 210.633 li
cp
f
192.036 204.633 mo
189.036 210.633 li
195.036 210.633 li
cp
@
237.222 206.044 mo
234.222 212.044 li
240.222 212.044 li
cp
f
237.222 206.044 mo
234.222 212.044 li
240.222 212.044 li
cp
@
289.736 249.11 mo
286.736 255.11 li
292.736 255.11 li
cp
f
289.736 249.11 mo
286.736 255.11 li
292.736 255.11 li
cp
@
297.834 250.267 mo
294.834 256.267 li
300.834 256.267 li
cp
f
297.834 250.267 mo
294.834 256.267 li
300.834 256.267 li
cp
@
295 254.825 mo
292 260.825 li
298 260.825 li
cp
f
295 254.825 mo
292 260.825 li
298 260.825 li
cp
@
269.544 260.029 mo
266.544 266.029 li
272.544 266.029 li
cp
f
269.544 260.029 mo
266.544 266.029 li
272.544 266.029 li
cp
@
.5 lw
2 lc
142.584 167.033 mo
185.345 81.5501 li
1 /0 /CSD get_res sepcs
.498 sep
@
181.622 177.38 mo
254.392 86.0791 li
@
226.674 235.677 mo
343.725 176.646 li
@
248.666 226.562 mo
395.658 171.137 li
@
264.745 230.44 mo
436.35 167.231 li
@
254.028 237.847 mo
413.803 187.105 li
@
141.449 181.147 mo
182.361 98.1191 li
@
180.8 192.242 mo
254.764 107.203 li
@
247.003 245.535 mo
393.714 196.733 li
@
245.282 246.279 mo
392.771 205.097 li
@
151.261 175.454 mo
203.933 81.6391 li
@
174.988 182.833 mo
247.904 91.0351 li
@
223.37 243.855 mo
338.16 186.212 li
@
236.719 242.577 mo
371.065 183.827 li
@
256.275 233.973 mo
409.846 165.995 li
@
256.944 244.422 mo
413.495 180.874 li
@
256.114 240.114 mo
413.239 177.27 li
@
179.879 181.233 mo
258.5 93.1591 li
@
211.136 192.87 mo
312.842 99.8481 li
@
254.387 237.587 mo
411.849 177.026 li
@
278.434 241.227 mo
467.26 178.405 li
@
283.322 246.534 mo
477.666 192.231 li
@
278.33 243.159 mo
469.436 191.671 li
@
157.246 184.267 mo
211.906 101.208 li
@
225.617 241.471 mo
345.456 190.523 li
@
249.707 222.578 mo
398.799 166.895 li
@
263.318 219.495 mo
430.556 160.05 li
@
262.069 230.332 mo
427.45 181.912 li
@
248.511 227.873 mo
397.959 180.197 li
@
167.863 171.295 mo
233.856 78.6331 li
@
243.879 240.799 mo
388.4 180.27 li
@
275.264 232.314 mo
456.618 162.284 li
@
275.957 219.978 mo
458.166 157.474 li
@
297.718 225.226 mo
508.852 159.118 li
@
202.653 189.163 mo
297.881 101.212 li
@
236.334 252.666 mo
372.005 196.53 li
@
269.148 235.32 mo
443.439 172.623 li
@
278.06 235.025 mo
465.127 169.228 li
@
237.043 249.405 mo
372.671 198.836 li
@
175.365 173.084 mo
247.755 82.5171 li
@
192.29 170.976 mo
276.393 66.7101 li
@
234.238 226.743 mo
365.704 161.045 li
@
258.385 207.324 mo
420.468 129.995 li
@
263.24 224.627 mo
431.677 152.569 li
@
163.881 160.08 mo
224.939 69.5881 li
@
208.564 166.967 mo
307.355 62.3461 li
@
246.283 226.163 mo
391.219 155.019 li
@
268.564 229.259 mo
442.765 156.854 li
@
270.866 230.288 mo
448.83 163.08 li
@
262.171 235.645 mo
429.008 174.36 li
@
267.217 238.283 mo
441.791 175.736 li
@
153.075 151.662 mo
205.715 57.5481 li
@
180.647 157.748 mo
254.839 63.9791 li
@
230.516 207.206 mo
354.456 142.086 li
@
248.381 223.358 mo
395.943 168.055 li
@
252.292 217.299 mo
405.643 162.044 li
@
274.805 220.958 mo
457.454 166.323 li
@
171.649 149.999 mo
243.425 60.8841 li
@
210.381 209.027 mo
309.227 147.916 li
@
240.512 207.089 mo
376.588 144.918 li
@
274.61 206.569 mo
458.266 137.63 li
@
265.428 214.417 mo
440.11 146.625 li
@
268.603 220.303 mo
444.264 155.374 li
@
225.545 161.664 mo
352.783 17.4521 li
@
244.785 171.688 mo
396.228 31.5651 li
@
302.768 220.174 mo
537.316 118.761 li
@
311.609 209.15 mo
562.454 92.8531 li
@
326.039 203.69 mo
605.18 76.4171 li
@
271.487 244.824 mo
453.263 180.706 li
@
190.278 182.141 mo
274.121 87.7811 li
@
223.319 184.955 mo
343.888 99.2181 li
@
247.692 247.644 mo
398.594 192.386 li
@
260.137 234.956 mo
428.713 178.484 li
@
290.821 242.154 mo
498.581 187.21 li
@
262.047 251.208 mo
431.113 205.152 li
@
282.08 250.123 mo
479.976 200.631 li
@
252.422 243.701 mo
403.296 196.849 li
@
194.906 170.105 mo
282.397 77.1951 li
@
241.129 226.936 mo
384.501 181.274 li
@
270.114 222.428 mo
448.394 165.243 li
@
266.797 224.416 mo
441.958 173.924 li
@
154.811 187.419 mo
206.431 87.1331 li
@
189.795 177.895 mo
272.1 73.1521 li
@
269.914 229.292 mo
447.163 167.953 li
@
275.987 217.816 mo
459.419 143.367 li
@
187.609 165.46 mo
273.486 54.5121 li
@
267.74 235.236 mo
451.164 158.628 li
@
292.915 222.258 mo
508.033 142.871 li
@
304.72 203.821 mo
539.176 119.064 li
@
277.748 216.262 mo
473.195 137.342 li
@
144.126 168.193 mo
187.106 75.1631 li
@
176.772 165.362 mo
254.896 70.6861 li
@
222.392 233.574 mo
343.8 175.148 li
@
257.818 231.42 mo
420.589 165.486 li
@
261.456 227.462 mo
429.175 163.789 li
@
268.891 229.778 mo
445.625 169.434 li
@
174.5 180.415 mo
243.968 91.0191 li
@
196.275 163.363 mo
282.492 72.1771 li
@
242.413 254.079 mo
384.192 201.087 li
@
275.177 227.608 mo
462.587 163.055 li
@
258.842 241.324 mo
427.828 182.518 li
@
271.338 239.177 mo
457.344 176.669 li
@
169.912 207.944 mo
230.002 127.431 li
@
192.956 196.047 mo
278.465 106.834 li
@
231.817 244.561 mo
364.215 198.672 li
@
248.315 242.338 mo
402.087 195.496 li
@
250.508 242.674 mo
407.923 195.408 li
@
202.422 178.74 mo
297.119 71.5281 li
@
208.82 189.084 mo
310.715 82.8601 li
@
269.242 239.524 mo
445.638 169.224 li
@
273.898 265.846 mo
457.616 216.428 li
@
293.168 242.672 mo
501.974 176.252 li
@
303.946 243.85 mo
531.811 169.438 li
@
286.505 249.13 mo
487.294 196.315 li
@
237.585 241.318 mo
372.534 190.16 li
@
259.829 228.71 mo
420.363 169.951 li
@
201.374 187.545 mo
292.748 104.988 li
@
258.829 249.866 mo
422.144 205.828 li
@
277.854 247.116 mo
466.191 197.956 li
@
160.912 166.494 mo
216.497 69.0091 li
@
191.627 171.912 mo
270.401 67.7661 li
@
174.972 175.948 mo
244.972 78.8061 li
@
194.099 184.626 mo
282.568 87.7501 li
@
232.011 231.734 mo
361.362 178.354 li
@
268.198 237.023 mo
441.245 179.436 li
@
263.518 232.927 mo
429.513 176.719 li
@
292.655 241.312 mo
498.444 182.717 li
@
178.267 143.739 mo
250.697 36.6581 li
@
226.349 222.088 mo
347.861 168.179 li
@
244.726 242.108 mo
388.344 189.519 li
@
249.265 236.693 mo
401.733 186.607 li
@
271.331 230.543 mo
449.583 177.972 li
@
139.366 178.135 mo
182.961 99.3831 li
@
170.462 188.167 mo
236.181 107.066 li
@
211.851 266.921 mo
316.267 239.993 li
@
235.376 264.417 mo
369.071 234.764 li
@
243.607 246.123 mo
386.868 212.488 li
@
258.606 240.851 mo
424.255 199.076 li
@
175.517 160.219 mo
244.63 58.2931 li
@
197.746 178.059 mo
286.497 77.1671 li
@
272.607 240.225 mo
457.87 169.246 li
@
287.517 236.108 mo
488.579 167.002 li
@
168.703 166.814 mo
238.148 77.9951 li
@
199.759 172.121 mo
292.635 80.6901 li
@
232.367 238.09 mo
369.31 196.61 li
@
261.926 238.563 mo
440.022 187.689 li
@
274.243 233.051 mo
466.617 186.293 li
@
272.26 234.69 mo
460.732 181.367 li
@
199.591 159.809 mo
284.983 47.7261 li
@
288.578 252.816 mo
490.049 202.905 li
@
312.015 253.084 mo
543.711 205.427 li
@
321.57 234.275 mo
579.706 161.072 li
@
159.893 142.132 mo
215.601 41.8351 li
@
189.083 161.962 mo
272.372 58.3181 li
@
262.756 220.738 mo
431.317 151.494 li
@
269.35 220.63 mo
444.541 153.831 li
@
183.871 170.336 mo
261.545 64.7531 li
@
259.582 231.611 mo
425.73 173.752 li
@
266.994 240.103 mo
438.271 170.858 li
@
188.693 175.243 mo
270.71 78.4581 li
@
222.032 179.991 mo
341.425 65.7191 li
@
259.502 246.454 mo
426.782 198.158 li
@
286.181 233.696 mo
484.714 163.694 li
@
277.582 235.946 mo
466.921 181.978 li
@
228.901 164.196 mo
351.851 38.2441 li
@
264.642 227.251 mo
440.591 153.92 li
@
282.441 230.752 mo
482.895 165.1 li
@
286.409 229.413 mo
490.773 159.602 li
@
276.368 223.163 mo
465.526 146.22 li
@
302.069 220.779 mo
530.157 138.312 li
@
222.677 183.947 mo
343.955 74.8211 li
@
326.648 248.358 mo
606.936 203.631 li
@
279.235 271.513 mo
469.859 234.908 li
@
213.974 158.266 mo
316.878 49.4871 li
@
282.807 244.52 mo
477.04 199.519 li
@
278.329 240.092 mo
466.553 193.6 li
@
208.722 155.931 mo
312.305 33.4741 li
@
244.935 153.999 mo
391.954 24.4421 li
@
296.987 235 mo
516.304 170.033 li
@
287.698 255.576 mo
488.465 211.183 li
@
298.493 232.078 mo
525.682 161.672 li
@
331.525 248.795 mo
620.041 188.468 li
@
294.926 253.518 mo
510.42 199.515 li
@
249.81 170.067 mo
404.383 39.6691 li
@
319.342 250.221 mo
582.613 197.122 li
@
333.742 236.057 mo
633.449 170.759 li
@
345.021 237.815 mo
669.864 177.476 li
@
301.12 260.083 mo
520.472 220.726 li
@
187.749 167.371 mo
269.552 80.2791 li
@
197.251 160.966 mo
285.957 67.9261 li
@
242.986 217.977 mo
384.076 152.928 li
@
274.146 221.594 mo
454.806 150.541 li
@
274.471 225.125 mo
459.384 160.052 li
@
240.86 225.723 mo
381.377 167.669 li
@
273.587 229.496 mo
458.255 175.299 li
@
175.089 179.211 mo
246.895 88.1061 li
@
200.708 183.131 mo
290.677 98.8261 li
@
237.678 251.9 mo
368.629 195.758 li
@
266.17 251.847 mo
433.422 200.263 li
@
267.157 248.885 mo
435.727 199.515 li
@
251.405 254.375 mo
402.647 205.699 li
@
164.02 169.391 mo
224.551 77.5751 li
@
183.693 168.753 mo
263.424 74.9491 li
@
225.687 225.588 mo
344.565 164.763 li
@
256.94 225.345 mo
415.272 163.284 li
@
249.692 228.581 mo
399.918 170.901 li
@
273.52 239.118 mo
456.412 181.835 li
@
268.673 231.249 mo
449.987 172.932 li
@
202.124 169.062 mo
296.91 67.7511 li
@
257.871 212.745 mo
414.83 144.001 li
@
283.891 222.032 mo
478.913 157.945 li
@
288.917 216.262 mo
490.004 150.333 li
@
271.142 229.99 mo
448.923 170.382 li
@
293.346 228.569 mo
503.585 170.697 li
@
184.482 196.365 mo
262.445 120.716 li
@
207.941 250.49 mo
309.726 210.497 li
@
223.655 253.786 mo
345.268 216.838 li
@
221.908 250.07 mo
343.223 210.73 li
@
231.947 161.435 mo
364.312 26.8801 li
@
257.81 164.297 mo
426.462 23.6461 li
@
307.42 230.222 mo
547.2 143.48 li
@
337.552 218.739 mo
638.076 125.245 li
@
340.662 212.929 mo
651.108 107.776 li
@
289.682 254.077 mo
495.598 205.584 li
@
127.741 140.803 mo
157.476 55.8001 li
@
220.893 194.05 mo
332.381 108.606 li
@
238.523 192.512 mo
377.061 112.226 li
@
246.991 201.315 mo
395.831 122.298 li
@
243.305 209.945 mo
389.77 142.066 li
@
258.041 202.477 mo
423.771 134.881 li
@
225.376 187.44 mo
349.378 80.3281 li
@
306.16 261.997 mo
543.334 207.627 li
@
333.56 262.91 mo
622.215 220.691 li
@
341.847 256.741 mo
658.226 207.738 li
@
310.057 272.636 mo
542.926 236.102 li
@
227.184 198.177 mo
352.064 112.101 li
@
266.434 251.658 mo
443.491 209.13 li
@
298.284 250.803 mo
521.052 210.796 li
@
282.82 251.498 mo
482.197 207.4 li
@
268.644 242.087 mo
448.827 202.628 li
@
198.796 175.773 mo
291.134 70.2631 li
@
232.232 178.534 mo
360.329 64.2811 li
@
272.746 253.933 mo
461.765 204.232 li
@
312.844 254.216 mo
556.274 211.906 li
@
279.935 262.525 mo
465.1 231.224 li
@
192.038 207.634 mo
282.124 128.373 li
@
237.224 209.045 mo
372.524 123.655 li
@
289.738 252.11 mo
494.888 214.071 li
@
297.835 253.268 mo
520.173 198.332 li
@
295.002 257.825 mo
506.516 213.767 li
@
269.545 263.029 mo
444.083 234.12 li
@
.8 lw
0 lj
96.94 295.343 mo
96.94 2.06509 li
1 /0 /CSD get_res sepcs
1 sep
@
698.464 295.343 mo
698.464 2.06509 li
@
96.94 295.343 mo
698.464 295.343 li
@
96.94 2.06509 mo
698.464 2.06509 li
@
589.667 54.0811 mo
691.464 54.0811 li
692.797 54.0811 693.464 53.4141 693.464 52.0811 cv
693.464 9.06512 li
693.464 7.73212 692.797 7.06512 691.464 7.06512 cv
589.667 7.06512 li
588.334 7.06512 587.667 7.73212 587.667 9.06512 cv
587.667 52.0811 li
587.667 53.4141 588.334 54.0811 589.667 54.0811 cv
cp
1 /0 /CSD get_res sepcs
0 sep
f
1 lw
0 lc
589.667 54.0811 mo
691.464 54.0811 li
692.797 54.0811 693.464 53.4141 693.464 52.0811 cv
693.464 9.06512 li
693.464 7.73212 692.797 7.06512 691.464 7.06512 cv
589.667 7.06512 li
588.334 7.06512 587.667 7.73212 587.667 9.06512 cv
587.667 52.0811 li
587.667 53.4141 588.334 54.0811 589.667 54.0811 cv
cp
1 /0 /CSD get_res sepcs
.2 sep
@
598.667 19.0341 mo
604.667 13.0341 li
598.667 13.0341 mo
604.667 19.0341 li
0 .990631 1 .000396735 cmyk
f
1.5 lw
1 lj
598.667 19.0341 mo
604.667 13.0341 li
598.667 13.0341 mo
604.667 19.0341 li
@
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: TCRXVQ+ Initial
10 dict begin
ct_T3Defs
/FontType 3 def
/FontName /TCRXVQ+ def
/FontMatrix [0.01 0 0 0.01 0 0 ] def
/FontBBox [-0.001 -0.013 0.889 0.76 ] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /S put
dup 33 /i put
dup 34 /t put
dup 35 /e put
dup 36 /X put
 def
/GlyphProcs 256 dict begin
/.notdef {250 0 0 0 250 0 setcachedevice
}bind def
/S {63.5 0 6.6 -1.3 57.9 74.2 setcachedevice
53.5 70.5 mo
53.5 60.9 li
49.7 62.7 46.2 64 42.9 64.9 cv
39.5 65.7 36.3 66.2 33.3 66.2 cv
27.9 66.2 23.7 65.1 20.8 63.1 cv
17.9 61 16.5 58 16.5 54.2 cv
16.5 51 17.4 48.5 19.4 46.9 cv
21.3 45.2 25 43.9 30.4 42.9 cv
36.4 41.7 li
43.7 40.3 49.1 37.8 52.6 34.3 cv
56.1 30.7 57.9 26 57.9 20.1 cv
57.9 13 55.5 7.7 50.8 4.1 cv
46 .5 39.1 -1.3 30 -1.3 cv
26.5 -1.3 22.8 -.900002 18.9 -.199997 cv
15 .5 11 1.6 6.9 3.2 cv
6.9 13.4 li
10.9 11.1 14.8 9.4 18.6 8.3 cv
22.4 7.1 26.2 6.6 30 6.6 cv
35.6 6.6 39.9 7.7 43 9.9 cv
46 12.1 47.6 15.2 47.6 19.4 cv
47.6 23 46.5 25.8 44.3 27.8 cv
42.1 29.8 38.5 31.3 33.5 32.3 cv
27.5 33.5 li
20.1 34.9 14.8 37.2 11.5 40.4 cv
8.2 43.5 6.6 47.8 6.6 53.4 cv
6.6 59.8 8.8 64.9 13.4 68.6 cv
17.9 72.3 24.2 74.2 32.2 74.2 cv
35.6 74.2 39 73.9 42.6 73.3 cv
46.1 72.7 49.7 71.7 53.5 70.5 cv
false sop
ef
}bind def
/i {27.8 0 9.4 0 18.4 76 setcachedevice
9.4 54.7 mo
18.4 54.7 li
18.4 0 li
9.4 0 li
9.4 54.7 li
9.4 76 mo
9.4 76 mo
18.4 76 li
18.4 64.6 li
9.4 64.6 li
cp
false sop
ef
}bind def
/t {39.2 0 2.7 0 36.8 70.2 setcachedevice
18.3 70.2 mo
18.3 54.7 li
36.8 54.7 li
36.8 47.7 li
18.3 47.7 li
18.3 18 li
18.3 13.5 18.9 10.6 20.1 9.4 cv
21.3 8.1 23.8 7.5 27.6 7.5 cv
36.8 7.5 li
36.8 0 li
27.6 0 li
20.6 0 15.8 1.3 13.2 3.89999 cv
10.6 6.5 9.3 11.2 9.3 18 cv
9.3 47.7 li
2.7 47.7 li
2.7 54.7 li
9.3 54.7 li
9.3 70.2 li
18.3 70.2 li
false sop
ef
}bind def
/e {61.5 0 5.5 -1.3 56.2 56 setcachedevice
56.2 29.6 mo
56.2 25.2 li
14.9 25.2 li
15.3 19 17.1 14.2 20.5 11 cv
23.8 7.8 28.4 6.2 34.4 6.2 cv
37.8 6.2 41.2 6.6 44.4 7.4 cv
47.6 8.2 50.9 9.5 54.1 11.3 cv
54.1 2.8 li
50.9 1.4 47.6 .300001 44.2 -.299999 cv
40.8 -.9 37.3 -1.3 33.9 -1.3 cv
25.1 -1.3 18.2 1.2 13.1 6.2 cv
8 11.2 5.5 18.1 5.5 26.8 cv
5.5 35.7 7.9 42.8 12.7 48.1 cv
17.5 53.3 24.1 56 32.3 56 cv
39.7 56 45.5 53.6 49.8 48.9 cv
54 44.1 56.2 37.7 56.2 29.6 cv
47.2 32.2 mo
47.1 37.1 45.7 41 43.1 44 cv
40.4 46.9 36.8 48.4 32.4 48.4 cv
27.4 48.4 23.4 46.9 20.4 44.1 cv
17.4 41.3 15.6 37.3 15.2 32.2 cv
47.2 32.2 li
false sop
ef
}bind def
/X {68.5 0 3 0 65.4 72.9 setcachedevice
6.3 72.9 mo
16.9 72.9 li
35 45.8 li
53.2 72.9 li
63.8 72.9 li
40.4 37.9 li
65.4 0 li
54.8 0 li
34.3 31 li
13.6 0 li
3 0 li
29 38.9 li
6.3 72.9 li
false sop
ef
}bind def
currentdict end def FontName currentdict end definefont pop
%ADOEndSubsetFont
/TCRXVR+ /TCRXVQ+ findfont ct_VMDictPut
/TCRXVR+*1 
[32{/.notdef}rp /S /i /t /e /X 219{/.notdef}rp]
TCRXVR+ nf
TCRXVR+*1 [10 0 0 -10 0 0 ]msf
619.667 18.6595 mo
( !"#$)
[6.34894 2.77899 3.91901 9.33105 0 ]xsh
598.667 30.7061 mo
604.667 30.7061 li
601.667 33.7061 mo
601.667 27.7061 li
false sop
.895628 .7673 0 0 cmyk
f
1.5 lw
0 lc
1 lj
10 ml
[] 0 dsh
false sadj
598.667 30.7061 mo
604.667 30.7061 li
601.667 33.7061 mo
601.667 27.7061 li
@
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: TCRXVQ+ AddGlyphs
systemdict begin TCRXVR+
/GlyphProcs get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/Y {61.1 0 -.099994 0 61.3 72.9 setcachedevice
-.099994 72.9 mo
10.4 72.9 li
30.6 42.9 li
50.7 72.9 li
61.3 72.9 li
35.5 34.7 li
35.5 0 li
25.6 0 li
25.6 34.7 li
-.099994 72.9 li
false sop
ef
}bind def
systemdict /gcheck known {setglobal} if end end
%ADOEndSubsetFont
/TCRXVR+*1 
[32{/.notdef}rp /S /i /t /e /X /Y 218{/.notdef}rp]
TCRXVR+ nf
TCRXVR+*1 [10 0 0 -10 0 0 ]msf
619.667 33.3313 mo
( !"#%)
[6.34894 2.77899 3.91901 9.33105 0 ]xsh
601.667 42.3781 mo
598.667 48.3781 li
604.667 48.3781 li
cp
false sop
.878538 .2439 1 .131716 cmyk
f
1 lw
0 lc
1 lj
10 ml
[] 0 dsh
false sadj
601.667 42.3781 mo
598.667 48.3781 li
604.667 48.3781 li
cp
@
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: TCRXVQ+ AddGlyphs
systemdict begin TCRXVR+
/GlyphProcs get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/H {75.2 0 9.8 0 65.4 72.9 setcachedevice
9.8 72.9 mo
19.7 72.9 li
19.7 43 li
55.5 43 li
55.5 72.9 li
65.4 72.9 li
65.4 0 li
55.5 0 li
55.5 34.7 li
19.7 34.7 li
19.7 0 li
9.8 0 li
9.8 72.9 li
false sop
ef
}bind def
/a {61.3 0 6 -1.3 52.2 56 setcachedevice
34.3 27.5 mo
27 27.5 22 26.6 19.2 25 cv
16.4 23.3 15 20.5 15 16.5 cv
15 13.3 16 10.7 18.1 8.9 cv
20.2 7 23.1 6.1 26.7 6.1 cv
31.7 6.1 35.7 7.8 38.7 11.4 cv
41.7 14.9 43.2 19.6 43.2 25.5 cv
43.2 27.5 li
34.3 27.5 li
52.2 31.2 mo
52.2 0 li
43.2 0 li
43.2 8.3 li
41.1 4.9 38.5 2.5 35.5 1 cv
32.5 -.5 28.7 -1.3 24.3 -1.3 cv
18.7 -1.3 14.2 .200001 10.9 3.3 cv
7.6 6.4 6 10.6 6 15.9 cv
6 22 8 26.6 12.2 29.8 cv
16.3 32.9 22.4 34.5 30.6 34.5 cv
43.2 34.5 li
43.2 35.4 li
43.2 39.5 41.8 42.7 39.1 45 cv
36.4 47.2 32.6 48.4 27.7 48.4 cv
24.5 48.4 21.5 48 18.5 47.2 cv
15.5 46.4 12.7 45.3 10 43.9 cv
10 52.2 li
13.2 53.4 16.4 54.4 19.5 55 cv
22.6 55.6 25.6 56 28.6 56 cv
36.5 56 42.4 53.9 46.3 49.8 cv
50.2 45.7 52.2 39.5 52.2 31.2 cv
false sop
ef
}bind def
/r {41.1 0 9.1 0 41.1 56 setcachedevice
41.1 46.3 mo
40.1 46.9 39 47.3 37.8 47.6 cv
36.6 47.8 35.3 48 33.9 48 cv
28.8 48 24.9 46.3 22.2 43 cv
19.4 39.7 18.1 35 18.1 28.8 cv
18.1 0 li
9.1 0 li
9.1 54.7 li
18.1 54.7 li
18.1 46.2 li
19.9 49.5 22.4 52 25.4 53.6 cv
28.4 55.2 32.1 56 36.5 56 cv
37.1 56 37.8 55.9 38.6 55.9 cv
39.3 55.8 40.1 55.7 41.1 55.5 cv
41.1 46.3 li
false sop
ef
}bind def
/m {97.4 0 9.1 0 88.9 56 setcachedevice
52 44.2 mo
54.2 48.2 56.9 51.1 60 53.1 cv
63.1 55 66.8 56 71.1 56 cv
76.7 56 81.1 54 84.2 50 cv
87.3 46 88.9 40.3 88.9 33 cv
88.9 0 li
79.9 0 li
79.9 32.7 li
79.9 37.9 78.9 41.8 77.1 44.4 cv
75.2 46.9 72.4 48.2 68.6 48.2 cv
63.9 48.2 60.2 46.6 57.5 43.5 cv
54.8 40.4 53.5 36.2 53.5 30.9 cv
53.5 0 li
44.5 0 li
44.5 32.7 li
44.5 37.9 43.5 41.8 41.7 44.4 cv
39.8 46.9 36.9 48.2 33.1 48.2 cv
28.5 48.2 24.8 46.6 22.1 43.5 cv
19.4 40.4 18.1 36.2 18.1 30.9 cv
18.1 0 li
9.1 0 li
9.1 54.7 li
18.1 54.7 li
18.1 46.2 li
20.1 49.5 22.6 52 25.5 53.6 cv
28.3 55.2 31.7 56 35.7 56 cv
39.7 56 43 55 45.8 53 cv
48.6 51 50.6 48 52 44.2 cv
false sop
ef
}bind def
/o {61.2 0 5.5 -1.3 55.7 56 setcachedevice
30.6 48.4 mo
25.8 48.4 22 46.5 19.2 42.7 cv
16.4 38.9 15 33.8 15 27.3 cv
15 20.7 16.3 15.6 19.1 11.8 cv
21.9 8 25.7 6.2 30.6 6.2 cv
35.4 6.2 39.2 8 42 11.8 cv
44.8 15.6 46.2 20.7 46.2 27.3 cv
46.2 33.7 44.8 38.9 42 42.7 cv
39.2 46.5 35.4 48.4 30.6 48.4 cv
30.6 56 mo
38.4 56 44.5 53.4 49 48.4 cv
53.4 43.3 55.7 36.3 55.7 27.3 cv
55.7 18.3 53.4 11.3 49 6.3 cv
44.5 1.2 38.4 -1.3 30.6 -1.3 cv
22.7 -1.3 16.5 1.2 12.1 6.3 cv
7.7 11.3 5.5 18.3 5.5 27.3 cv
5.5 36.3 7.7 43.3 12.1 48.4 cv
16.5 53.4 22.7 56 30.6 56 cv
false sop
ef
}bind def
/n {63.4 0 9.1 0 54.9 56 setcachedevice
54.9 33 mo
54.9 0 li
45.9 0 li
45.9 32.7 li
45.9 37.9 44.8 41.7 42.8 44.3 cv
40.8 46.9 37.8 48.2 33.8 48.2 cv
28.9 48.2 25.1 46.6 22.3 43.5 cv
19.5 40.4 18.1 36.2 18.1 30.9 cv
18.1 0 li
9.1 0 li
9.1 54.7 li
18.1 54.7 li
18.1 46.2 li
20.2 49.4 22.7 51.9 25.7 53.5 cv
28.6 55.1 32 56 35.8 56 cv
42 56 46.8 54 50 50.1 cv
53.2 46.2 54.9 40.5 54.9 33 cv
false sop
ef
}bind def
/z {52.5 0 4.3 0 48.2 54.7 setcachedevice
5.5 54.7 mo
48.2 54.7 li
48.2 46.5 li
14.4 7.2 li
48.2 7.2 li
48.2 0 li
4.3 0 li
4.3 8.2 li
38.1 47.5 li
5.5 47.5 li
5.5 54.7 li
false sop
ef
}bind def
/d {63.5 0 5.5 -1.3 54.4 76 setcachedevice
45.4 46.4 mo
45.4 76 li
54.4 76 li
54.4 0 li
45.4 0 li
45.4 8.2 li
43.5 4.9 41.1 2.5 38.2 1 cv
35.3 -.5 31.9 -1.3 27.9 -1.3 cv
21.3 -1.3 15.9 1.3 11.7 6.5 cv
7.5 11.7 5.5 18.7 5.5 27.3 cv
5.5 35.9 7.5 42.8 11.7 48.1 cv
15.9 53.3 21.3 56 27.9 56 cv
31.9 56 35.3 55.2 38.2 53.6 cv
41.1 52 43.5 49.6 45.4 46.4 cv
14.8 27.3 mo
14.8 20.7 16.1 15.5 18.8 11.7 cv
21.5 7.9 25.3 6.1 30.1 6.1 cv
34.8 6.1 38.5 7.9 41.3 11.7 cv
44 15.5 45.4 20.7 45.4 27.3 cv
45.4 33.9 44 39 41.3 42.8 cv
38.5 46.6 34.8 48.5 30.1 48.5 cv
25.3 48.5 21.5 46.6 18.8 42.8 cv
16.1 39 14.8 33.9 14.8 27.3 cv
false sop
ef
}bind def
systemdict /gcheck known {setglobal} if end end
%ADOEndSubsetFont
/TCRXVR+*1 
[32{/.notdef}rp /S /i /t /e /X /Y /H 
/a /r /m /o /n /z /d 210{/.notdef}rp]
TCRXVR+ nf
TCRXVR+*1 [10 0 0 -10 0 0 ]msf
619.667 48.0032 mo
(&'\(\)*+!,#-%)
[7.52002 6.13 4.10999 9.73999 6.12 6.34003 2.77997 5.25 6.15002 9.52594 0 ]xsh
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
/TCRXVR+*1 uf
/TCRXVR+ uf
/ uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
