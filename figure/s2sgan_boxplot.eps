%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: ADPFA12.tmp.pdf
%%Creator: Adobe Acrobat 9.5.5
%%For: fenqiang
%%CreationDate: 2019/4/2, 18:59:26
%%BoundingBox: 0 0 705 242
%%HiResBoundingBox: 0 0 704.5870 241.1440
%%CropBox: 0 0 704.5870 241.1440
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 991 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.1-c043 52.372728, 2009/01/18-15:08:04        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   xmp:CreateDate="2019-04-02T18:58:56-04:00"
   xmp:CreatorTool="matplotlib version 3.0.2, http://matplotlib.org/"
   xmp:ModifyDate="2019-04-02T18:58:56-04:00"
   pdf:Producer="Acrobat Distiller 9.5.5 (Windows)"
   dc:format="application/pdf"
   xmpMM:DocumentID="uuid:723987ec-e90b-4a1c-bf5c-72d75f4f99a4"
   xmpMM:InstanceID="uuid:85780feb-214b-4622-9229-2f325c76cfa0">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">/home/fenqiang/harmonization/figures/boxplot.eps</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -241.144 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 241.144 li
704.587 241.144 li
704.587 0 li
cp
clp
[1 0 0 1 -81.6609 0 ]ct
0 272.52 mo
870 272.52 li
870 -34.2198 li
0 -34.2198 li
cp
false sop
/0 
<<
/Name (Black)
/1 
[/DeviceCMYK] /CSA add_res
/CSA /1 get_csa_by_name
/MappedCSA /1 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
f
108.57 238.702 mo
783.192 238.702 li
783.192 1.97318 li
108.57 1.97318 li
cp
f
gsave
108.56 238.7 mo
783.16 238.7 li
783.16 2.00018 li
108.56 2.00018 li
cp
clp
108.57 168.569 mo
783.192 168.569 li
783.192 114.447 li
108.57 114.447 li
cp
1 /0 /CSD get_res sepcs
.498 sep
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
false sadj
108.57 168.569 mo
783.192 168.569 li
783.192 114.447 li
108.57 114.447 li
cp
@
grestore
108.57 195.63 mo
105.07 195.63 li
1 /0 /CSD get_res sepcs
1 sep
f
.8 lw
0 lc
1 lj
10 ml
[] 0 dsh
false sadj
108.57 195.63 mo
105.07 195.63 li
@
%ADOBeginSubsetFont: GCWIZY+ Initial
10 dict begin
ct_T3Defs
/FontType 3 def
/FontName /GCWIZY+ def
/FontMatrix [0.01 0 0 0.01 0 0 ] def
/FontBBox [-0.001 -0.013 0.889 0.76 ] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /one put
dup 33 /period put
dup 34 /five put
 def
/GlyphProcs 256 dict begin
/.notdef {250 0 0 0 250 0 setcachedevice
}bind def
/one {63.6 0 11 0 54.4 72.9 setcachedevice
12.4 8.3 mo
28.5 8.3 li
28.5 63.9 li
11 60.4 li
11 69.4 li
28.4 72.9 li
38.3 72.9 li
38.3 8.3 li
54.4 8.3 li
54.4 0 li
12.4 0 li
12.4 8.3 li
false sop
ef
}bind def
/period {31.8 0 10.7 0 21 12.4 setcachedevice
10.7 -1e-6 mo
21 -1e-6 li
21 12.4 li
10.7 12.4 li
cp
false sop
f
}bind def
/five {63.6 0 7.7 -1.3 54.9 72.9 setcachedevice
10.8 72.9 mo
49.5 72.9 li
49.5 64.6 li
19.8 64.6 li
19.8 46.7 li
21.2 47.2 22.7 47.6 24.1 47.8 cv
25.5 48 27 48.2 28.4 48.2 cv
36.5 48.2 42.9 45.9 47.7 41.5 cv
52.5 37 54.9 31 54.9 23.4 cv
54.9 15.5 52.4 9.4 47.5 5.1 cv
42.6 .800003 35.7 -1.3 26.9 -1.3 cv
23.8 -1.3 20.7 -1 17.5 -.599998 cv
14.3 -.0999985 11.1 .599998 7.7 1.7 cv
7.7 11.6 li
10.6 10 13.6 8.8 16.8 8 cv
19.9 7.2 23.2 6.9 26.7 6.9 cv
32.3 6.9 36.8 8.3 40.1 11.3 cv
43.3 14.3 45 18.3 45 23.4 cv
45 28.4 43.3 32.4 40.1 35.4 cv
36.8 38.4 32.3 39.9 26.7 39.9 cv
24.1 39.9 21.4 39.6 18.8 39 cv
16.2 38.4 13.5 37.5 10.8 36.3 cv
10.8 72.9 li
false sop
ef
}bind def
currentdict end def FontName currentdict end definefont pop
%ADOEndSubsetFont
/GCWIZZ+ /GCWIZY+ findfont ct_VMDictPut
/GCWIZZ+*1 
[32{/.notdef}rp /one /period /five 221{/.notdef}rp]
GCWIZZ+ nf
GCWIZZ+*1 [10 0 0 -10 0 0 ]msf
85.6638 199.427 mo
( !")
[6.36102 3.18093 0 ]xsh
108.57 150.528 mo
105.07 150.528 li
false sop
1 /0 /CSD get_res sepcs
1 sep
f
.8 lw
0 lc
1 lj
10 ml
[] 0 dsh
false sadj
108.57 150.528 mo
105.07 150.528 li
@
%ADOBeginSubsetFont: GCWIZY+ AddGlyphs
systemdict begin GCWIZZ+
/GlyphProcs get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/two {63.6 0 7.3 0 53.6 74.2 setcachedevice
19.2 8.3 mo
53.6 8.3 li
53.6 0 li
7.3 0 li
7.3 8.3 li
11 12.1 16.1 17.3 22.6 23.9 cv
29 30.4 33.1 34.6 34.8 36.5 cv
38 40 40.2 43 41.4 45.5 cv
42.6 47.9 43.3 50.4 43.3 52.8 cv
43.3 56.6 41.9 59.8 39.2 62.2 cv
36.5 64.6 33 65.9 28.6 65.9 cv
25.5 65.9 22.2 65.3 18.8 64.3 cv
15.4 63.2 11.7 61.6 7.8 59.4 cv
7.8 69.4 li
11.8 71 15.5 72.2 18.9 73 cv
22.3 73.8 25.5 74.2 28.4 74.2 cv
35.9 74.2 41.9 72.3 46.4 68.5 cv
50.9 64.7 53.2 59.7 53.2 53.4 cv
53.2 50.4 52.6 47.5 51.5 44.9 cv
50.4 42.2 48.4 39 45.4 35.4 cv
44.6 34.4 42 31.7 37.6 27.2 cv
33.2 22.7 27.1 16.4 19.2 8.3 cv
false sop
ef
}bind def
/zero {63.6 0 6.6 -1.3 57 74.2 setcachedevice
31.8 66.4 mo
26.7 66.4 22.9 63.9 20.3 58.9 cv
17.7 53.9 16.5 46.4 16.5 36.4 cv
16.5 26.4 17.7 18.9 20.3 13.9 cv
22.9 8.9 26.7 6.4 31.8 6.4 cv
36.9 6.4 40.7 8.9 43.3 13.9 cv
45.8 18.9 47.1 26.4 47.1 36.4 cv
47.1 46.4 45.8 53.9 43.3 58.9 cv
40.7 63.9 36.9 66.4 31.8 66.4 cv
31.8 74.2 mo
39.9 74.2 46.1 70.9 50.5 64.5 cv
54.8 58 57 48.6 57 36.4 cv
57 24.1 54.8 14.7 50.5 8.3 cv
46.1 1.9 39.9 -1.3 31.8 -1.3 cv
23.6 -1.3 17.3 1.9 13 8.3 cv
8.7 14.7 6.6 24.1 6.6 36.4 cv
6.6 48.6 8.7 58 13 64.5 cv
17.3 70.9 23.6 74.2 31.8 74.2 cv
false sop
ef
}bind def
systemdict /gcheck known {setglobal} if end end
%ADOEndSubsetFont
/GCWIZZ+*1 
[32{/.notdef}rp /one /period /five /two /zero 219{/.notdef}rp]
GCWIZZ+ nf
GCWIZZ+*1 [10 0 0 -10 0 0 ]msf
85.6638 154.325 mo
(#!$)
[6.36102 3.18093 0 ]xsh
108.57 105.427 mo
105.07 105.427 li
false sop
1 /0 /CSD get_res sepcs
1 sep
f
.8 lw
0 lc
1 lj
10 ml
[] 0 dsh
false sadj
108.57 105.427 mo
105.07 105.427 li
@
GCWIZZ+*1 [10 0 0 -10 0 0 ]msf
85.6638 109.224 mo
(#!")
[6.36102 3.18093 0 ]xsh
108.57 60.3252 mo
105.07 60.3252 li
f
108.57 60.3252 mo
105.07 60.3252 li
@
%ADOBeginSubsetFont: GCWIZY+ AddGlyphs
systemdict begin GCWIZZ+
/GlyphProcs get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/three {63.6 0 7.6 -1.3 55.6 74.2 setcachedevice
40.6 39.3 mo
45.3 38.3 49 36.2 51.6 33 cv
54.2 29.8 55.6 25.8 55.6 21.2 cv
55.6 14 53.1 8.4 48.2 4.5 cv
43.2 .599998 36.2 -1.3 27.1 -1.3 cv
24 -1.3 20.8 -1 17.6 -.400002 cv
14.4 .0999985 11 1 7.6 2.2 cv
7.6 11.7 li
10.3 10.1 13.3 8.9 16.6 8.1 cv
19.8 7.3 23.2 6.9 26.8 6.9 cv
33 6.9 37.7 8.1 40.9 10.5 cv
44.1 12.9 45.8 16.5 45.8 21.2 cv
45.8 25.4 44.3 28.8 41.3 31.2 cv
38.3 33.6 34.1 34.9 28.7 34.9 cv
20.2 34.9 li
20.2 43 li
29.1 43 li
33.9 43 37.6 43.9 40.2 45.9 cv
42.8 47.8 44.1 50.6 44.1 54.3 cv
44.1 58 42.7 60.9 40.1 62.9 cv
37.4 64.9 33.6 65.9 28.7 65.9 cv
26 65.9 23.1 65.6 20 65 cv
16.9 64.4 13.5 63.5 9.8 62.3 cv
9.8 71.1 li
13.5 72.1 17 72.9 20.3 73.4 cv
23.5 73.9 26.6 74.2 29.6 74.2 cv
37 74.2 42.9 72.5 47.3 69.1 cv
51.7 65.7 53.9 61.1 53.9 55.3 cv
53.9 51.3 52.7 47.9 50.4 45.1 cv
48.1 42.3 44.8 40.3 40.6 39.3 cv
false sop
ef
}bind def
systemdict /gcheck known {setglobal} if end end
%ADOEndSubsetFont
/GCWIZZ+*1 
[32{/.notdef}rp /one /period /five /two /zero /three 218{/.notdef}rp]
GCWIZZ+ nf
GCWIZZ+*1 [10 0 0 -10 0 0 ]msf
85.6638 64.1222 mo
(%!$)
[6.36102 3.18093 0 ]xsh
108.57 15.2242 mo
105.07 15.2242 li
false sop
1 /0 /CSD get_res sepcs
1 sep
f
.8 lw
0 lc
1 lj
10 ml
[] 0 dsh
false sadj
108.57 15.2242 mo
105.07 15.2242 li
@
GCWIZZ+*1 [10 0 0 -10 0 0 ]msf
85.6638 19.0208 mo
(%!")
[6.36102 3.18093 0 ]xsh
1 lw
2 lc
110.811 170.437 mo
110.811 211.88 li
0 .990631 1 .000396735 cmyk
@
110.811 142.742 mo
110.811 101.278 li
@
110.251 211.881 mo
111.372 211.881 li
@
110.251 101.278 mo
111.372 101.278 li
@
113.053 168.347 mo
113.053 201.667 li
@
113.053 146.133 mo
113.053 112.82 li
@
112.493 201.667 mo
113.614 201.667 li
@
112.493 112.82 mo
113.614 112.82 li
@
115.295 159.247 mo
115.295 195.027 li
@
115.295 135.393 mo
115.295 99.6932 li
@
114.735 195.027 mo
115.856 195.027 li
@
114.735 99.6932 mo
115.856 99.6932 li
@
117.537 170.661 mo
117.537 205.823 li
@
117.537 147.215 mo
117.537 112.051 li
@
116.977 205.824 mo
118.098 205.824 li
@
116.977 112.051 mo
118.098 112.051 li
@
119.779 170.758 mo
119.779 203.176 li
@
119.779 149.139 mo
119.779 116.715 li
@
119.219 203.176 mo
120.34 203.176 li
@
119.219 116.715 mo
120.34 116.715 li
@
122.021 165.237 mo
122.021 198.73 li
@
122.021 142.903 mo
122.021 109.412 li
@
121.461 198.73 mo
122.582 198.73 li
@
121.461 109.412 mo
122.582 109.412 li
@
124.263 166.511 mo
124.263 198.717 li
@
124.263 145.005 mo
124.263 112.858 li
@
123.703 198.717 mo
124.824 198.717 li
@
123.703 112.858 mo
124.824 112.858 li
@
126.505 162.798 mo
126.505 197.347 li
@
126.505 139.751 mo
126.505 105.204 li
@
125.945 197.347 mo
127.066 197.347 li
@
125.945 105.204 mo
127.066 105.204 li
@
128.747 163.775 mo
128.747 196.391 li
@
128.747 142.022 mo
128.747 109.454 li
@
128.187 196.391 mo
129.308 196.391 li
@
128.187 109.454 mo
129.308 109.454 li
@
130.989 162.186 mo
130.989 192.938 li
@
130.989 141.661 mo
130.989 110.913 li
@
130.429 192.938 mo
131.55 192.938 li
@
130.429 110.913 mo
131.55 110.913 li
@
133.231 168.099 mo
133.231 198.255 li
@
133.231 147.979 mo
133.231 117.835 li
@
132.671 198.255 mo
133.792 198.255 li
@
132.671 117.835 mo
133.792 117.835 li
@
135.473 164.899 mo
135.473 194.937 li
@
135.473 144.837 mo
135.473 114.745 li
@
134.913 194.937 mo
136.034 194.937 li
@
134.913 114.745 mo
136.034 114.745 li
@
137.715 162.895 mo
137.715 193.41 li
@
137.715 142.543 mo
137.715 112.031 li
@
137.155 193.41 mo
138.276 193.41 li
@
137.155 112.031 mo
138.276 112.031 li
@
139.957 159.314 mo
139.957 193.714 li
@
139.957 136.302 mo
139.957 101.793 li
@
139.397 193.713 mo
140.518 193.713 li
@
139.397 101.793 mo
140.518 101.793 li
@
142.199 160.623 mo
142.199 192.263 li
@
142.199 139.514 mo
142.199 107.889 li
@
141.639 192.263 mo
142.76 192.263 li
@
141.639 107.889 mo
142.76 107.889 li
@
144.441 161.7 mo
144.441 194.555 li
@
144.441 139.778 mo
144.441 106.938 li
@
143.881 194.554 mo
145.002 194.554 li
@
143.881 106.938 mo
145.002 106.938 li
@
146.683 159.407 mo
146.683 188.864 li
@
146.683 139.764 mo
146.683 110.306 li
@
146.123 188.864 mo
147.244 188.864 li
@
146.123 110.306 mo
147.244 110.306 li
@
148.925 166.315 mo
148.925 199.901 li
@
148.925 143.889 mo
148.925 110.258 li
@
148.365 199.901 mo
149.486 199.901 li
@
148.365 110.258 mo
149.486 110.258 li
@
151.167 159.15 mo
151.167 193.923 li
@
151.167 135.952 mo
151.167 101.184 li
@
150.607 193.922 mo
151.728 193.922 li
@
150.607 101.183 mo
151.728 101.183 li
@
153.409 162.005 mo
153.409 198.056 li
@
153.409 137.95 mo
153.409 101.891 li
@
152.849 198.056 mo
153.97 198.056 li
@
152.849 101.891 mo
153.97 101.891 li
@
155.651 162.045 mo
155.651 192.819 li
@
155.651 141.52 mo
155.651 110.734 li
@
155.091 192.819 mo
156.212 192.819 li
@
155.091 110.734 mo
156.212 110.734 li
@
157.893 158.25 mo
157.893 191.428 li
@
157.893 136.115 mo
157.893 102.945 li
@
157.333 191.428 mo
158.454 191.428 li
@
157.333 102.945 mo
158.454 102.945 li
@
160.135 169.14 mo
160.135 201.606 li
@
160.135 147.465 mo
160.135 114.993 li
@
159.575 201.606 mo
160.696 201.606 li
@
159.575 114.992 mo
160.696 114.992 li
@
162.377 164.13 mo
162.377 195.618 li
@
162.377 143.108 mo
162.377 111.643 li
@
161.817 195.618 mo
162.938 195.618 li
@
161.817 111.643 mo
162.938 111.643 li
@
164.619 164.089 mo
164.619 197.671 li
@
164.619 141.693 mo
164.619 108.12 li
@
164.059 197.671 mo
165.18 197.671 li
@
164.059 108.12 mo
165.18 108.12 li
@
166.861 163.528 mo
166.861 198.55 li
@
166.861 139.996 mo
166.861 104.749 li
@
166.301 198.55 mo
167.422 198.55 li
@
166.301 104.75 mo
167.422 104.75 li
@
169.103 162.134 mo
169.103 191.701 li
@
169.103 142.414 mo
169.103 112.851 li
@
168.543 191.701 mo
169.664 191.701 li
@
168.543 112.851 mo
169.664 112.851 li
@
171.345 163.905 mo
171.345 192.921 li
@
171.345 144.525 mo
171.345 115.479 li
@
170.785 192.92 mo
171.906 192.92 li
@
170.785 115.479 mo
171.906 115.479 li
@
173.587 163.343 mo
173.587 194.359 li
@
173.587 142.658 mo
173.587 111.64 li
@
173.027 194.358 mo
174.148 194.358 li
@
173.027 111.639 mo
174.148 111.639 li
@
175.829 162.771 mo
175.829 196.008 li
@
175.829 140.57 mo
175.829 107.276 li
@
175.269 196.008 mo
176.39 196.008 li
@
175.269 107.276 mo
176.39 107.276 li
@
178.071 158.29 mo
178.071 194.422 li
@
178.071 134.169 mo
178.071 98.0083 li
@
177.511 194.422 mo
178.632 194.422 li
@
177.511 98.0092 mo
178.632 98.0092 li
@
180.313 164.048 mo
180.313 196.556 li
@
180.313 142.373 mo
180.313 109.915 li
@
179.753 196.556 mo
180.874 196.556 li
@
179.753 109.915 mo
180.874 109.915 li
@
182.555 151.234 mo
182.555 192.17 li
@
182.555 123.929 mo
182.555 83.0053 li
@
181.995 192.171 mo
183.116 192.171 li
@
181.995 83.0063 mo
183.116 83.0063 li
@
184.797 157.82 mo
184.797 197.726 li
@
184.797 131.212 mo
184.797 91.3463 li
@
184.237 197.726 mo
185.358 197.726 li
@
184.237 91.3463 mo
185.358 91.3463 li
@
187.039 153.45 mo
187.039 197.093 li
@
187.039 124.335 mo
187.039 80.6903 li
@
186.479 197.093 mo
187.6 197.093 li
@
186.479 80.6903 mo
187.6 80.6903 li
@
189.281 157.569 mo
189.281 201.763 li
@
189.281 128.083 mo
189.281 83.8773 li
@
188.721 201.764 mo
189.842 201.764 li
@
188.721 83.8783 mo
189.842 83.8783 li
@
191.523 155.504 mo
191.523 200.773 li
@
191.523 125.308 mo
191.523 80.0623 li
@
190.963 200.773 mo
192.084 200.773 li
@
190.963 80.0623 mo
192.084 80.0623 li
@
193.765 160.31 mo
193.765 205.011 li
@
193.765 130.474 mo
193.765 85.7283 li
@
193.205 205.01 mo
194.326 205.01 li
@
193.205 85.7273 mo
194.326 85.7273 li
@
196.007 158.507 mo
196.007 203.069 li
@
196.007 128.799 mo
196.007 84.2433 li
@
195.447 203.069 mo
196.568 203.069 li
@
195.447 84.2433 mo
196.568 84.2433 li
@
198.249 161.422 mo
198.249 200.93 li
@
198.249 135.08 mo
198.249 95.5753 li
@
197.689 200.93 mo
198.81 200.93 li
@
197.689 95.5753 mo
198.81 95.5753 li
@
200.491 158.391 mo
200.491 198.419 li
@
200.491 131.706 mo
200.491 91.7073 li
@
199.931 198.419 mo
201.052 198.419 li
@
199.931 91.7073 mo
201.052 91.7073 li
@
202.733 159.895 mo
202.733 205.56 li
@
202.733 129.409 mo
202.733 83.7033 li
@
202.173 205.56 mo
203.294 205.56 li
@
202.173 83.7033 mo
203.294 83.7033 li
@
204.975 152.666 mo
204.975 200.642 li
@
204.975 120.677 mo
204.975 72.7043 li
@
204.415 200.642 mo
205.536 200.642 li
@
204.415 72.7043 mo
205.536 72.7043 li
@
207.217 153.78 mo
207.217 197.309 li
@
207.217 124.74 mo
207.217 81.2003 li
@
206.657 197.309 mo
207.778 197.309 li
@
206.657 81.2003 mo
207.778 81.2003 li
@
209.459 155.723 mo
209.459 200.962 li
@
209.459 125.543 mo
209.459 80.4203 li
@
208.899 200.961 mo
210.02 200.961 li
@
208.899 80.4203 mo
210.02 80.4203 li
@
211.701 160.459 mo
211.701 206.645 li
@
211.701 129.664 mo
211.701 83.4993 li
@
211.141 206.645 mo
212.262 206.645 li
@
211.141 83.4993 mo
212.262 83.4993 li
@
213.943 158.715 mo
213.943 202.822 li
@
213.943 129.29 mo
213.943 85.1693 li
@
213.383 202.821 mo
214.504 202.821 li
@
213.383 85.1683 mo
214.504 85.1683 li
@
216.185 150.851 mo
216.185 202.023 li
@
216.185 116.729 mo
216.185 65.6083 li
@
215.625 202.023 mo
216.746 202.023 li
@
215.625 65.6083 mo
216.746 65.6083 li
@
218.427 160.327 mo
218.427 215.152 li
@
218.427 123.701 mo
218.427 68.9423 li
@
217.867 215.151 mo
218.988 215.151 li
@
217.867 68.9423 mo
218.988 68.9423 li
@
220.669 143.134 mo
220.669 189.924 li
@
220.669 111.934 mo
220.669 65.1983 li
@
220.109 189.924 mo
221.23 189.924 li
@
220.109 65.1983 mo
221.23 65.1983 li
@
222.875 154.241 mo
222.875 202.169 li
@
222.875 122.237 mo
222.875 74.2332 li
@
222.315 202.169 mo
223.436 202.169 li
@
222.315 74.2332 mo
223.436 74.2332 li
@
225.117 154.838 mo
225.117 203.948 li
@
225.117 122.026 mo
225.117 72.8222 li
@
224.557 203.949 mo
225.678 203.949 li
@
224.557 72.8232 mo
225.678 72.8232 li
@
227.359 144.046 mo
227.359 198.251 li
@
227.359 107.904 mo
227.359 53.7281 li
@
226.799 198.251 mo
227.92 198.251 li
@
226.799 53.7281 mo
227.92 53.7281 li
@
229.601 141.815 mo
229.601 195.714 li
@
229.601 105.869 mo
229.601 52.0012 li
@
229.041 195.715 mo
230.162 195.715 li
@
229.041 52.0012 mo
230.162 52.0012 li
@
231.843 153.326 mo
231.843 201.936 li
@
231.843 120.919 mo
231.843 72.3642 li
@
231.283 201.936 mo
232.404 201.936 li
@
231.283 72.3642 mo
232.404 72.3642 li
@
234.085 154.045 mo
234.085 203.201 li
@
234.085 121.269 mo
234.085 72.1302 li
@
233.525 203.201 mo
234.646 203.201 li
@
233.525 72.1311 mo
234.646 72.1311 li
@
236.327 148.627 mo
236.327 201.089 li
@
236.327 113.632 mo
236.327 61.1881 li
@
235.767 201.088 mo
236.888 201.088 li
@
235.767 61.1881 mo
236.888 61.1881 li
@
238.569 152.104 mo
238.569 205.738 li
@
238.569 116.312 mo
238.569 62.6361 li
@
238.009 205.738 mo
239.13 205.738 li
@
238.009 62.6361 mo
239.13 62.6361 li
@
240.811 152.29 mo
240.811 207.237 li
@
240.811 115.65 mo
240.811 60.7041 li
@
240.251 207.236 mo
241.372 207.236 li
@
240.251 60.7041 mo
241.372 60.7041 li
@
243.053 150.503 mo
243.053 201.319 li
@
243.053 116.625 mo
243.053 65.9012 li
@
242.493 201.319 mo
243.614 201.319 li
@
242.493 65.9012 mo
243.614 65.9012 li
@
245.295 149.643 mo
245.295 196.468 li
@
245.295 118.392 mo
245.295 71.5302 li
@
244.735 196.469 mo
245.856 196.469 li
@
244.735 71.5302 mo
245.856 71.5302 li
@
247.537 149.14 mo
247.537 199.841 li
@
247.537 115.311 mo
247.537 64.7302 li
@
246.977 199.841 mo
248.098 199.841 li
@
246.977 64.7302 mo
248.098 64.7302 li
@
249.779 149.516 mo
249.779 195.217 li
@
249.779 119.044 mo
249.779 73.3552 li
@
249.219 195.217 mo
250.34 195.217 li
@
249.219 73.3552 mo
250.34 73.3552 li
@
252.021 153.12 mo
252.021 197.248 li
@
252.021 123.698 mo
252.021 79.6452 li
@
251.461 197.248 mo
252.582 197.248 li
@
251.461 79.6452 mo
252.582 79.6452 li
@
254.263 144.055 mo
254.263 193.532 li
@
254.263 111.065 mo
254.263 61.6112 li
@
253.703 193.532 mo
254.824 193.532 li
@
253.703 61.6112 mo
254.824 61.6112 li
@
256.505 148.821 mo
256.505 196.558 li
@
256.505 116.993 mo
256.505 69.2792 li
@
255.945 196.558 mo
257.066 196.558 li
@
255.945 69.2792 mo
257.066 69.2792 li
@
258.747 154.968 mo
258.747 204.082 li
@
258.747 122.218 mo
258.747 73.0982 li
@
258.187 204.081 mo
259.308 204.081 li
@
258.187 73.0972 mo
259.308 73.0972 li
@
260.989 154.606 mo
260.989 200.926 li
@
260.989 123.721 mo
260.989 77.4332 li
@
260.429 200.925 mo
261.55 200.925 li
@
260.429 77.4332 mo
261.55 77.4332 li
@
263.231 144.471 mo
263.231 194.001 li
@
263.231 111.369 mo
263.231 61.7462 li
@
262.671 194 mo
263.792 194 li
@
262.671 61.7452 mo
263.792 61.7452 li
@
265.473 155.365 mo
265.473 212.178 li
@
265.473 117.295 mo
265.473 60.2312 li
@
264.913 212.177 mo
266.034 212.177 li
@
264.913 60.2312 mo
266.034 60.2312 li
@
267.715 153.519 mo
267.715 201.279 li
@
267.715 121.607 mo
267.715 73.7652 li
@
267.155 201.279 mo
268.276 201.279 li
@
267.155 73.7652 mo
268.276 73.7652 li
@
269.957 151.462 mo
269.957 199.454 li
@
269.957 119.462 mo
269.957 71.6242 li
@
269.397 199.454 mo
270.518 199.454 li
@
269.397 71.6242 mo
270.518 71.6242 li
@
272.199 154.138 mo
272.199 208.978 li
@
272.199 117.575 mo
272.199 62.7582 li
@
271.639 208.978 mo
272.76 208.978 li
@
271.639 62.7572 mo
272.76 62.7572 li
@
274.441 144.311 mo
274.441 199.446 li
@
274.441 107.546 mo
274.441 52.5602 li
@
273.881 199.446 mo
275.002 199.446 li
@
273.881 52.5602 mo
275.002 52.5602 li
@
276.683 150.783 mo
276.683 196.387 li
@
276.683 120.374 mo
276.683 74.7812 li
@
276.123 196.387 mo
277.244 196.387 li
@
276.123 74.7812 mo
277.244 74.7812 li
@
278.925 151.336 mo
278.925 204.397 li
@
278.925 115.796 mo
278.925 62.4902 li
@
278.365 204.397 mo
279.486 204.397 li
@
278.365 62.4912 mo
279.486 62.4912 li
@
281.167 153.931 mo
281.167 205.918 li
@
281.167 119.243 mo
281.167 67.2992 li
@
280.607 205.918 mo
281.728 205.918 li
@
280.607 67.2992 mo
281.728 67.2992 li
@
283.409 146.893 mo
283.409 197.567 li
@
283.409 113.11 mo
283.409 62.4472 li
@
282.849 197.568 mo
283.97 197.568 li
@
282.849 62.4482 mo
283.97 62.4482 li
@
285.651 153.004 mo
285.651 207.136 li
@
285.651 116.915 mo
285.651 62.7972 li
@
285.091 207.136 mo
286.212 207.136 li
@
285.091 62.7972 mo
286.212 62.7972 li
@
287.893 154.466 mo
287.893 201.083 li
@
287.893 123.375 mo
287.893 76.7562 li
@
287.333 201.083 mo
288.454 201.083 li
@
287.333 76.7552 mo
288.454 76.7552 li
@
290.135 149.819 mo
290.135 198.312 li
@
290.135 117.489 mo
290.135 69.0442 li
@
289.575 198.312 mo
290.696 198.312 li
@
289.575 69.0442 mo
290.696 69.0442 li
@
292.377 153.54 mo
292.377 205.352 li
@
292.377 118.994 mo
292.377 67.4802 li
@
291.817 205.352 mo
292.938 205.352 li
@
291.817 67.4802 mo
292.938 67.4802 li
@
294.619 153.708 mo
294.619 202.377 li
@
294.619 121.258 mo
294.619 72.6512 li
@
294.059 202.376 mo
295.18 202.376 li
@
294.059 72.6512 mo
295.18 72.6512 li
@
296.861 154.777 mo
296.861 211.895 li
@
296.861 116.659 mo
296.861 59.6132 li
@
296.301 211.895 mo
297.422 211.895 li
@
296.301 59.6132 mo
297.422 59.6132 li
@
299.103 149.583 mo
299.103 203.502 li
@
299.103 113.623 mo
299.103 59.7552 li
@
298.543 203.503 mo
299.664 203.503 li
@
298.543 59.7562 mo
299.664 59.7562 li
@
301.345 151.482 mo
301.345 203.653 li
@
301.345 116.697 mo
301.345 64.5342 li
@
300.785 203.652 mo
301.906 203.652 li
@
300.785 64.5342 mo
301.906 64.5342 li
@
303.587 152.381 mo
303.587 201.221 li
@
303.587 119.788 mo
303.587 70.9552 li
@
303.027 201.221 mo
304.148 201.221 li
@
303.027 70.9552 mo
304.148 70.9552 li
@
305.829 145.624 mo
305.829 197.598 li
@
305.829 110.971 mo
305.829 59.2822 li
@
305.269 197.598 mo
306.39 197.598 li
@
305.269 59.2822 mo
306.39 59.2822 li
@
308.071 156.597 mo
308.071 208.152 li
@
308.071 122.167 mo
308.071 70.5272 li
@
307.511 208.151 mo
308.632 208.151 li
@
307.511 70.5272 mo
308.632 70.5272 li
@
310.313 144.338 mo
310.313 198.322 li
@
310.313 108.334 mo
310.313 54.4352 li
@
309.753 198.322 mo
310.874 198.322 li
@
309.753 54.4362 mo
310.874 54.4362 li
@
312.555 145.46 mo
312.555 197.813 li
@
312.555 110.536 mo
312.555 58.1652 li
@
311.995 197.813 mo
313.116 197.813 li
@
311.995 58.1642 mo
313.116 58.1642 li
@
314.797 147.849 mo
314.797 193.033 li
@
314.797 117.723 mo
314.797 72.6512 li
@
314.237 193.033 mo
315.358 193.033 li
@
314.237 72.6512 mo
315.358 72.6512 li
@
317.039 156.588 mo
317.039 203.26 li
@
317.039 125.468 mo
317.039 78.8132 li
@
316.479 203.26 mo
317.6 203.26 li
@
316.479 78.8132 mo
317.6 78.8132 li
@
319.281 149.084 mo
319.281 204.788 li
@
319.281 111.946 mo
319.281 56.2982 li
@
318.721 204.788 mo
319.842 204.788 li
@
318.721 56.2992 mo
319.842 56.2992 li
@
321.523 149.731 mo
321.523 194.786 li
@
321.523 119.687 mo
321.523 74.6202 li
@
320.963 194.786 mo
322.084 194.786 li
@
320.963 74.6202 mo
322.084 74.6202 li
@
323.765 155.975 mo
323.765 206.791 li
@
323.765 122.075 mo
323.765 71.2322 li
@
323.205 206.791 mo
324.326 206.791 li
@
323.205 71.2312 mo
324.326 71.2312 li
@
326.007 147.869 mo
326.007 194.461 li
@
326.007 116.805 mo
326.007 70.2962 li
@
325.447 194.46 mo
326.568 194.46 li
@
325.447 70.2962 mo
326.568 70.2962 li
@
328.249 148.678 mo
328.249 201.75 li
@
328.249 113.267 mo
328.249 60.1752 li
@
327.689 201.75 mo
328.81 201.75 li
@
327.689 60.1762 mo
328.81 60.1762 li
@
330.491 151.681 mo
330.491 204.17 li
@
330.491 116.671 mo
330.491 64.2162 li
@
329.931 204.171 mo
331.052 204.171 li
@
329.931 64.2172 mo
331.052 64.2172 li
@
332.733 152.893 mo
332.733 197.434 li
@
332.733 123.194 mo
332.733 78.6462 li
@
332.173 197.434 mo
333.294 197.434 li
@
332.173 78.6472 mo
333.294 78.6472 li
@
334.938 175.117 mo
334.938 227.941 li
.853361 .487251 .0680247 .00198367 cmyk
@
334.938 139.88 mo
334.938 87.3592 li
@
334.378 227.941 mo
335.499 227.941 li
@
334.378 87.3592 mo
335.499 87.3592 li
@
337.18 164.676 mo
337.18 214.775 li
@
337.18 131.26 mo
337.18 81.1562 li
@
336.62 214.775 mo
337.741 214.775 li
@
336.62 81.1562 mo
337.741 81.1562 li
@
339.422 155.797 mo
339.422 206.254 li
@
339.422 122.133 mo
339.422 71.6631 li
@
338.862 206.253 mo
339.983 206.253 li
@
338.862 71.6631 mo
339.983 71.6631 li
@
341.664 164.791 mo
341.664 213.18 li
@
341.664 132.524 mo
341.664 84.1901 li
@
341.104 213.181 mo
342.225 213.181 li
@
341.104 84.1911 mo
342.225 84.1911 li
@
343.906 165.317 mo
343.906 212.636 li
@
343.906 133.75 mo
343.906 86.4531 li
@
343.346 212.636 mo
344.467 212.636 li
@
343.346 86.4531 mo
344.467 86.4531 li
@
346.148 158.993 mo
346.148 204.38 li
@
346.148 128.731 mo
346.148 83.4131 li
@
345.588 204.379 mo
346.709 204.379 li
@
345.588 83.4121 mo
346.709 83.4121 li
@
348.39 162.936 mo
348.39 210.636 li
@
348.39 131.078 mo
348.39 83.3102 li
@
347.83 210.636 mo
348.951 210.636 li
@
347.83 83.3102 mo
348.951 83.3102 li
@
350.632 158.259 mo
350.632 207.289 li
@
350.632 125.559 mo
350.632 76.5562 li
@
350.072 207.289 mo
351.193 207.289 li
@
350.072 76.5562 mo
351.193 76.5562 li
@
352.874 160.54 mo
352.874 205.115 li
@
352.874 130.818 mo
352.874 86.2522 li
@
352.314 205.115 mo
353.435 205.115 li
@
352.314 86.2521 mo
353.435 86.2521 li
@
355.116 158.522 mo
355.116 205.184 li
@
355.116 127.404 mo
355.116 80.7441 li
@
354.556 205.185 mo
355.677 205.185 li
@
354.556 80.7451 mo
355.677 80.7451 li
@
357.358 163.988 mo
357.358 209.45 li
@
357.358 133.667 mo
357.358 88.1881 li
@
356.798 209.451 mo
357.919 209.451 li
@
356.798 88.1881 mo
357.919 88.1881 li
@
359.6 161.505 mo
359.6 207.857 li
@
359.6 130.534 mo
359.6 84.0851 li
@
359.04 207.856 mo
360.161 207.856 li
@
359.04 84.0851 mo
360.161 84.0851 li
@
361.842 160.235 mo
361.842 203.242 li
@
361.842 131.484 mo
361.842 88.3701 li
@
361.282 203.243 mo
362.403 203.243 li
@
361.282 88.3701 mo
362.403 88.3701 li
@
364.084 156.224 mo
364.084 205.723 li
@
364.084 123.205 mo
364.084 73.7641 li
@
363.524 205.724 mo
364.645 205.724 li
@
363.524 73.7641 mo
364.645 73.7641 li
@
366.326 156.751 mo
366.326 202.631 li
@
366.326 126.106 mo
366.326 80.1791 li
@
365.766 202.631 mo
366.887 202.631 li
@
365.766 80.1801 mo
366.887 80.1801 li
@
368.568 158.258 mo
368.568 206.41 li
@
368.568 126.138 mo
368.568 77.9961 li
@
368.008 206.411 mo
369.129 206.411 li
@
368.008 77.9961 mo
369.129 77.9961 li
@
370.81 155.43 mo
370.81 204.317 li
@
370.81 122.815 mo
370.81 73.9081 li
@
370.25 204.316 mo
371.371 204.316 li
@
370.25 73.9081 mo
371.371 73.9081 li
@
373.052 159.833 mo
373.052 204.651 li
@
373.052 129.945 mo
373.052 85.1671 li
@
372.492 204.652 mo
373.613 204.652 li
@
372.492 85.1671 mo
373.613 85.1671 li
@
375.294 154.684 mo
375.294 201.966 li
@
375.294 123.143 mo
375.294 75.8361 li
@
374.734 201.966 mo
375.855 201.966 li
@
374.734 75.8351 mo
375.855 75.8351 li
@
377.536 156.372 mo
377.536 207.904 li
@
377.536 122.012 mo
377.536 70.5261 li
@
376.976 207.904 mo
378.097 207.904 li
@
376.976 70.5261 mo
378.097 70.5261 li
@
379.778 158.205 mo
379.778 201.197 li
@
379.778 129.52 mo
379.778 86.6011 li
@
379.218 201.196 mo
380.339 201.196 li
@
379.218 86.6011 mo
380.339 86.6011 li
@
382.02 154.528 mo
382.02 200.108 li
@
382.02 124.076 mo
382.02 78.4361 li
@
381.46 200.108 mo
382.581 200.108 li
@
381.46 78.4361 mo
382.581 78.4361 li
@
384.262 163.68 mo
384.262 209.776 li
@
384.262 132.879 mo
384.262 86.7021 li
@
383.702 209.776 mo
384.823 209.776 li
@
383.702 86.7021 mo
384.823 86.7021 li
@
386.504 158.907 mo
386.504 201.844 li
@
386.504 130.28 mo
386.504 87.3491 li
@
385.944 201.844 mo
387.065 201.844 li
@
385.944 87.3491 mo
387.065 87.3491 li
@
388.746 159.184 mo
388.746 208.755 li
@
388.746 126.126 mo
388.746 76.5661 li
@
388.186 208.756 mo
389.307 208.756 li
@
388.186 76.5661 mo
389.307 76.5661 li
@
390.988 157.428 mo
390.988 204.539 li
@
390.988 126.006 mo
390.988 78.9071 li
@
390.428 204.538 mo
391.549 204.538 li
@
390.428 78.9071 mo
391.549 78.9071 li
@
393.23 157.481 mo
393.23 201.647 li
@
393.23 128.022 mo
393.23 83.8481 li
@
392.67 201.647 mo
393.791 201.647 li
@
392.67 83.8481 mo
393.791 83.8481 li
@
395.472 159.409 mo
395.472 202.105 li
@
395.472 130.856 mo
395.472 88.0821 li
@
394.912 202.104 mo
396.033 202.104 li
@
394.912 88.0811 mo
396.033 88.0811 li
@
397.714 158.751 mo
397.714 205.104 li
@
397.714 127.834 mo
397.714 81.5801 li
@
397.154 205.105 mo
398.275 205.105 li
@
397.154 81.5801 mo
398.275 81.5801 li
@
399.956 156.334 mo
399.956 201 li
@
399.956 126.453 mo
399.956 81.6511 li
@
399.396 201 mo
400.517 201 li
@
399.396 81.6521 mo
400.517 81.6521 li
@
402.198 154.02 mo
402.198 203.178 li
@
402.198 121.212 mo
402.198 72.1601 li
@
401.638 203.178 mo
402.759 203.178 li
@
401.638 72.1601 mo
402.759 72.1601 li
@
404.44 156.537 mo
404.44 202.596 li
@
404.44 125.83 mo
404.44 79.7771 li
@
403.88 202.596 mo
405.001 202.596 li
@
403.88 79.7771 mo
405.001 79.7771 li
@
406.682 147.461 mo
406.682 205.011 li
@
406.682 109.081 mo
406.682 51.5291 li
@
406.122 205.011 mo
407.243 205.011 li
@
406.122 51.5291 mo
407.243 51.5291 li
@
408.924 151.259 mo
408.924 206.295 li
@
408.924 114.568 mo
408.924 59.6891 li
@
408.364 206.295 mo
409.485 206.295 li
@
408.364 59.6891 mo
409.485 59.6891 li
@
411.166 146.74 mo
411.166 206.275 li
@
411.166 106.892 mo
411.166 47.1711 li
@
410.606 206.275 mo
411.727 206.275 li
@
410.606 47.1711 mo
411.727 47.1711 li
@
413.408 151.362 mo
413.408 214.648 li
@
413.408 109.161 mo
413.408 45.8771 li
@
412.848 214.648 mo
413.969 214.648 li
@
412.848 45.8771 mo
413.969 45.8771 li
@
415.65 148.18 mo
415.65 210.323 li
@
415.65 106.729 mo
415.65 44.5541 li
@
415.09 210.323 mo
416.211 210.323 li
@
415.09 44.5531 mo
416.211 44.5531 li
@
417.892 151.328 mo
417.892 209.017 li
@
417.892 112.834 mo
417.892 55.2091 li
@
417.332 209.017 mo
418.453 209.017 li
@
417.332 55.2081 mo
418.453 55.2081 li
@
420.134 150.406 mo
420.134 208.458 li
@
420.134 111.68 mo
420.134 53.7051 li
@
419.574 208.458 mo
420.695 208.458 li
@
419.574 53.7051 mo
420.695 53.7051 li
@
422.376 152.459 mo
422.376 206.172 li
@
422.376 116.64 mo
422.376 62.9651 li
@
421.816 206.172 mo
422.937 206.172 li
@
421.816 62.9651 mo
422.937 62.9651 li
@
424.618 150.955 mo
424.618 209.534 li
@
424.618 111.831 mo
424.618 53.1641 li
@
424.058 209.534 mo
425.179 209.534 li
@
424.058 53.1641 mo
425.179 53.1641 li
@
426.86 152.901 mo
426.86 215.251 li
@
426.86 111.245 mo
426.86 48.8181 li
@
426.3 215.251 mo
427.421 215.251 li
@
426.3 48.8181 mo
427.421 48.8181 li
@
429.102 143.657 mo
429.102 206.577 li
@
429.102 101.679 mo
429.102 38.7231 li
@
428.542 206.577 mo
429.663 206.577 li
@
428.542 38.7231 mo
429.663 38.7231 li
@
431.344 146.525 mo
431.344 206.482 li
@
431.344 106.52 mo
431.344 46.5291 li
@
430.784 206.483 mo
431.905 206.483 li
@
430.784 46.5291 mo
431.905 46.5291 li
@
433.586 149.021 mo
433.586 209.064 li
@
433.586 108.964 mo
433.586 48.8861 li
@
433.026 209.064 mo
434.147 209.064 li
@
433.026 48.8861 mo
434.147 48.8861 li
@
435.828 151.308 mo
435.828 210.336 li
@
435.828 111.94 mo
435.828 52.9871 li
@
435.268 210.336 mo
436.389 210.336 li
@
435.268 52.9871 mo
436.389 52.9871 li
@
438.07 151.907 mo
438.07 214.016 li
@
438.07 110.453 mo
438.07 48.3431 li
@
437.51 214.016 mo
438.631 214.016 li
@
437.51 48.3431 mo
438.631 48.3431 li
@
440.312 134.564 mo
440.312 206.373 li
@
440.312 86.6771 mo
440.312 14.9151 li
@
439.752 206.373 mo
440.873 206.373 li
@
439.752 14.9151 mo
440.873 14.9151 li
@
442.554 149.636 mo
442.554 218.556 li
@
442.554 103.68 mo
442.554 34.7701 li
@
441.994 218.556 mo
443.115 218.556 li
@
441.994 34.7701 mo
443.115 34.7701 li
@
444.796 133.378 mo
444.796 197 li
@
444.796 90.9231 mo
444.796 27.3091 li
@
444.236 197.001 mo
445.357 197.001 li
@
444.236 27.3091 mo
445.357 27.3091 li
@
447.002 146.538 mo
447.002 210.919 li
@
447.002 103.582 mo
447.002 39.2342 li
@
446.442 210.918 mo
447.563 210.918 li
@
446.442 39.2342 mo
447.563 39.2342 li
@
449.244 146.387 mo
449.244 213.401 li
@
449.244 101.707 mo
449.244 34.9352 li
@
448.684 213.402 mo
449.805 213.402 li
@
448.684 34.9352 mo
449.805 34.9352 li
@
451.486 140.269 mo
451.486 216.788 li
@
451.486 89.2411 mo
451.486 12.7321 li
@
450.926 216.788 mo
452.047 216.788 li
@
450.926 12.7321 mo
452.047 12.7321 li
@
453.728 134.898 mo
453.728 206.38 li
@
453.728 87.2162 mo
453.728 15.7032 li
@
453.168 206.381 mo
454.289 206.381 li
@
453.168 15.7042 mo
454.289 15.7042 li
@
455.97 142.911 mo
455.97 202.286 li
@
455.97 103.258 mo
455.97 43.8272 li
@
455.41 202.286 mo
456.531 202.286 li
@
455.41 43.8272 mo
456.531 43.8272 li
@
458.212 143.939 mo
458.212 207.549 li
@
458.212 101.492 mo
458.212 37.9512 li
@
457.652 207.549 mo
458.773 207.549 li
@
457.652 37.9511 mo
458.773 37.9511 li
@
460.454 140.863 mo
460.454 208.498 li
@
460.454 95.7672 mo
460.454 28.1461 li
@
459.894 208.498 mo
461.015 208.498 li
@
459.894 28.1461 mo
461.015 28.1461 li
@
462.696 141.051 mo
462.696 208.418 li
@
462.696 96.1351 mo
462.696 28.7702 li
@
462.136 208.418 mo
463.257 208.418 li
@
462.136 28.7701 mo
463.257 28.7701 li
@
464.938 146.019 mo
464.938 217.456 li
@
464.938 98.3731 mo
464.938 27.0981 li
@
464.378 217.456 mo
465.499 217.456 li
@
464.378 27.0981 mo
465.499 27.0981 li
@
467.18 142.464 mo
467.18 210.845 li
@
467.18 96.7531 mo
467.18 28.4061 li
@
466.62 210.845 mo
467.741 210.845 li
@
466.62 28.4062 mo
467.741 28.4062 li
@
469.422 141.984 mo
469.422 208.431 li
@
469.422 97.6672 mo
469.422 31.2702 li
@
468.862 208.431 mo
469.983 208.431 li
@
468.862 31.2711 mo
469.983 31.2711 li
@
471.664 141.162 mo
471.664 208.588 li
@
471.664 96.1771 mo
471.664 28.7262 li
@
471.104 208.588 mo
472.225 208.588 li
@
471.104 28.7261 mo
472.225 28.7261 li
@
473.906 141.103 mo
473.906 204.976 li
@
473.906 98.3621 mo
473.906 34.2681 li
@
473.346 204.976 mo
474.467 204.976 li
@
473.346 34.2681 mo
474.467 34.2681 li
@
476.148 147.349 mo
476.148 209.058 li
@
476.148 106.195 mo
476.148 44.4872 li
@
475.588 209.058 mo
476.709 209.058 li
@
475.588 44.4861 mo
476.709 44.4861 li
@
478.39 135.867 mo
478.39 199.216 li
@
478.39 93.6231 mo
478.39 30.2731 li
@
477.83 199.215 mo
478.951 199.215 li
@
477.83 30.2722 mo
478.951 30.2722 li
@
480.632 143.271 mo
480.632 207.269 li
@
480.632 100.515 mo
480.632 36.3912 li
@
480.072 207.268 mo
481.193 207.268 li
@
480.072 36.3901 mo
481.193 36.3901 li
@
482.874 144.275 mo
482.874 203.691 li
@
482.874 104.539 mo
482.874 44.9382 li
@
482.314 203.692 mo
483.435 203.692 li
@
482.314 44.9382 mo
483.435 44.9382 li
@
485.116 146.794 mo
485.116 208.238 li
@
485.116 105.806 mo
485.116 44.3312 li
@
484.556 208.237 mo
485.677 208.237 li
@
484.556 44.3311 mo
485.677 44.3311 li
@
487.358 139.081 mo
487.358 203.51 li
@
487.358 96.1261 mo
487.358 31.6971 li
@
486.798 203.51 mo
487.919 203.51 li
@
486.798 31.6971 mo
487.919 31.6971 li
@
489.6 144.399 mo
489.6 213.348 li
@
489.6 98.3211 mo
489.6 29.2071 li
@
489.04 213.348 mo
490.161 213.348 li
@
489.04 29.2081 mo
490.161 29.2081 li
@
491.842 142.455 mo
491.842 199.774 li
@
491.842 104.231 mo
491.842 46.9221 li
@
491.282 199.774 mo
492.403 199.774 li
@
491.282 46.9221 mo
492.403 46.9221 li
@
494.084 144.523 mo
494.084 206.81 li
@
494.084 102.961 mo
494.084 40.6221 li
@
493.524 206.81 mo
494.645 206.81 li
@
493.524 40.6221 mo
494.645 40.6221 li
@
496.326 147.129 mo
496.326 216.459 li
@
496.326 100.882 mo
496.326 31.5871 li
@
495.766 216.458 mo
496.887 216.458 li
@
495.766 31.5862 mo
496.887 31.5862 li
@
498.568 137.351 mo
498.568 208.199 li
@
498.568 90.1071 mo
498.568 19.2511 li
@
498.008 208.198 mo
499.129 208.198 li
@
498.008 19.2511 mo
499.129 19.2511 li
@
500.81 142.92 mo
500.81 202.084 li
@
500.81 103.463 mo
500.81 44.2891 li
@
500.25 202.084 mo
501.371 202.084 li
@
500.25 44.2881 mo
501.371 44.2881 li
@
503.052 142.554 mo
503.052 209.188 li
@
503.052 98.1061 mo
503.052 31.4731 li
@
502.492 209.188 mo
503.613 209.188 li
@
502.492 31.4731 mo
503.613 31.4731 li
@
505.294 147.063 mo
505.294 211.132 li
@
505.294 104.343 mo
505.294 40.3271 li
@
504.734 211.132 mo
505.855 211.132 li
@
504.734 40.3261 mo
505.855 40.3261 li
@
507.536 138.133 mo
507.536 202.074 li
@
507.536 95.4391 mo
507.536 31.4111 li
@
506.976 202.074 mo
508.097 202.074 li
@
506.976 31.4121 mo
508.097 31.4121 li
@
509.778 146.552 mo
509.778 215.651 li
@
509.778 100.379 mo
509.778 31.1271 li
@
509.218 215.651 mo
510.339 215.651 li
@
509.218 31.1261 mo
510.339 31.1261 li
@
512.02 146.164 mo
512.02 205.111 li
@
512.02 106.79 mo
512.02 47.7791 li
@
511.46 205.111 mo
512.581 205.111 li
@
511.46 47.7791 mo
512.581 47.7791 li
@
514.262 143.685 mo
514.262 206.884 li
@
514.262 101.545 mo
514.262 38.3552 li
@
513.702 206.884 mo
514.823 206.884 li
@
513.702 38.3551 mo
514.823 38.3551 li
@
516.504 145.171 mo
516.504 207.384 li
@
516.504 103.676 mo
516.504 41.4731 li
@
515.944 207.384 mo
517.065 207.384 li
@
515.944 41.4731 mo
517.065 41.4731 li
@
518.746 144.926 mo
518.746 205.374 li
@
518.746 104.62 mo
518.746 44.1862 li
@
518.186 205.374 mo
519.307 205.374 li
@
518.186 44.1861 mo
519.307 44.1861 li
@
520.988 142.99 mo
520.988 210.009 li
@
520.988 98.2951 mo
520.988 31.2921 li
@
520.428 210.009 mo
521.549 210.009 li
@
520.428 31.2921 mo
521.549 31.2921 li
@
523.23 141.321 mo
523.23 205.703 li
@
523.23 98.3941 mo
523.23 34.0041 li
@
522.67 205.703 mo
523.791 205.703 li
@
522.67 34.0041 mo
523.791 34.0041 li
@
525.472 144.963 mo
525.472 211.093 li
@
525.472 100.866 mo
525.472 34.7601 li
@
524.912 211.093 mo
526.033 211.093 li
@
524.912 34.7601 mo
526.033 34.7601 li
@
527.714 143.697 mo
527.714 204.188 li
@
527.714 103.23 mo
527.714 42.5611 li
@
527.154 204.188 mo
528.275 204.188 li
@
527.154 42.5611 mo
528.275 42.5611 li
@
529.956 138.569 mo
529.956 202.599 li
@
529.956 95.8711 mo
529.956 31.9051 li
@
529.396 202.599 mo
530.517 202.599 li
@
529.396 31.9051 mo
530.517 31.9051 li
@
532.198 147.177 mo
532.198 206.446 li
@
532.198 107.657 mo
532.198 48.4221 li
@
531.638 206.446 mo
532.759 206.446 li
@
531.638 48.4221 mo
532.759 48.4221 li
@
534.44 136.103 mo
534.44 201.601 li
@
534.44 92.3891 mo
534.44 26.8411 li
@
533.88 201.601 mo
535.001 201.601 li
@
533.88 26.8411 mo
535.001 26.8411 li
@
536.682 139.846 mo
536.682 205.831 li
@
536.682 95.8241 mo
536.682 29.8941 li
@
536.122 205.831 mo
537.243 205.831 li
@
536.122 29.8941 mo
537.243 29.8941 li
@
538.924 141.842 mo
538.924 203.192 li
@
538.924 100.924 mo
538.924 39.5491 li
@
538.364 203.192 mo
539.485 203.192 li
@
538.364 39.5491 mo
539.485 39.5491 li
@
541.166 147.833 mo
541.166 207.129 li
@
541.166 108.264 mo
541.166 48.9731 li
@
540.606 207.13 mo
541.727 207.13 li
@
540.606 48.9741 mo
541.727 48.9741 li
@
543.408 139.412 mo
543.408 207.195 li
@
543.408 94.2171 mo
543.408 26.6431 li
@
542.848 207.196 mo
543.969 207.196 li
@
542.848 26.6431 mo
543.969 26.6431 li
@
545.65 141.907 mo
545.65 198.406 li
@
545.65 104.234 mo
545.65 47.7491 li
@
545.09 198.406 mo
546.211 198.406 li
@
545.09 47.7491 mo
546.211 47.7491 li
@
547.892 145.187 mo
547.892 202.633 li
@
547.892 106.882 mo
547.892 49.5132 li
@
547.332 202.632 mo
548.453 202.632 li
@
547.332 49.5121 mo
548.453 49.5121 li
@
550.134 141.887 mo
550.134 201.256 li
@
550.134 102.305 mo
550.134 42.9951 li
@
549.574 201.256 mo
550.695 201.256 li
@
549.574 42.9951 mo
550.695 42.9951 li
@
552.376 141.602 mo
552.376 209.792 li
@
552.376 96.1171 mo
552.376 27.9442 li
@
551.816 209.791 mo
552.937 209.791 li
@
551.816 27.9442 mo
552.937 27.9442 li
@
554.618 140.741 mo
554.618 199.193 li
@
554.618 101.749 mo
554.618 43.3441 li
@
554.058 199.193 mo
555.179 199.193 li
@
554.058 43.3451 mo
555.179 43.3451 li
@
556.86 145.269 mo
556.86 201.41 li
@
556.86 107.821 mo
556.86 51.7031 li
@
556.3 201.41 mo
557.421 201.41 li
@
556.3 51.7031 mo
557.421 51.7031 li
@
559.065 174.489 mo
559.065 211.96 li
.878538 .2439 1 .131716 cmyk
@
559.065 149.489 mo
559.065 112.07 li
@
558.505 211.96 mo
559.626 211.96 li
@
558.505 112.07 mo
559.626 112.07 li
@
561.307 166.379 mo
561.307 198.784 li
@
561.307 144.759 mo
561.307 112.333 li
@
560.747 198.784 mo
561.868 198.784 li
@
560.747 112.333 mo
561.868 112.333 li
@
563.549 159.926 mo
563.549 194.11 li
@
563.549 137.043 mo
563.549 102.724 li
@
562.989 194.11 mo
564.11 194.11 li
@
562.989 102.724 mo
564.11 102.724 li
@
565.791 166.654 mo
565.791 197.929 li
@
565.791 145.762 mo
565.791 114.437 li
@
565.231 197.928 mo
566.352 197.928 li
@
565.231 114.436 mo
566.352 114.436 li
@
568.033 167.414 mo
568.033 200.076 li
@
568.033 145.625 mo
568.033 113.029 li
@
567.473 200.076 mo
568.594 200.076 li
@
567.473 113.029 mo
568.594 113.029 li
@
570.275 162.553 mo
570.275 192.83 li
@
570.275 142.365 mo
570.275 112.088 li
@
569.715 192.83 mo
570.836 192.83 li
@
569.715 112.088 mo
570.836 112.088 li
@
572.517 165.016 mo
572.517 195.933 li
@
572.517 144.368 mo
572.517 113.473 li
@
571.957 195.933 mo
573.078 195.933 li
@
571.957 113.474 mo
573.078 113.474 li
@
574.759 161.985 mo
574.759 194.794 li
@
574.759 140.108 mo
574.759 107.303 li
@
574.199 194.794 mo
575.32 194.794 li
@
574.199 107.303 mo
575.32 107.303 li
@
577.001 164.655 mo
577.001 196.506 li
@
577.001 143.401 mo
577.001 111.523 li
@
576.441 196.505 mo
577.562 196.505 li
@
576.441 111.523 mo
577.562 111.523 li
@
579.243 162.889 mo
579.243 196.293 li
@
579.243 140.578 mo
579.243 107.115 li
@
578.683 196.293 mo
579.804 196.293 li
@
578.683 107.114 mo
579.804 107.114 li
@
581.485 167.036 mo
581.485 199.281 li
@
581.485 145.497 mo
581.485 113.191 li
@
580.925 199.281 mo
582.046 199.281 li
@
580.925 113.191 mo
582.046 113.191 li
@
583.727 165.083 mo
583.727 197.927 li
@
583.727 143.161 mo
583.727 110.378 li
@
583.167 197.927 mo
584.288 197.927 li
@
583.167 110.378 mo
584.288 110.378 li
@
585.969 164.646 mo
585.969 196.167 li
@
585.969 143.624 mo
585.969 112.102 li
@
585.409 196.167 mo
586.53 196.167 li
@
585.409 112.102 mo
586.53 112.102 li
@
588.211 160.757 mo
588.211 195.227 li
@
588.211 137.739 mo
588.211 103.214 li
@
587.651 195.228 mo
588.772 195.228 li
@
587.651 103.215 mo
588.772 103.215 li
@
590.453 161.551 mo
590.453 194.279 li
@
590.453 139.694 mo
590.453 107.031 li
@
589.893 194.279 mo
591.014 194.279 li
@
589.893 107.031 mo
591.014 107.031 li
@
592.695 162.666 mo
592.695 196.283 li
@
592.695 140.239 mo
592.695 106.622 li
@
592.135 196.283 mo
593.256 196.283 li
@
592.135 106.622 mo
593.256 106.622 li
@
594.937 160.27 mo
594.937 194.16 li
@
594.937 137.655 mo
594.937 103.755 li
@
594.377 194.161 mo
595.498 194.161 li
@
594.377 103.755 mo
595.498 103.755 li
@
597.179 163.376 mo
597.179 194.478 li
@
597.179 142.615 mo
597.179 111.486 li
@
596.619 194.477 mo
597.74 194.477 li
@
596.619 111.486 mo
597.74 111.486 li
@
599.421 160.235 mo
599.421 194.363 li
@
599.421 137.467 mo
599.421 103.388 li
@
598.861 194.364 mo
599.982 194.364 li
@
598.861 103.388 mo
599.982 103.388 li
@
601.663 160.768 mo
601.663 196.131 li
@
601.663 137.183 mo
601.663 101.817 li
@
601.103 196.13 mo
602.224 196.13 li
@
601.103 101.816 mo
602.224 101.816 li
@
603.905 163.019 mo
603.905 193.352 li
@
603.905 142.753 mo
603.905 112.414 li
@
603.345 193.352 mo
604.466 193.352 li
@
603.345 112.414 mo
604.466 112.414 li
@
606.147 160.025 mo
606.147 193.169 li
@
606.147 137.921 mo
606.147 104.791 li
@
605.587 193.17 mo
606.708 193.17 li
@
605.587 104.791 mo
606.708 104.791 li
@
608.389 166.344 mo
608.389 198.763 li
@
608.389 144.699 mo
608.389 112.297 li
@
607.829 198.763 mo
608.95 198.763 li
@
607.829 112.297 mo
608.95 112.297 li
@
610.631 162.507 mo
610.631 192.463 li
@
610.631 142.526 mo
610.631 112.676 li
@
610.071 192.463 mo
611.192 192.463 li
@
610.071 112.676 mo
611.192 112.676 li
@
612.873 162.79 mo
612.873 197.581 li
@
612.873 139.561 mo
612.873 104.729 li
@
612.313 197.581 mo
613.434 197.581 li
@
612.313 104.729 mo
613.434 104.729 li
@
615.115 162.102 mo
615.115 196.346 li
@
615.115 139.259 mo
615.115 105.003 li
@
614.555 196.347 mo
615.676 196.347 li
@
614.555 105.003 mo
615.676 105.003 li
@
617.357 161.806 mo
617.357 192.318 li
@
617.357 141.455 mo
617.357 110.929 li
@
616.797 192.318 mo
617.918 192.318 li
@
616.797 110.929 mo
617.918 110.929 li
@
619.599 163.784 mo
619.599 194.906 li
@
619.599 143.023 mo
619.599 112.106 li
@
619.039 194.905 mo
620.16 194.905 li
@
619.039 112.106 mo
620.16 112.106 li
@
621.841 162.779 mo
621.841 194.763 li
@
621.841 141.455 mo
621.841 109.5 li
@
621.281 194.763 mo
622.402 194.763 li
@
621.281 109.5 mo
622.402 109.5 li
@
624.083 161.951 mo
624.083 195.353 li
@
624.083 139.669 mo
624.083 106.247 li
@
623.523 195.353 mo
624.644 195.353 li
@
623.523 106.246 mo
624.644 106.246 li
@
626.325 159.844 mo
626.325 196.108 li
@
626.325 135.668 mo
626.325 99.4041 li
@
625.765 196.109 mo
626.886 196.109 li
@
625.765 99.4051 mo
626.886 99.4051 li
@
628.567 161.381 mo
628.567 194.324 li
@
628.567 139.417 mo
628.567 106.484 li
@
628.007 194.325 mo
629.128 194.325 li
@
628.007 106.484 mo
629.128 106.484 li
@
630.809 153.562 mo
630.809 194.405 li
@
630.809 126.304 mo
630.809 85.4721 li
@
630.249 194.405 mo
631.37 194.405 li
@
630.249 85.4721 mo
631.37 85.4721 li
@
633.051 157.61 mo
633.051 197.967 li
@
633.051 130.684 mo
633.051 90.3432 li
@
632.491 197.967 mo
633.612 197.967 li
@
632.491 90.3431 mo
633.612 90.3431 li
@
635.293 154.052 mo
635.293 198.06 li
@
635.293 124.705 mo
635.293 80.7021 li
@
634.733 198.06 mo
635.854 198.06 li
@
634.733 80.7021 mo
635.854 80.7021 li
@
637.535 157.629 mo
637.535 203.764 li
@
637.535 126.87 mo
637.535 80.7372 li
@
636.975 203.764 mo
638.096 203.764 li
@
636.975 80.7372 mo
638.096 80.7372 li
@
639.777 154.92 mo
639.777 200.622 li
@
639.777 124.443 mo
639.777 78.7462 li
@
639.217 200.622 mo
640.338 200.622 li
@
639.217 78.7462 mo
640.338 78.7462 li
@
642.019 157.152 mo
642.019 198.804 li
@
642.019 129.381 mo
642.019 87.7431 li
@
641.459 198.804 mo
642.58 198.804 li
@
641.459 87.7431 mo
642.58 87.7431 li
@
644.261 156.912 mo
644.261 199.879 li
@
644.261 128.266 mo
644.261 85.3392 li
@
643.701 199.879 mo
644.822 199.879 li
@
643.701 85.3391 mo
644.822 85.3391 li
@
646.503 158.101 mo
646.503 197.36 li
@
646.503 131.926 mo
646.503 92.6732 li
@
645.943 197.36 mo
647.064 197.36 li
@
645.943 92.6732 mo
647.064 92.6732 li
@
648.745 156.895 mo
648.745 199.006 li
@
648.745 128.774 mo
648.745 86.6542 li
@
648.185 199.006 mo
649.306 199.006 li
@
648.185 86.6542 mo
649.306 86.6542 li
@
650.987 158.307 mo
650.987 204.015 li
@
650.987 127.769 mo
650.987 82.0092 li
@
650.427 204.015 mo
651.548 204.015 li
@
650.427 82.0092 mo
651.548 82.0092 li
@
653.229 150.851 mo
653.229 194.627 li
@
653.229 121.591 mo
653.229 77.7762 li
@
652.669 194.627 mo
653.79 194.627 li
@
652.669 77.7752 mo
653.79 77.7752 li
@
655.471 153.315 mo
655.471 196.681 li
@
655.471 124.344 mo
655.471 80.9012 li
@
654.911 196.681 mo
656.032 196.681 li
@
654.911 80.9012 mo
656.032 80.9012 li
@
657.713 155.669 mo
657.713 200.041 li
@
657.713 126.077 mo
657.713 81.7162 li
@
657.153 200.041 mo
658.274 200.041 li
@
657.153 81.7152 mo
658.274 81.7152 li
@
659.955 157.237 mo
659.955 201.168 li
@
659.955 127.939 mo
659.955 84.0832 li
@
659.395 201.168 mo
660.516 201.168 li
@
659.395 84.0832 mo
660.516 84.0832 li
@
662.197 157.984 mo
662.197 203.801 li
@
662.197 127.424 mo
662.197 81.5862 li
@
661.637 203.801 mo
662.758 203.801 li
@
661.637 81.5862 mo
662.758 81.5862 li
@
664.439 142.436 mo
664.439 191.732 li
@
664.439 109.501 mo
664.439 60.2942 li
@
663.879 191.732 mo
665 191.732 li
@
663.879 60.2942 mo
665 60.2942 li
@
666.681 156.036 mo
666.681 207.906 li
@
666.681 121.422 mo
666.681 69.5152 li
@
666.121 207.906 mo
667.242 207.906 li
@
666.121 69.5142 mo
667.242 69.5142 li
@
668.923 142.898 mo
668.923 188.776 li
@
668.923 112.302 mo
668.923 66.4352 li
@
668.363 188.777 mo
669.484 188.777 li
@
668.363 66.4352 mo
669.484 66.4352 li
@
671.129 152.278 mo
671.129 197.448 li
@
671.129 122.156 mo
671.129 77.0122 li
@
670.569 197.449 mo
671.69 197.449 li
@
670.569 77.0122 mo
671.69 77.0122 li
@
673.371 153.37 mo
673.371 202.418 li
@
673.371 120.609 mo
673.371 71.4912 li
@
672.811 202.418 mo
673.932 202.418 li
@
672.811 71.4912 mo
673.932 71.4912 li
@
675.613 148.607 mo
675.613 204.484 li
@
675.613 111.353 mo
675.613 55.4772 li
@
675.053 204.485 mo
676.174 204.485 li
@
675.053 55.4782 mo
676.174 55.4782 li
@
677.855 144.415 mo
677.855 196.278 li
@
677.855 109.809 mo
677.855 57.9112 li
@
677.295 196.277 mo
678.416 196.277 li
@
677.295 57.9102 mo
678.416 57.9102 li
@
680.097 151.666 mo
680.097 196.977 li
@
680.097 121.445 mo
680.097 76.2622 li
@
679.537 196.977 mo
680.658 196.977 li
@
679.537 76.2622 mo
680.658 76.2622 li
@
682.339 150.911 mo
682.339 196.032 li
@
682.339 120.83 mo
682.339 75.7552 li
@
681.779 196.032 mo
682.9 196.032 li
@
681.779 75.7552 mo
682.9 75.7552 li
@
684.581 148.648 mo
684.581 197.566 li
@
684.581 115.959 mo
684.581 66.9342 li
@
684.021 197.567 mo
685.142 197.567 li
@
684.021 66.9352 mo
685.142 66.9352 li
@
686.823 149.182 mo
686.823 197.741 li
@
686.823 116.785 mo
686.823 68.2562 li
@
686.263 197.741 mo
687.384 197.741 li
@
686.263 68.2562 mo
687.384 68.2562 li
@
689.065 152.28 mo
689.065 203.137 li
@
689.065 118.37 mo
689.065 67.5362 li
@
688.505 203.137 mo
689.626 203.137 li
@
688.505 67.5362 mo
689.626 67.5362 li
@
691.307 149.802 mo
691.307 197.657 li
@
691.307 117.881 mo
691.307 70.0822 li
@
690.747 197.656 mo
691.868 197.656 li
@
690.747 70.0822 mo
691.868 70.0822 li
@
693.549 148.012 mo
693.549 192.601 li
@
693.549 118.283 mo
693.549 73.8472 li
@
692.989 192.601 mo
694.11 192.601 li
@
692.989 73.8472 mo
694.11 73.8472 li
@
695.791 149.517 mo
695.791 198.384 li
@
695.791 116.932 mo
695.791 68.0662 li
@
695.231 198.384 mo
696.352 198.384 li
@
695.231 68.0662 mo
696.352 68.0662 li
@
698.033 148.404 mo
698.033 192.478 li
@
698.033 119.019 mo
698.033 74.9692 li
@
697.473 192.478 mo
698.594 192.478 li
@
697.473 74.9692 mo
698.594 74.9692 li
@
700.275 153.687 mo
700.275 197.558 li
@
700.275 124.437 mo
700.275 80.5752 li
@
699.715 197.558 mo
700.836 197.558 li
@
699.715 80.5752 mo
700.836 80.5752 li
@
702.517 145.153 mo
702.517 190.833 li
@
702.517 114.681 mo
702.517 68.9892 li
@
701.957 190.834 mo
703.078 190.834 li
@
701.957 68.9892 mo
703.078 68.9892 li
@
704.759 150.092 mo
704.759 196.534 li
@
704.759 119.127 mo
704.759 72.6952 li
@
704.199 196.534 mo
705.32 196.534 li
@
704.199 72.6952 mo
705.32 72.6952 li
@
707.001 152.183 mo
707.001 195.769 li
@
707.001 123.119 mo
707.001 79.5492 li
@
706.441 195.769 mo
707.562 195.769 li
@
706.441 79.5492 mo
707.562 79.5492 li
@
709.243 153.813 mo
709.243 198.056 li
@
709.243 124.297 mo
709.243 80.1582 li
@
708.683 198.056 mo
709.804 198.056 li
@
708.683 80.1582 mo
709.804 80.1582 li
@
711.485 148.902 mo
711.485 198.286 li
@
711.485 115.932 mo
711.485 66.4832 li
@
710.925 198.285 mo
712.046 198.285 li
@
710.925 66.4822 mo
712.046 66.4822 li
@
713.727 150.809 mo
713.727 199.319 li
@
713.727 118.465 mo
713.727 70.0672 li
@
713.167 199.319 mo
714.288 199.319 li
@
713.167 70.0672 mo
714.288 70.0672 li
@
715.969 151.294 mo
715.969 195.175 li
@
715.969 122.038 mo
715.969 78.1572 li
@
715.409 195.175 mo
716.53 195.175 li
@
715.409 78.1562 mo
716.53 78.1562 li
@
718.211 151.248 mo
718.211 195.493 li
@
718.211 121.733 mo
718.211 77.5032 li
@
717.651 195.493 mo
718.772 195.493 li
@
717.651 77.5032 mo
718.772 77.5032 li
@
720.453 152.521 mo
720.453 201.591 li
@
720.453 119.765 mo
720.453 70.6982 li
@
719.893 201.59 mo
721.014 201.59 li
@
719.893 70.6982 mo
721.014 70.6982 li
@
722.695 146.029 mo
722.695 197.567 li
@
722.695 111.592 mo
722.695 59.9411 li
@
722.135 197.567 mo
723.256 197.567 li
@
722.135 59.9411 mo
723.256 59.9411 li
@
724.937 151.158 mo
724.937 194.391 li
@
724.937 122.323 mo
724.937 79.1251 li
@
724.377 194.391 mo
725.498 194.391 li
@
724.377 79.1251 mo
725.498 79.1251 li
@
727.179 150.723 mo
727.179 201.467 li
@
727.179 116.889 mo
727.179 66.2601 li
@
726.619 201.468 mo
727.74 201.468 li
@
726.619 66.2611 mo
727.74 66.2611 li
@
729.421 153.821 mo
729.421 199.837 li
@
729.421 123.143 mo
729.421 77.1411 li
@
728.861 199.837 mo
729.982 199.837 li
@
728.861 77.1411 mo
729.982 77.1411 li
@
731.663 146.729 mo
731.663 192.635 li
@
731.663 116.114 mo
731.663 70.1971 li
@
731.103 192.635 mo
732.224 192.635 li
@
731.103 70.1982 mo
732.224 70.1982 li
@
733.905 153.995 mo
733.905 205.273 li
@
733.905 119.802 mo
733.905 68.5172 li
@
733.345 205.273 mo
734.466 205.273 li
@
733.345 68.5172 mo
734.466 68.5172 li
@
736.147 153.869 mo
736.147 197.932 li
@
736.147 124.461 mo
736.147 80.3592 li
@
735.587 197.932 mo
736.708 197.932 li
@
735.587 80.3592 mo
736.708 80.3592 li
@
738.389 150.426 mo
738.389 195.459 li
@
738.389 120.395 mo
738.389 75.5322 li
@
737.829 195.459 mo
738.95 195.459 li
@
737.829 75.5332 mo
738.95 75.5332 li
@
740.631 152.42 mo
740.631 197.89 li
@
740.631 122.098 mo
740.631 76.6202 li
@
740.071 197.889 mo
741.192 197.889 li
@
740.071 76.6192 mo
741.192 76.6192 li
@
742.873 152.24 mo
742.873 196.441 li
@
742.873 122.772 mo
742.873 78.5852 li
@
742.313 196.441 mo
743.434 196.441 li
@
742.313 78.5852 mo
743.434 78.5852 li
@
745.115 150.367 mo
745.115 197.934 li
@
745.115 118.635 mo
745.115 71.0672 li
@
744.555 197.934 mo
745.676 197.934 li
@
744.555 71.0672 mo
745.676 71.0672 li
@
747.357 149.761 mo
747.357 196.998 li
@
747.357 118.253 mo
747.357 71.0302 li
@
746.797 196.998 mo
747.918 196.998 li
@
746.797 71.0302 mo
747.918 71.0302 li
@
749.599 152.022 mo
749.599 200.182 li
@
749.599 119.893 mo
749.599 71.7082 li
@
749.039 200.182 mo
750.16 200.182 li
@
749.039 71.7072 mo
750.16 71.7072 li
@
751.841 152.012 mo
751.841 197.307 li
@
751.841 121.813 mo
751.841 76.5332 li
@
751.281 197.307 mo
752.402 197.307 li
@
751.281 76.5332 mo
752.402 76.5332 li
@
754.083 147.275 mo
754.083 194.213 li
@
754.083 115.963 mo
754.083 69.0432 li
@
753.523 194.213 mo
754.644 194.213 li
@
753.523 69.0432 mo
754.644 69.0432 li
@
756.325 154.578 mo
756.325 198.896 li
@
756.325 125.024 mo
756.325 80.7792 li
@
755.765 198.897 mo
756.886 198.897 li
@
755.765 80.7792 mo
756.886 80.7792 li
@
758.567 144.71 mo
758.567 191.53 li
@
758.567 113.485 mo
758.567 66.7102 li
@
758.007 191.53 mo
759.128 191.53 li
@
758.007 66.7102 mo
759.128 66.7102 li
@
760.809 148.424 mo
760.809 196.964 li
@
760.809 116.033 mo
760.809 67.4512 li
@
760.249 196.963 mo
761.37 196.963 li
@
760.249 67.4502 mo
761.37 67.4502 li
@
763.051 149.916 mo
763.051 193.699 li
@
763.051 120.719 mo
763.051 76.9662 li
@
762.491 193.699 mo
763.612 193.699 li
@
762.491 76.9672 mo
763.612 76.9672 li
@
765.293 154.529 mo
765.293 197.749 li
@
765.293 125.692 mo
765.293 82.5112 li
@
764.733 197.749 mo
765.854 197.749 li
@
764.733 82.5121 mo
765.854 82.5121 li
@
767.535 148.169 mo
767.535 198.143 li
@
767.535 114.853 mo
767.535 64.8811 li
@
766.975 198.142 mo
768.096 198.142 li
@
766.975 64.8811 mo
768.096 64.8811 li
@
769.777 149.957 mo
769.777 191.975 li
@
769.777 121.933 mo
769.777 79.9142 li
@
769.217 191.974 mo
770.338 191.974 li
@
769.217 79.9142 mo
770.338 79.9142 li
@
772.019 153.695 mo
772.019 197.529 li
@
772.019 124.443 mo
772.019 80.6761 li
@
771.459 197.529 mo
772.58 197.529 li
@
771.459 80.6761 mo
772.58 80.6761 li
@
774.261 150.108 mo
774.261 193.64 li
@
774.261 121.086 mo
774.261 77.5652 li
@
773.701 193.64 mo
774.822 193.64 li
@
773.701 77.5652 mo
774.822 77.5652 li
@
776.503 151.523 mo
776.503 205.017 li
@
776.503 115.855 mo
776.503 62.4032 li
@
775.943 205.017 mo
777.064 205.017 li
@
775.943 62.4032 mo
777.064 62.4032 li
@
778.745 149.781 mo
778.745 193.303 li
@
778.745 120.756 mo
778.745 77.4692 li
@
778.185 193.302 mo
779.306 193.302 li
@
778.185 77.4692 mo
779.306 77.4692 li
@
780.987 152.1 mo
780.987 191.908 li
@
780.987 125.554 mo
780.987 85.7972 li
@
780.427 191.908 mo
781.548 191.908 li
@
780.427 85.7971 mo
781.548 85.7971 li
@
109.691 170.437 mo
111.932 170.437 li
111.932 142.742 li
109.691 142.742 li
cp
0 .990631 1 .000396735 cmyk
f
0 lc
0 lj
109.691 170.437 mo
111.932 170.437 li
111.932 142.742 li
109.691 142.742 li
cp
@
111.932 168.347 mo
114.173 168.347 li
114.173 146.133 li
111.932 146.133 li
cp
f
111.932 168.347 mo
114.173 168.347 li
114.173 146.133 li
111.932 146.133 li
cp
@
114.173 159.246 mo
116.414 159.246 li
116.414 135.392 li
114.173 135.392 li
cp
f
114.173 159.246 mo
116.414 159.246 li
116.414 135.392 li
114.173 135.392 li
cp
@
116.414 170.66 mo
118.655 170.66 li
118.655 147.214 li
116.414 147.214 li
cp
f
116.414 170.66 mo
118.655 170.66 li
118.655 147.214 li
116.414 147.214 li
cp
@
118.656 170.756 mo
120.897 170.756 li
120.897 149.137 li
118.656 149.137 li
cp
f
118.656 170.756 mo
120.897 170.756 li
120.897 149.137 li
118.656 149.137 li
cp
@
120.897 165.235 mo
123.138 165.235 li
123.138 142.901 li
120.897 142.901 li
cp
f
120.897 165.235 mo
123.138 165.235 li
123.138 142.901 li
120.897 142.901 li
cp
@
123.138 166.509 mo
125.379 166.509 li
125.379 145.003 li
123.138 145.003 li
cp
f
123.138 166.509 mo
125.379 166.509 li
125.379 145.003 li
123.138 145.003 li
cp
@
125.38 162.796 mo
127.621 162.796 li
127.621 139.749 li
125.38 139.749 li
cp
f
125.38 162.796 mo
127.621 162.796 li
127.621 139.749 li
125.38 139.749 li
cp
@
127.621 163.773 mo
129.862 163.773 li
129.862 142.02 li
127.621 142.02 li
cp
f
127.621 163.773 mo
129.862 163.773 li
129.862 142.02 li
127.621 142.02 li
cp
@
129.862 162.184 mo
132.103 162.184 li
132.103 141.659 li
129.862 141.659 li
cp
f
129.862 162.184 mo
132.103 162.184 li
132.103 141.659 li
129.862 141.659 li
cp
@
132.103 168.097 mo
134.344 168.097 li
134.344 147.977 li
132.103 147.977 li
cp
f
132.103 168.097 mo
134.344 168.097 li
134.344 147.977 li
132.103 147.977 li
cp
@
134.345 164.897 mo
136.586 164.897 li
136.586 144.835 li
134.345 144.835 li
cp
f
134.345 164.897 mo
136.586 164.897 li
136.586 144.835 li
134.345 144.835 li
cp
@
136.586 162.893 mo
138.827 162.893 li
138.827 142.541 li
136.586 142.541 li
cp
f
136.586 162.893 mo
138.827 162.893 li
138.827 142.541 li
136.586 142.541 li
cp
@
138.827 159.312 mo
141.068 159.312 li
141.068 136.3 li
138.827 136.3 li
cp
f
138.827 159.312 mo
141.068 159.312 li
141.068 136.3 li
138.827 136.3 li
cp
@
141.068 160.622 mo
143.309 160.622 li
143.309 139.513 li
141.068 139.513 li
cp
f
141.068 160.622 mo
143.309 160.622 li
143.309 139.513 li
141.068 139.513 li
cp
@
143.31 161.699 mo
145.551 161.699 li
145.551 139.777 li
143.31 139.777 li
cp
f
143.31 161.699 mo
145.551 161.699 li
145.551 139.777 li
143.31 139.777 li
cp
@
145.551 159.406 mo
147.792 159.406 li
147.792 139.763 li
145.551 139.763 li
cp
f
145.551 159.406 mo
147.792 159.406 li
147.792 139.763 li
145.551 139.763 li
cp
@
147.792 166.315 mo
150.033 166.315 li
150.033 143.889 li
147.792 143.889 li
cp
f
147.792 166.315 mo
150.033 166.315 li
150.033 143.889 li
147.792 143.889 li
cp
@
150.033 159.15 mo
152.274 159.15 li
152.274 135.952 li
150.033 135.952 li
cp
f
150.033 159.15 mo
152.274 159.15 li
152.274 135.952 li
150.033 135.952 li
cp
@
152.275 162.006 mo
154.516 162.006 li
154.516 137.951 li
152.275 137.951 li
cp
f
152.275 162.006 mo
154.516 162.006 li
154.516 137.951 li
152.275 137.951 li
cp
@
154.516 162.046 mo
156.757 162.046 li
156.757 141.521 li
154.516 141.521 li
cp
f
154.516 162.046 mo
156.757 162.046 li
156.757 141.521 li
154.516 141.521 li
cp
@
156.757 158.251 mo
158.998 158.251 li
158.998 136.116 li
156.757 136.116 li
cp
f
156.757 158.251 mo
158.998 158.251 li
158.998 136.116 li
156.757 136.116 li
cp
@
158.999 169.141 mo
161.24 169.141 li
161.24 147.466 li
158.999 147.466 li
cp
f
158.999 169.141 mo
161.24 169.141 li
161.24 147.466 li
158.999 147.466 li
cp
@
161.24 164.131 mo
163.481 164.131 li
163.481 143.109 li
161.24 143.109 li
cp
f
161.24 164.131 mo
163.481 164.131 li
163.481 143.109 li
161.24 143.109 li
cp
@
163.481 164.091 mo
165.722 164.091 li
165.722 141.695 li
163.481 141.695 li
cp
f
163.481 164.091 mo
165.722 164.091 li
165.722 141.695 li
163.481 141.695 li
cp
@
165.722 163.53 mo
167.963 163.53 li
167.963 139.998 li
165.722 139.998 li
cp
f
165.722 163.53 mo
167.963 163.53 li
167.963 139.998 li
165.722 139.998 li
cp
@
167.964 162.135 mo
170.205 162.135 li
170.205 142.415 li
167.964 142.415 li
cp
f
167.964 162.135 mo
170.205 162.135 li
170.205 142.415 li
167.964 142.415 li
cp
@
170.205 163.906 mo
172.446 163.906 li
172.446 144.526 li
170.205 144.526 li
cp
f
170.205 163.906 mo
172.446 163.906 li
172.446 144.526 li
170.205 144.526 li
cp
@
172.446 163.345 mo
174.687 163.345 li
174.687 142.66 li
172.446 142.66 li
cp
f
172.446 163.345 mo
174.687 163.345 li
174.687 142.66 li
172.446 142.66 li
cp
@
174.687 162.774 mo
176.928 162.774 li
176.928 140.573 li
174.687 140.573 li
cp
f
174.687 162.774 mo
176.928 162.774 li
176.928 140.573 li
174.687 140.573 li
cp
@
176.929 158.293 mo
179.17 158.293 li
179.17 134.172 li
176.929 134.172 li
cp
f
176.929 158.293 mo
179.17 158.293 li
179.17 134.172 li
176.929 134.172 li
cp
@
179.17 164.05 mo
181.411 164.05 li
181.411 142.375 li
179.17 142.375 li
cp
f
179.17 164.05 mo
181.411 164.05 li
181.411 142.375 li
179.17 142.375 li
cp
@
181.411 151.236 mo
183.652 151.236 li
183.652 123.931 li
181.411 123.931 li
cp
f
181.411 151.236 mo
183.652 151.236 li
183.652 123.931 li
181.411 123.931 li
cp
@
183.653 157.821 mo
185.894 157.821 li
185.894 131.213 li
183.653 131.213 li
cp
f
183.653 157.821 mo
185.894 157.821 li
185.894 131.213 li
183.653 131.213 li
cp
@
185.894 153.45 mo
188.135 153.45 li
188.135 124.335 li
185.894 124.335 li
cp
f
185.894 153.45 mo
188.135 153.45 li
188.135 124.335 li
185.894 124.335 li
cp
@
188.135 157.569 mo
190.376 157.569 li
190.376 128.083 li
188.135 128.083 li
cp
f
188.135 157.569 mo
190.376 157.569 li
190.376 128.083 li
188.135 128.083 li
cp
@
190.376 155.503 mo
192.617 155.503 li
192.617 125.307 li
190.376 125.307 li
cp
f
190.376 155.503 mo
192.617 155.503 li
192.617 125.307 li
190.376 125.307 li
cp
@
192.618 160.31 mo
194.859 160.31 li
194.859 130.474 li
192.618 130.474 li
cp
f
192.618 160.31 mo
194.859 160.31 li
194.859 130.474 li
192.618 130.474 li
cp
@
194.859 158.509 mo
197.1 158.509 li
197.1 128.801 li
194.859 128.801 li
cp
f
194.859 158.509 mo
197.1 158.509 li
197.1 128.801 li
194.859 128.801 li
cp
@
197.1 161.423 mo
199.341 161.423 li
199.341 135.081 li
197.1 135.081 li
cp
f
197.1 161.423 mo
199.341 161.423 li
199.341 135.081 li
197.1 135.081 li
cp
@
199.341 158.392 mo
201.582 158.392 li
201.582 131.707 li
199.341 131.707 li
cp
f
199.341 158.392 mo
201.582 158.392 li
201.582 131.707 li
199.341 131.707 li
cp
@
201.583 159.896 mo
203.824 159.896 li
203.824 129.41 li
201.583 129.41 li
cp
f
201.583 159.896 mo
203.824 159.896 li
203.824 129.41 li
201.583 129.41 li
cp
@
203.824 152.667 mo
206.065 152.667 li
206.065 120.678 li
203.824 120.678 li
cp
f
203.824 152.667 mo
206.065 152.667 li
206.065 120.678 li
203.824 120.678 li
cp
@
206.065 153.781 mo
208.306 153.781 li
208.306 124.741 li
206.065 124.741 li
cp
f
206.065 153.781 mo
208.306 153.781 li
208.306 124.741 li
206.065 124.741 li
cp
@
208.306 155.724 mo
210.547 155.724 li
210.547 125.544 li
208.306 125.544 li
cp
f
208.306 155.724 mo
210.547 155.724 li
210.547 125.544 li
208.306 125.544 li
cp
@
210.548 160.46 mo
212.789 160.46 li
212.789 129.665 li
210.548 129.665 li
cp
f
210.548 160.46 mo
212.789 160.46 li
212.789 129.665 li
210.548 129.665 li
cp
@
212.789 158.717 mo
215.03 158.717 li
215.03 129.292 li
212.789 129.292 li
cp
f
212.789 158.717 mo
215.03 158.717 li
215.03 129.292 li
212.789 129.292 li
cp
@
215.03 150.854 mo
217.271 150.854 li
217.271 116.732 li
215.03 116.732 li
cp
f
215.03 150.854 mo
217.271 150.854 li
217.271 116.732 li
215.03 116.732 li
cp
@
217.272 160.33 mo
219.513 160.33 li
219.513 123.704 li
217.272 123.704 li
cp
f
217.272 160.33 mo
219.513 160.33 li
219.513 123.704 li
217.272 123.704 li
cp
@
219.513 143.138 mo
221.754 143.138 li
221.754 111.938 li
219.513 111.938 li
cp
f
219.513 143.138 mo
221.754 143.138 li
221.754 111.938 li
219.513 111.938 li
cp
@
221.754 154.241 mo
223.995 154.241 li
223.995 122.237 li
221.754 122.237 li
cp
f
221.754 154.241 mo
223.995 154.241 li
223.995 122.237 li
221.754 122.237 li
cp
@
223.995 154.839 mo
226.236 154.839 li
226.236 122.027 li
223.995 122.027 li
cp
f
223.995 154.839 mo
226.236 154.839 li
226.236 122.027 li
223.995 122.027 li
cp
@
226.237 144.045 mo
228.478 144.045 li
228.478 107.903 li
226.237 107.903 li
cp
f
226.237 144.045 mo
228.478 144.045 li
228.478 107.903 li
226.237 107.903 li
cp
@
228.478 141.815 mo
230.719 141.815 li
230.719 105.869 li
228.478 105.869 li
cp
f
228.478 141.815 mo
230.719 141.815 li
230.719 105.869 li
228.478 105.869 li
cp
@
230.719 153.326 mo
232.96 153.326 li
232.96 120.919 li
230.719 120.919 li
cp
f
230.719 153.326 mo
232.96 153.326 li
232.96 120.919 li
230.719 120.919 li
cp
@
232.96 154.044 mo
235.201 154.044 li
235.201 121.268 li
232.96 121.268 li
cp
f
232.96 154.044 mo
235.201 154.044 li
235.201 121.268 li
232.96 121.268 li
cp
@
235.202 148.626 mo
237.443 148.626 li
237.443 113.631 li
235.202 113.631 li
cp
f
235.202 148.626 mo
237.443 148.626 li
237.443 113.631 li
235.202 113.631 li
cp
@
237.443 152.104 mo
239.684 152.104 li
239.684 116.312 li
237.443 116.312 li
cp
f
237.443 152.104 mo
239.684 152.104 li
239.684 116.312 li
237.443 116.312 li
cp
@
239.684 152.289 mo
241.925 152.289 li
241.925 115.649 li
239.684 115.649 li
cp
f
239.684 152.289 mo
241.925 152.289 li
241.925 115.649 li
239.684 115.649 li
cp
@
241.926 150.503 mo
244.167 150.503 li
244.167 116.625 li
241.926 116.625 li
cp
f
241.926 150.503 mo
244.167 150.503 li
244.167 116.625 li
241.926 116.625 li
cp
@
244.167 149.644 mo
246.408 149.644 li
246.408 118.393 li
244.167 118.393 li
cp
f
244.167 149.644 mo
246.408 149.644 li
246.408 118.393 li
244.167 118.393 li
cp
@
246.408 149.14 mo
248.649 149.14 li
248.649 115.311 li
246.408 115.311 li
cp
f
246.408 149.14 mo
248.649 149.14 li
248.649 115.311 li
246.408 115.311 li
cp
@
248.649 149.516 mo
250.89 149.516 li
250.89 119.044 li
248.649 119.044 li
cp
f
248.649 149.516 mo
250.89 149.516 li
250.89 119.044 li
248.649 119.044 li
cp
@
250.891 153.12 mo
253.132 153.12 li
253.132 123.698 li
250.891 123.698 li
cp
f
250.891 153.12 mo
253.132 153.12 li
253.132 123.698 li
250.891 123.698 li
cp
@
253.132 144.054 mo
255.373 144.054 li
255.373 111.064 li
253.132 111.064 li
cp
f
253.132 144.054 mo
255.373 144.054 li
255.373 111.064 li
253.132 111.064 li
cp
@
255.373 148.821 mo
257.614 148.821 li
257.614 116.993 li
255.373 116.993 li
cp
f
255.373 148.821 mo
257.614 148.821 li
257.614 116.993 li
255.373 116.993 li
cp
@
257.614 154.968 mo
259.855 154.968 li
259.855 122.218 li
257.614 122.218 li
cp
f
257.614 154.968 mo
259.855 154.968 li
259.855 122.218 li
257.614 122.218 li
cp
@
259.856 154.606 mo
262.097 154.606 li
262.097 123.721 li
259.856 123.721 li
cp
f
259.856 154.606 mo
262.097 154.606 li
262.097 123.721 li
259.856 123.721 li
cp
@
262.097 144.472 mo
264.338 144.472 li
264.338 111.37 li
262.097 111.37 li
cp
f
262.097 144.472 mo
264.338 144.472 li
264.338 111.37 li
262.097 111.37 li
cp
@
264.338 155.366 mo
266.579 155.366 li
266.579 117.296 li
264.338 117.296 li
cp
f
264.338 155.366 mo
266.579 155.366 li
266.579 117.296 li
264.338 117.296 li
cp
@
266.579 153.521 mo
268.82 153.521 li
268.82 121.609 li
266.579 121.609 li
cp
f
266.579 153.521 mo
268.82 153.521 li
268.82 121.609 li
266.579 121.609 li
cp
@
268.821 151.464 mo
271.062 151.464 li
271.062 119.464 li
268.821 119.464 li
cp
f
268.821 151.464 mo
271.062 151.464 li
271.062 119.464 li
268.821 119.464 li
cp
@
271.062 154.139 mo
273.303 154.139 li
273.303 117.576 li
271.062 117.576 li
cp
f
271.062 154.139 mo
273.303 154.139 li
273.303 117.576 li
271.062 117.576 li
cp
@
273.303 144.313 mo
275.544 144.313 li
275.544 107.548 li
273.303 107.548 li
cp
f
273.303 144.313 mo
275.544 144.313 li
275.544 107.548 li
273.303 107.548 li
cp
@
275.545 150.785 mo
277.786 150.785 li
277.786 120.376 li
275.545 120.376 li
cp
f
275.545 150.785 mo
277.786 150.785 li
277.786 120.376 li
275.545 120.376 li
cp
@
277.786 151.337 mo
280.027 151.337 li
280.027 115.797 li
277.786 115.797 li
cp
f
277.786 151.337 mo
280.027 151.337 li
280.027 115.797 li
277.786 115.797 li
cp
@
280.027 153.932 mo
282.268 153.932 li
282.268 119.244 li
280.027 119.244 li
cp
f
280.027 153.932 mo
282.268 153.932 li
282.268 119.244 li
280.027 119.244 li
cp
@
282.268 146.894 mo
284.509 146.894 li
284.509 113.111 li
282.268 113.111 li
cp
f
282.268 146.894 mo
284.509 146.894 li
284.509 113.111 li
282.268 113.111 li
cp
@
284.51 153.003 mo
286.751 153.003 li
286.751 116.914 li
284.51 116.914 li
cp
f
284.51 153.003 mo
286.751 153.003 li
286.751 116.914 li
284.51 116.914 li
cp
@
286.751 154.464 mo
288.992 154.464 li
288.992 123.373 li
286.751 123.373 li
cp
f
286.751 154.464 mo
288.992 154.464 li
288.992 123.373 li
286.751 123.373 li
cp
@
288.992 149.818 mo
291.233 149.818 li
291.233 117.488 li
288.992 117.488 li
cp
f
288.992 149.818 mo
291.233 149.818 li
291.233 117.488 li
288.992 117.488 li
cp
@
291.233 153.539 mo
293.474 153.539 li
293.474 118.993 li
291.233 118.993 li
cp
f
291.233 153.539 mo
293.474 153.539 li
293.474 118.993 li
291.233 118.993 li
cp
@
293.475 153.707 mo
295.716 153.707 li
295.716 121.257 li
293.475 121.257 li
cp
f
293.475 153.707 mo
295.716 153.707 li
295.716 121.257 li
293.475 121.257 li
cp
@
295.716 154.777 mo
297.957 154.777 li
297.957 116.659 li
295.716 116.659 li
cp
f
295.716 154.777 mo
297.957 154.777 li
297.957 116.659 li
295.716 116.659 li
cp
@
297.957 149.583 mo
300.198 149.583 li
300.198 113.623 li
297.957 113.623 li
cp
f
297.957 149.583 mo
300.198 149.583 li
300.198 113.623 li
297.957 113.623 li
cp
@
300.199 151.481 mo
302.44 151.481 li
302.44 116.696 li
300.199 116.696 li
cp
f
300.199 151.481 mo
302.44 151.481 li
302.44 116.696 li
300.199 116.696 li
cp
@
302.44 152.38 mo
304.681 152.38 li
304.681 119.787 li
302.44 119.787 li
cp
f
302.44 152.38 mo
304.681 152.38 li
304.681 119.787 li
302.44 119.787 li
cp
@
304.681 145.623 mo
306.922 145.623 li
306.922 110.97 li
304.681 110.97 li
cp
f
304.681 145.623 mo
306.922 145.623 li
306.922 110.97 li
304.681 110.97 li
cp
@
306.922 156.596 mo
309.163 156.596 li
309.163 122.166 li
306.922 122.166 li
cp
f
306.922 156.596 mo
309.163 156.596 li
309.163 122.166 li
306.922 122.166 li
cp
@
309.164 144.338 mo
311.405 144.338 li
311.405 108.334 li
309.164 108.334 li
cp
f
309.164 144.338 mo
311.405 144.338 li
311.405 108.334 li
309.164 108.334 li
cp
@
311.405 145.458 mo
313.646 145.458 li
313.646 110.534 li
311.405 110.534 li
cp
f
311.405 145.458 mo
313.646 145.458 li
313.646 110.534 li
311.405 110.534 li
cp
@
313.646 147.848 mo
315.887 147.848 li
315.887 117.722 li
313.646 117.722 li
cp
f
313.646 147.848 mo
315.887 147.848 li
315.887 117.722 li
313.646 117.722 li
cp
@
315.887 156.587 mo
318.128 156.587 li
318.128 125.467 li
315.887 125.467 li
cp
f
315.887 156.587 mo
318.128 156.587 li
318.128 125.467 li
315.887 125.467 li
cp
@
318.129 149.083 mo
320.37 149.083 li
320.37 111.945 li
318.129 111.945 li
cp
f
318.129 149.083 mo
320.37 149.083 li
320.37 111.945 li
318.129 111.945 li
cp
@
320.37 149.73 mo
322.611 149.73 li
322.611 119.686 li
320.37 119.686 li
cp
f
320.37 149.73 mo
322.611 149.73 li
322.611 119.686 li
320.37 119.686 li
cp
@
322.611 155.973 mo
324.852 155.973 li
324.852 122.073 li
322.611 122.073 li
cp
f
322.611 155.973 mo
324.852 155.973 li
324.852 122.073 li
322.611 122.073 li
cp
@
324.852 147.868 mo
327.093 147.868 li
327.093 116.804 li
324.852 116.804 li
cp
f
324.852 147.868 mo
327.093 147.868 li
327.093 116.804 li
324.852 116.804 li
cp
@
327.094 148.678 mo
329.335 148.678 li
329.335 113.267 li
327.094 113.267 li
cp
f
327.094 148.678 mo
329.335 148.678 li
329.335 113.267 li
327.094 113.267 li
cp
@
329.335 151.681 mo
331.576 151.681 li
331.576 116.671 li
329.335 116.671 li
cp
f
329.335 151.681 mo
331.576 151.681 li
331.576 116.671 li
329.335 116.671 li
cp
@
331.576 152.891 mo
333.817 152.891 li
333.817 123.192 li
331.576 123.192 li
cp
f
331.576 152.891 mo
333.817 152.891 li
333.817 123.192 li
331.576 123.192 li
cp
@
333.818 175.117 mo
336.059 175.117 li
336.059 139.88 li
333.818 139.88 li
cp
.853361 .487251 .0680247 .00198367 cmyk
f
333.818 175.117 mo
336.059 175.117 li
336.059 139.88 li
333.818 139.88 li
cp
@
336.059 164.676 mo
338.3 164.676 li
338.3 131.26 li
336.059 131.26 li
cp
f
336.059 164.676 mo
338.3 164.676 li
338.3 131.26 li
336.059 131.26 li
cp
@
338.3 155.798 mo
340.541 155.798 li
340.541 122.134 li
338.3 122.134 li
cp
f
338.3 155.798 mo
340.541 155.798 li
340.541 122.134 li
338.3 122.134 li
cp
@
340.541 164.793 mo
342.782 164.793 li
342.782 132.526 li
340.541 132.526 li
cp
f
340.541 164.793 mo
342.782 164.793 li
342.782 132.526 li
340.541 132.526 li
cp
@
342.783 165.318 mo
345.024 165.318 li
345.024 133.751 li
342.783 133.751 li
cp
f
342.783 165.318 mo
345.024 165.318 li
345.024 133.751 li
342.783 133.751 li
cp
@
345.024 158.993 mo
347.265 158.993 li
347.265 128.731 li
345.024 128.731 li
cp
f
345.024 158.993 mo
347.265 158.993 li
347.265 128.731 li
345.024 128.731 li
cp
@
347.265 162.937 mo
349.506 162.937 li
349.506 131.079 li
347.265 131.079 li
cp
f
347.265 162.937 mo
349.506 162.937 li
349.506 131.079 li
347.265 131.079 li
cp
@
349.506 158.259 mo
351.747 158.259 li
351.747 125.559 li
349.506 125.559 li
cp
f
349.506 158.259 mo
351.747 158.259 li
351.747 125.559 li
349.506 125.559 li
cp
@
351.748 160.54 mo
353.989 160.54 li
353.989 130.818 li
351.748 130.818 li
cp
f
351.748 160.54 mo
353.989 160.54 li
353.989 130.818 li
351.748 130.818 li
cp
@
353.989 158.522 mo
356.23 158.522 li
356.23 127.404 li
353.989 127.404 li
cp
f
353.989 158.522 mo
356.23 158.522 li
356.23 127.404 li
353.989 127.404 li
cp
@
356.23 163.987 mo
358.471 163.987 li
358.471 133.666 li
356.23 133.666 li
cp
f
356.23 163.987 mo
358.471 163.987 li
358.471 133.666 li
356.23 133.666 li
cp
@
358.472 161.504 mo
360.713 161.504 li
360.713 130.533 li
358.472 130.533 li
cp
f
358.472 161.504 mo
360.713 161.504 li
360.713 130.533 li
358.472 130.533 li
cp
@
360.713 160.234 mo
362.954 160.234 li
362.954 131.483 li
360.713 131.483 li
cp
f
360.713 160.234 mo
362.954 160.234 li
362.954 131.483 li
360.713 131.483 li
cp
@
362.954 156.223 mo
365.195 156.223 li
365.195 123.204 li
362.954 123.204 li
cp
f
362.954 156.223 mo
365.195 156.223 li
365.195 123.204 li
362.954 123.204 li
cp
@
365.195 156.749 mo
367.436 156.749 li
367.436 126.104 li
365.195 126.104 li
cp
f
365.195 156.749 mo
367.436 156.749 li
367.436 126.104 li
365.195 126.104 li
cp
@
367.437 158.256 mo
369.678 158.256 li
369.678 126.136 li
367.437 126.136 li
cp
f
367.437 158.256 mo
369.678 158.256 li
369.678 126.136 li
367.437 126.136 li
cp
@
369.678 155.427 mo
371.919 155.427 li
371.919 122.812 li
369.678 122.812 li
cp
f
369.678 155.427 mo
371.919 155.427 li
371.919 122.812 li
369.678 122.812 li
cp
@
371.919 159.831 mo
374.16 159.831 li
374.16 129.943 li
371.919 129.943 li
cp
f
371.919 159.831 mo
374.16 159.831 li
374.16 129.943 li
371.919 129.943 li
cp
@
374.16 154.682 mo
376.401 154.682 li
376.401 123.141 li
374.16 123.141 li
cp
f
374.16 154.682 mo
376.401 154.682 li
376.401 123.141 li
374.16 123.141 li
cp
@
376.402 156.369 mo
378.643 156.369 li
378.643 122.009 li
376.402 122.009 li
cp
f
376.402 156.369 mo
378.643 156.369 li
378.643 122.009 li
376.402 122.009 li
cp
@
378.643 158.203 mo
380.884 158.203 li
380.884 129.518 li
378.643 129.518 li
cp
f
378.643 158.203 mo
380.884 158.203 li
380.884 129.518 li
378.643 129.518 li
cp
@
380.884 154.526 mo
383.125 154.526 li
383.125 124.074 li
380.884 124.074 li
cp
f
380.884 154.526 mo
383.125 154.526 li
383.125 124.074 li
380.884 124.074 li
cp
@
383.125 163.679 mo
385.366 163.679 li
385.366 132.878 li
383.125 132.878 li
cp
f
383.125 163.679 mo
385.366 163.679 li
385.366 132.878 li
383.125 132.878 li
cp
@
385.367 158.905 mo
387.608 158.905 li
387.608 130.278 li
385.367 130.278 li
cp
f
385.367 158.905 mo
387.608 158.905 li
387.608 130.278 li
385.367 130.278 li
cp
@
387.608 159.182 mo
389.849 159.182 li
389.849 126.124 li
387.608 126.124 li
cp
f
387.608 159.182 mo
389.849 159.182 li
389.849 126.124 li
387.608 126.124 li
cp
@
389.849 157.425 mo
392.09 157.425 li
392.09 126.003 li
389.849 126.003 li
cp
f
389.849 157.425 mo
392.09 157.425 li
392.09 126.003 li
389.849 126.003 li
cp
@
392.091 157.479 mo
394.332 157.479 li
394.332 128.02 li
392.091 128.02 li
cp
f
392.091 157.479 mo
394.332 157.479 li
394.332 128.02 li
392.091 128.02 li
cp
@
394.332 159.408 mo
396.573 159.408 li
396.573 130.855 li
394.332 130.855 li
cp
f
394.332 159.408 mo
396.573 159.408 li
396.573 130.855 li
394.332 130.855 li
cp
@
396.573 158.75 mo
398.814 158.75 li
398.814 127.833 li
396.573 127.833 li
cp
f
396.573 158.75 mo
398.814 158.75 li
398.814 127.833 li
396.573 127.833 li
cp
@
398.814 156.333 mo
401.055 156.333 li
401.055 126.452 li
398.814 126.452 li
cp
f
398.814 156.333 mo
401.055 156.333 li
401.055 126.452 li
398.814 126.452 li
cp
@
401.056 154.018 mo
403.297 154.018 li
403.297 121.21 li
401.056 121.21 li
cp
f
401.056 154.018 mo
403.297 154.018 li
403.297 121.21 li
401.056 121.21 li
cp
@
403.297 156.535 mo
405.538 156.535 li
405.538 125.828 li
403.297 125.828 li
cp
f
403.297 156.535 mo
405.538 156.535 li
405.538 125.828 li
403.297 125.828 li
cp
@
405.538 147.458 mo
407.779 147.458 li
407.779 109.078 li
405.538 109.078 li
cp
f
405.538 147.458 mo
407.779 147.458 li
407.779 109.078 li
405.538 109.078 li
cp
@
407.779 151.256 mo
410.02 151.256 li
410.02 114.565 li
407.779 114.565 li
cp
f
407.779 151.256 mo
410.02 151.256 li
410.02 114.565 li
407.779 114.565 li
cp
@
410.021 146.737 mo
412.262 146.737 li
412.262 106.889 li
410.021 106.889 li
cp
f
410.021 146.737 mo
412.262 146.737 li
412.262 106.889 li
410.021 106.889 li
cp
@
412.262 151.358 mo
414.503 151.358 li
414.503 109.157 li
412.262 109.157 li
cp
f
412.262 151.358 mo
414.503 151.358 li
414.503 109.157 li
412.262 109.157 li
cp
@
414.503 148.177 mo
416.744 148.177 li
416.744 106.726 li
414.503 106.726 li
cp
f
414.503 148.177 mo
416.744 148.177 li
416.744 106.726 li
414.503 106.726 li
cp
@
416.745 151.326 mo
418.986 151.326 li
418.986 112.832 li
416.745 112.832 li
cp
f
416.745 151.326 mo
418.986 151.326 li
418.986 112.832 li
416.745 112.832 li
cp
@
418.986 150.405 mo
421.227 150.405 li
421.227 111.679 li
418.986 111.679 li
cp
f
418.986 150.405 mo
421.227 150.405 li
421.227 111.679 li
418.986 111.679 li
cp
@
421.227 152.458 mo
423.468 152.458 li
423.468 116.639 li
421.227 116.639 li
cp
f
421.227 152.458 mo
423.468 152.458 li
423.468 116.639 li
421.227 116.639 li
cp
@
423.468 150.954 mo
425.709 150.954 li
425.709 111.83 li
423.468 111.83 li
cp
f
423.468 150.954 mo
425.709 150.954 li
425.709 111.83 li
423.468 111.83 li
cp
@
425.71 152.899 mo
427.951 152.899 li
427.951 111.243 li
425.71 111.243 li
cp
f
425.71 152.899 mo
427.951 152.899 li
427.951 111.243 li
425.71 111.243 li
cp
@
427.951 143.655 mo
430.192 143.655 li
430.192 101.677 li
427.951 101.677 li
cp
f
427.951 143.655 mo
430.192 143.655 li
430.192 101.677 li
427.951 101.677 li
cp
@
430.192 146.524 mo
432.433 146.524 li
432.433 106.519 li
430.192 106.519 li
cp
f
430.192 146.524 mo
432.433 146.524 li
432.433 106.519 li
430.192 106.519 li
cp
@
432.433 149.019 mo
434.674 149.019 li
434.674 108.962 li
432.433 108.962 li
cp
f
432.433 149.019 mo
434.674 149.019 li
434.674 108.962 li
432.433 108.962 li
cp
@
434.675 151.305 mo
436.916 151.305 li
436.916 111.937 li
434.675 111.937 li
cp
f
434.675 151.305 mo
436.916 151.305 li
436.916 111.937 li
434.675 111.937 li
cp
@
436.916 151.904 mo
439.157 151.904 li
439.157 110.45 li
436.916 110.45 li
cp
f
436.916 151.904 mo
439.157 151.904 li
439.157 110.45 li
436.916 110.45 li
cp
@
439.157 134.561 mo
441.398 134.561 li
441.398 86.6742 li
439.157 86.6742 li
cp
f
439.157 134.561 mo
441.398 134.561 li
441.398 86.6742 li
439.157 86.6742 li
cp
@
441.398 149.632 mo
443.639 149.632 li
443.639 103.676 li
441.398 103.676 li
cp
f
441.398 149.632 mo
443.639 149.632 li
443.639 103.676 li
441.398 103.676 li
cp
@
443.64 133.374 mo
445.881 133.374 li
445.881 90.9192 li
443.64 90.9192 li
cp
f
443.64 133.374 mo
445.881 133.374 li
445.881 90.9192 li
443.64 90.9192 li
cp
@
445.881 146.538 mo
448.122 146.538 li
448.122 103.582 li
445.881 103.582 li
cp
f
445.881 146.538 mo
448.122 146.538 li
448.122 103.582 li
445.881 103.582 li
cp
@
448.122 146.388 mo
450.363 146.388 li
450.363 101.708 li
448.122 101.708 li
cp
f
448.122 146.388 mo
450.363 146.388 li
450.363 101.708 li
448.122 101.708 li
cp
@
450.364 140.27 mo
452.605 140.27 li
452.605 89.2422 li
450.364 89.2422 li
cp
f
450.364 140.27 mo
452.605 140.27 li
452.605 89.2422 li
450.364 89.2422 li
cp
@
452.605 134.9 mo
454.846 134.9 li
454.846 87.2182 li
452.605 87.2182 li
cp
f
452.605 134.9 mo
454.846 134.9 li
454.846 87.2182 li
452.605 87.2182 li
cp
@
454.846 142.911 mo
457.087 142.911 li
457.087 103.258 li
454.846 103.258 li
cp
f
454.846 142.911 mo
457.087 142.911 li
457.087 103.258 li
454.846 103.258 li
cp
@
457.087 143.939 mo
459.328 143.939 li
459.328 101.492 li
457.087 101.492 li
cp
f
457.087 143.939 mo
459.328 143.939 li
459.328 101.492 li
457.087 101.492 li
cp
@
459.329 140.863 mo
461.57 140.863 li
461.57 95.7672 li
459.329 95.7672 li
cp
f
459.329 140.863 mo
461.57 140.863 li
461.57 95.7672 li
459.329 95.7672 li
cp
@
461.57 141.051 mo
463.811 141.051 li
463.811 96.1352 li
461.57 96.1352 li
cp
f
461.57 141.051 mo
463.811 141.051 li
463.811 96.1352 li
461.57 96.1352 li
cp
@
463.811 146.018 mo
466.052 146.018 li
466.052 98.3722 li
463.811 98.3722 li
cp
f
463.811 146.018 mo
466.052 146.018 li
466.052 98.3722 li
463.811 98.3722 li
cp
@
466.052 142.463 mo
468.293 142.463 li
468.293 96.7522 li
466.052 96.7522 li
cp
f
466.052 142.463 mo
468.293 142.463 li
468.293 96.7522 li
466.052 96.7522 li
cp
@
468.294 141.983 mo
470.535 141.983 li
470.535 97.6662 li
468.294 97.6662 li
cp
f
468.294 141.983 mo
470.535 141.983 li
470.535 97.6662 li
468.294 97.6662 li
cp
@
470.535 141.161 mo
472.776 141.161 li
472.776 96.1762 li
470.535 96.1762 li
cp
f
470.535 141.161 mo
472.776 141.161 li
472.776 96.1762 li
470.535 96.1762 li
cp
@
472.776 141.102 mo
475.017 141.102 li
475.017 98.3612 li
472.776 98.3612 li
cp
f
472.776 141.102 mo
475.017 141.102 li
475.017 98.3612 li
472.776 98.3612 li
cp
@
475.018 147.348 mo
477.259 147.348 li
477.259 106.194 li
475.018 106.194 li
cp
f
475.018 147.348 mo
477.259 147.348 li
477.259 106.194 li
475.018 106.194 li
cp
@
477.259 135.867 mo
479.5 135.867 li
479.5 93.6232 li
477.259 93.6232 li
cp
f
477.259 135.867 mo
479.5 135.867 li
479.5 93.6232 li
477.259 93.6232 li
cp
@
479.5 143.272 mo
481.741 143.272 li
481.741 100.516 li
479.5 100.516 li
cp
f
479.5 143.272 mo
481.741 143.272 li
481.741 100.516 li
479.5 100.516 li
cp
@
481.741 144.277 mo
483.982 144.277 li
483.982 104.541 li
481.741 104.541 li
cp
f
481.741 144.277 mo
483.982 144.277 li
483.982 104.541 li
481.741 104.541 li
cp
@
483.983 146.796 mo
486.224 146.796 li
486.224 105.808 li
483.983 105.808 li
cp
f
483.983 146.796 mo
486.224 146.796 li
486.224 105.808 li
483.983 105.808 li
cp
@
486.224 139.083 mo
488.465 139.083 li
488.465 96.1282 li
486.224 96.1282 li
cp
f
486.224 139.083 mo
488.465 139.083 li
488.465 96.1282 li
486.224 96.1282 li
cp
@
488.465 144.401 mo
490.706 144.401 li
490.706 98.3232 li
488.465 98.3232 li
cp
f
488.465 144.401 mo
490.706 144.401 li
490.706 98.3232 li
488.465 98.3232 li
cp
@
490.706 142.457 mo
492.947 142.457 li
492.947 104.233 li
490.706 104.233 li
cp
f
490.706 142.457 mo
492.947 142.457 li
492.947 104.233 li
490.706 104.233 li
cp
@
492.948 144.525 mo
495.189 144.525 li
495.189 102.963 li
492.948 102.963 li
cp
f
492.948 144.525 mo
495.189 144.525 li
495.189 102.963 li
492.948 102.963 li
cp
@
495.189 147.131 mo
497.43 147.131 li
497.43 100.884 li
495.189 100.884 li
cp
f
495.189 147.131 mo
497.43 147.131 li
497.43 100.884 li
495.189 100.884 li
cp
@
497.43 137.354 mo
499.671 137.354 li
499.671 90.1102 li
497.43 90.1102 li
cp
f
497.43 137.354 mo
499.671 137.354 li
499.671 90.1102 li
497.43 90.1102 li
cp
@
499.671 142.923 mo
501.912 142.923 li
501.912 103.466 li
499.671 103.466 li
cp
f
499.671 142.923 mo
501.912 142.923 li
501.912 103.466 li
499.671 103.466 li
cp
@
501.913 142.558 mo
504.154 142.558 li
504.154 98.1102 li
501.913 98.1102 li
cp
f
501.913 142.558 mo
504.154 142.558 li
504.154 98.1102 li
501.913 98.1102 li
cp
@
504.154 147.067 mo
506.395 147.067 li
506.395 104.347 li
504.154 104.347 li
cp
f
504.154 147.067 mo
506.395 147.067 li
506.395 104.347 li
504.154 104.347 li
cp
@
506.395 138.137 mo
508.636 138.137 li
508.636 95.4432 li
506.395 95.4432 li
cp
f
506.395 138.137 mo
508.636 138.137 li
508.636 95.4432 li
506.395 95.4432 li
cp
@
508.637 146.556 mo
510.878 146.556 li
510.878 100.383 li
508.637 100.383 li
cp
f
508.637 146.556 mo
510.878 146.556 li
510.878 100.383 li
508.637 100.383 li
cp
@
510.878 146.169 mo
513.119 146.169 li
513.119 106.795 li
510.878 106.795 li
cp
f
510.878 146.169 mo
513.119 146.169 li
513.119 106.795 li
510.878 106.795 li
cp
@
513.119 143.69 mo
515.36 143.69 li
515.36 101.55 li
513.119 101.55 li
cp
f
513.119 143.69 mo
515.36 143.69 li
515.36 101.55 li
513.119 101.55 li
cp
@
515.36 145.176 mo
517.601 145.176 li
517.601 103.681 li
515.36 103.681 li
cp
f
515.36 145.176 mo
517.601 145.176 li
517.601 103.681 li
515.36 103.681 li
cp
@
517.602 144.931 mo
519.843 144.931 li
519.843 104.625 li
517.602 104.625 li
cp
f
517.602 144.931 mo
519.843 144.931 li
519.843 104.625 li
517.602 104.625 li
cp
@
519.843 142.994 mo
522.084 142.994 li
522.084 98.2992 li
519.843 98.2992 li
cp
f
519.843 142.994 mo
522.084 142.994 li
522.084 98.2992 li
519.843 98.2992 li
cp
@
522.084 141.325 mo
524.325 141.325 li
524.325 98.3982 li
522.084 98.3982 li
cp
f
522.084 141.325 mo
524.325 141.325 li
524.325 98.3982 li
522.084 98.3982 li
cp
@
524.325 144.967 mo
526.566 144.967 li
526.566 100.87 li
524.325 100.87 li
cp
f
524.325 144.967 mo
526.566 144.967 li
526.566 100.87 li
524.325 100.87 li
cp
@
526.567 143.702 mo
528.808 143.702 li
528.808 103.235 li
526.567 103.235 li
cp
f
526.567 143.702 mo
528.808 143.702 li
528.808 103.235 li
526.567 103.235 li
cp
@
528.808 138.574 mo
531.049 138.574 li
531.049 95.8762 li
528.808 95.8762 li
cp
f
528.808 138.574 mo
531.049 138.574 li
531.049 95.8762 li
528.808 95.8762 li
cp
@
531.049 147.182 mo
533.29 147.182 li
533.29 107.662 li
531.049 107.662 li
cp
f
531.049 147.182 mo
533.29 147.182 li
533.29 107.662 li
531.049 107.662 li
cp
@
533.291 136.108 mo
535.532 136.108 li
535.532 92.3942 li
533.291 92.3942 li
cp
f
533.291 136.108 mo
535.532 136.108 li
535.532 92.3942 li
533.291 92.3942 li
cp
@
535.532 139.851 mo
537.773 139.851 li
537.773 95.8292 li
535.532 95.8292 li
cp
f
535.532 139.851 mo
537.773 139.851 li
537.773 95.8292 li
535.532 95.8292 li
cp
@
537.773 141.847 mo
540.014 141.847 li
540.014 100.929 li
537.773 100.929 li
cp
f
537.773 141.847 mo
540.014 141.847 li
540.014 100.929 li
537.773 100.929 li
cp
@
540.014 147.839 mo
542.255 147.839 li
542.255 108.27 li
540.014 108.27 li
cp
f
540.014 147.839 mo
542.255 147.839 li
542.255 108.27 li
540.014 108.27 li
cp
@
542.256 139.417 mo
544.497 139.417 li
544.497 94.2222 li
542.256 94.2222 li
cp
f
542.256 139.417 mo
544.497 139.417 li
544.497 94.2222 li
542.256 94.2222 li
cp
@
544.497 141.912 mo
546.738 141.912 li
546.738 104.239 li
544.497 104.239 li
cp
f
544.497 141.912 mo
546.738 141.912 li
546.738 104.239 li
544.497 104.239 li
cp
@
546.738 145.192 mo
548.979 145.192 li
548.979 106.887 li
546.738 106.887 li
cp
f
546.738 145.192 mo
548.979 145.192 li
548.979 106.887 li
546.738 106.887 li
cp
@
548.979 141.893 mo
551.22 141.893 li
551.22 102.311 li
548.979 102.311 li
cp
f
548.979 141.893 mo
551.22 141.893 li
551.22 102.311 li
548.979 102.311 li
cp
@
551.221 141.608 mo
553.462 141.608 li
553.462 96.1232 li
551.221 96.1232 li
cp
f
551.221 141.608 mo
553.462 141.608 li
553.462 96.1232 li
551.221 96.1232 li
cp
@
553.462 140.747 mo
555.703 140.747 li
555.703 101.755 li
553.462 101.755 li
cp
f
553.462 140.747 mo
555.703 140.747 li
555.703 101.755 li
553.462 101.755 li
cp
@
555.703 145.275 mo
557.944 145.275 li
557.944 107.827 li
555.703 107.827 li
cp
f
555.703 145.275 mo
557.944 145.275 li
557.944 107.827 li
555.703 107.827 li
cp
@
557.944 174.489 mo
560.185 174.489 li
560.185 149.489 li
557.944 149.489 li
cp
.878538 .2439 1 .131716 cmyk
f
557.944 174.489 mo
560.185 174.489 li
560.185 149.489 li
557.944 149.489 li
cp
@
560.186 166.38 mo
562.427 166.38 li
562.427 144.76 li
560.186 144.76 li
cp
f
560.186 166.38 mo
562.427 166.38 li
562.427 144.76 li
560.186 144.76 li
cp
@
562.427 159.927 mo
564.668 159.927 li
564.668 137.044 li
562.427 137.044 li
cp
f
562.427 159.927 mo
564.668 159.927 li
564.668 137.044 li
562.427 137.044 li
cp
@
564.668 166.655 mo
566.909 166.655 li
566.909 145.763 li
564.668 145.763 li
cp
f
564.668 166.655 mo
566.909 166.655 li
566.909 145.763 li
564.668 145.763 li
cp
@
566.91 167.416 mo
569.151 167.416 li
569.151 145.627 li
566.91 145.627 li
cp
f
566.91 167.416 mo
569.151 167.416 li
569.151 145.627 li
566.91 145.627 li
cp
@
569.151 162.555 mo
571.392 162.555 li
571.392 142.367 li
569.151 142.367 li
cp
f
569.151 162.555 mo
571.392 162.555 li
571.392 142.367 li
569.151 142.367 li
cp
@
571.392 165.018 mo
573.633 165.018 li
573.633 144.37 li
571.392 144.37 li
cp
f
571.392 165.018 mo
573.633 165.018 li
573.633 144.37 li
571.392 144.37 li
cp
@
573.633 161.987 mo
575.874 161.987 li
575.874 140.11 li
573.633 140.11 li
cp
f
573.633 161.987 mo
575.874 161.987 li
575.874 140.11 li
573.633 140.11 li
cp
@
575.875 164.657 mo
578.116 164.657 li
578.116 143.403 li
575.875 143.403 li
cp
f
575.875 164.657 mo
578.116 164.657 li
578.116 143.403 li
575.875 143.403 li
cp
@
578.116 162.892 mo
580.357 162.892 li
580.357 140.581 li
578.116 140.581 li
cp
f
578.116 162.892 mo
580.357 162.892 li
580.357 140.581 li
578.116 140.581 li
cp
@
580.357 167.039 mo
582.598 167.039 li
582.598 145.5 li
580.357 145.5 li
cp
f
580.357 167.039 mo
582.598 167.039 li
582.598 145.5 li
580.357 145.5 li
cp
@
582.598 165.085 mo
584.839 165.085 li
584.839 143.163 li
582.598 143.163 li
cp
f
582.598 165.085 mo
584.839 165.085 li
584.839 143.163 li
582.598 143.163 li
cp
@
584.84 164.649 mo
587.081 164.649 li
587.081 143.627 li
584.84 143.627 li
cp
f
584.84 164.649 mo
587.081 164.649 li
587.081 143.627 li
584.84 143.627 li
cp
@
587.081 160.761 mo
589.322 160.761 li
589.322 137.743 li
587.081 137.743 li
cp
f
587.081 160.761 mo
589.322 160.761 li
589.322 137.743 li
587.081 137.743 li
cp
@
589.322 161.554 mo
591.563 161.554 li
591.563 139.697 li
589.322 139.697 li
cp
f
589.322 161.554 mo
591.563 161.554 li
591.563 139.697 li
589.322 139.697 li
cp
@
591.563 162.669 mo
593.804 162.669 li
593.804 140.242 li
591.563 140.242 li
cp
f
591.563 162.669 mo
593.804 162.669 li
593.804 140.242 li
591.563 140.242 li
cp
@
593.805 160.273 mo
596.046 160.273 li
596.046 137.658 li
593.805 137.658 li
cp
f
593.805 160.273 mo
596.046 160.273 li
596.046 137.658 li
593.805 137.658 li
cp
@
596.046 163.378 mo
598.287 163.378 li
598.287 142.617 li
596.046 142.617 li
cp
f
596.046 163.378 mo
598.287 163.378 li
598.287 142.617 li
596.046 142.617 li
cp
@
598.287 160.237 mo
600.528 160.237 li
600.528 137.469 li
598.287 137.469 li
cp
f
598.287 160.237 mo
600.528 160.237 li
600.528 137.469 li
598.287 137.469 li
cp
@
600.529 160.769 mo
602.77 160.769 li
602.77 137.184 li
600.529 137.184 li
cp
f
600.529 160.769 mo
602.77 160.769 li
602.77 137.184 li
600.529 137.184 li
cp
@
602.77 163.021 mo
605.011 163.021 li
605.011 142.755 li
602.77 142.755 li
cp
f
602.77 163.021 mo
605.011 163.021 li
605.011 142.755 li
602.77 142.755 li
cp
@
605.011 160.028 mo
607.252 160.028 li
607.252 137.924 li
605.011 137.924 li
cp
f
605.011 160.028 mo
607.252 160.028 li
607.252 137.924 li
605.011 137.924 li
cp
@
607.252 166.346 mo
609.493 166.346 li
609.493 144.701 li
607.252 144.701 li
cp
f
607.252 166.346 mo
609.493 166.346 li
609.493 144.701 li
607.252 144.701 li
cp
@
609.494 162.509 mo
611.735 162.509 li
611.735 142.528 li
609.494 142.528 li
cp
f
609.494 162.509 mo
611.735 162.509 li
611.735 142.528 li
609.494 142.528 li
cp
@
611.735 162.792 mo
613.976 162.792 li
613.976 139.563 li
611.735 139.563 li
cp
f
611.735 162.792 mo
613.976 162.792 li
613.976 139.563 li
611.735 139.563 li
cp
@
613.976 162.104 mo
616.217 162.104 li
616.217 139.261 li
613.976 139.261 li
cp
f
613.976 162.104 mo
616.217 162.104 li
616.217 139.261 li
613.976 139.261 li
cp
@
616.218 161.807 mo
618.459 161.807 li
618.459 141.456 li
616.218 141.456 li
cp
f
616.218 161.807 mo
618.459 161.807 li
618.459 141.456 li
616.218 141.456 li
cp
@
618.459 163.785 mo
620.7 163.785 li
620.7 143.024 li
618.459 143.024 li
cp
f
618.459 163.785 mo
620.7 163.785 li
620.7 143.024 li
618.459 143.024 li
cp
@
620.7 162.78 mo
622.941 162.78 li
622.941 141.456 li
620.7 141.456 li
cp
f
620.7 162.78 mo
622.941 162.78 li
622.941 141.456 li
620.7 141.456 li
cp
@
622.941 161.952 mo
625.182 161.952 li
625.182 139.67 li
622.941 139.67 li
cp
f
622.941 161.952 mo
625.182 161.952 li
625.182 139.67 li
622.941 139.67 li
cp
@
625.183 159.847 mo
627.424 159.847 li
627.424 135.671 li
625.183 135.671 li
cp
f
625.183 159.847 mo
627.424 159.847 li
627.424 135.671 li
625.183 135.671 li
cp
@
627.424 161.382 mo
629.665 161.382 li
629.665 139.418 li
627.424 139.418 li
cp
f
627.424 161.382 mo
629.665 161.382 li
629.665 139.418 li
627.424 139.418 li
cp
@
629.665 153.563 mo
631.906 153.563 li
631.906 126.305 li
629.665 126.305 li
cp
f
629.665 153.563 mo
631.906 153.563 li
631.906 126.305 li
629.665 126.305 li
cp
@
631.906 157.61 mo
634.147 157.61 li
634.147 130.684 li
631.906 130.684 li
cp
f
631.906 157.61 mo
634.147 157.61 li
634.147 130.684 li
631.906 130.684 li
cp
@
634.148 154.052 mo
636.389 154.052 li
636.389 124.705 li
634.148 124.705 li
cp
f
634.148 154.052 mo
636.389 154.052 li
636.389 124.705 li
634.148 124.705 li
cp
@
636.389 157.629 mo
638.63 157.629 li
638.63 126.87 li
636.389 126.87 li
cp
f
636.389 157.629 mo
638.63 157.629 li
638.63 126.87 li
636.389 126.87 li
cp
@
638.63 154.919 mo
640.871 154.919 li
640.871 124.442 li
638.63 124.442 li
cp
f
638.63 154.919 mo
640.871 154.919 li
640.871 124.442 li
638.63 124.442 li
cp
@
640.871 157.151 mo
643.112 157.151 li
643.112 129.38 li
640.871 129.38 li
cp
f
640.871 157.151 mo
643.112 157.151 li
643.112 129.38 li
640.871 129.38 li
cp
@
643.113 156.911 mo
645.354 156.911 li
645.354 128.265 li
643.113 128.265 li
cp
f
643.113 156.911 mo
645.354 156.911 li
645.354 128.265 li
643.113 128.265 li
cp
@
645.354 158.099 mo
647.595 158.099 li
647.595 131.924 li
645.354 131.924 li
cp
f
645.354 158.099 mo
647.595 158.099 li
647.595 131.924 li
645.354 131.924 li
cp
@
647.595 156.894 mo
649.836 156.894 li
649.836 128.773 li
647.595 128.773 li
cp
f
647.595 156.894 mo
649.836 156.894 li
649.836 128.773 li
647.595 128.773 li
cp
@
649.836 158.306 mo
652.077 158.306 li
652.077 127.768 li
649.836 127.768 li
cp
f
649.836 158.306 mo
652.077 158.306 li
652.077 127.768 li
649.836 127.768 li
cp
@
652.078 150.851 mo
654.319 150.851 li
654.319 121.591 li
652.078 121.591 li
cp
f
652.078 150.851 mo
654.319 150.851 li
654.319 121.591 li
652.078 121.591 li
cp
@
654.319 153.315 mo
656.56 153.315 li
656.56 124.344 li
654.319 124.344 li
cp
f
654.319 153.315 mo
656.56 153.315 li
656.56 124.344 li
654.319 124.344 li
cp
@
656.56 155.669 mo
658.801 155.669 li
658.801 126.077 li
656.56 126.077 li
cp
f
656.56 155.669 mo
658.801 155.669 li
658.801 126.077 li
656.56 126.077 li
cp
@
658.802 157.238 mo
661.043 157.238 li
661.043 127.94 li
658.802 127.94 li
cp
f
658.802 157.238 mo
661.043 157.238 li
661.043 127.94 li
658.802 127.94 li
cp
@
661.043 157.986 mo
663.284 157.986 li
663.284 127.426 li
661.043 127.426 li
cp
f
661.043 157.986 mo
663.284 157.986 li
663.284 127.426 li
661.043 127.426 li
cp
@
663.284 142.439 mo
665.525 142.439 li
665.525 109.504 li
663.284 109.504 li
cp
f
663.284 142.439 mo
665.525 142.439 li
665.525 109.504 li
663.284 109.504 li
cp
@
665.525 156.038 mo
667.766 156.038 li
667.766 121.424 li
665.525 121.424 li
cp
f
665.525 156.038 mo
667.766 156.038 li
667.766 121.424 li
665.525 121.424 li
cp
@
667.767 142.901 mo
670.008 142.901 li
670.008 112.305 li
667.767 112.305 li
cp
f
667.767 142.901 mo
670.008 142.901 li
670.008 112.305 li
667.767 112.305 li
cp
@
670.008 152.278 mo
672.249 152.278 li
672.249 122.156 li
670.008 122.156 li
cp
f
670.008 152.278 mo
672.249 152.278 li
672.249 122.156 li
670.008 122.156 li
cp
@
672.249 153.369 mo
674.49 153.369 li
674.49 120.608 li
672.249 120.608 li
cp
f
672.249 153.369 mo
674.49 153.369 li
674.49 120.608 li
672.249 120.608 li
cp
@
674.49 148.606 mo
676.731 148.606 li
676.731 111.352 li
674.49 111.352 li
cp
f
674.49 148.606 mo
676.731 148.606 li
676.731 111.352 li
674.49 111.352 li
cp
@
676.732 144.413 mo
678.973 144.413 li
678.973 109.807 li
676.732 109.807 li
cp
f
676.732 144.413 mo
678.973 144.413 li
678.973 109.807 li
676.732 109.807 li
cp
@
678.973 151.665 mo
681.214 151.665 li
681.214 121.444 li
678.973 121.444 li
cp
f
678.973 151.665 mo
681.214 151.665 li
681.214 121.444 li
678.973 121.444 li
cp
@
681.214 150.91 mo
683.455 150.91 li
683.455 120.829 li
681.214 120.829 li
cp
f
681.214 150.91 mo
683.455 150.91 li
683.455 120.829 li
681.214 120.829 li
cp
@
683.456 148.646 mo
685.697 148.646 li
685.697 115.957 li
683.456 115.957 li
cp
f
683.456 148.646 mo
685.697 148.646 li
685.697 115.957 li
683.456 115.957 li
cp
@
685.697 149.179 mo
687.938 149.179 li
687.938 116.782 li
685.697 116.782 li
cp
f
685.697 149.179 mo
687.938 149.179 li
687.938 116.782 li
685.697 116.782 li
cp
@
687.938 152.277 mo
690.179 152.277 li
690.179 118.367 li
687.938 118.367 li
cp
f
687.938 152.277 mo
690.179 152.277 li
690.179 118.367 li
687.938 118.367 li
cp
@
690.179 149.799 mo
692.42 149.799 li
692.42 117.878 li
690.179 117.878 li
cp
f
690.179 149.799 mo
692.42 149.799 li
692.42 117.878 li
690.179 117.878 li
cp
@
692.421 148.01 mo
694.662 148.01 li
694.662 118.281 li
692.421 118.281 li
cp
f
692.421 148.01 mo
694.662 148.01 li
694.662 118.281 li
692.421 118.281 li
cp
@
694.662 149.514 mo
696.903 149.514 li
696.903 116.929 li
694.662 116.929 li
cp
f
694.662 149.514 mo
696.903 149.514 li
696.903 116.929 li
694.662 116.929 li
cp
@
696.903 148.402 mo
699.144 148.402 li
699.144 119.017 li
696.903 119.017 li
cp
f
696.903 148.402 mo
699.144 148.402 li
699.144 119.017 li
696.903 119.017 li
cp
@
699.144 153.685 mo
701.385 153.685 li
701.385 124.435 li
699.144 124.435 li
cp
f
699.144 153.685 mo
701.385 153.685 li
701.385 124.435 li
699.144 124.435 li
cp
@
701.386 145.152 mo
703.627 145.152 li
703.627 114.68 li
701.386 114.68 li
cp
f
701.386 145.152 mo
703.627 145.152 li
703.627 114.68 li
701.386 114.68 li
cp
@
703.627 150.091 mo
705.868 150.091 li
705.868 119.126 li
703.627 119.126 li
cp
f
703.627 150.091 mo
705.868 150.091 li
705.868 119.126 li
703.627 119.126 li
cp
@
705.868 152.183 mo
708.109 152.183 li
708.109 123.119 li
705.868 123.119 li
cp
f
705.868 152.183 mo
708.109 152.183 li
708.109 123.119 li
705.868 123.119 li
cp
@
708.109 153.813 mo
710.35 153.813 li
710.35 124.297 li
708.109 124.297 li
cp
f
708.109 153.813 mo
710.35 153.813 li
710.35 124.297 li
708.109 124.297 li
cp
@
710.351 148.902 mo
712.592 148.902 li
712.592 115.932 li
710.351 115.932 li
cp
f
710.351 148.902 mo
712.592 148.902 li
712.592 115.932 li
710.351 115.932 li
cp
@
712.592 150.81 mo
714.833 150.81 li
714.833 118.466 li
712.592 118.466 li
cp
f
712.592 150.81 mo
714.833 150.81 li
714.833 118.466 li
712.592 118.466 li
cp
@
714.833 151.295 mo
717.074 151.295 li
717.074 122.039 li
714.833 122.039 li
cp
f
714.833 151.295 mo
717.074 151.295 li
717.074 122.039 li
714.833 122.039 li
cp
@
717.075 151.25 mo
719.316 151.25 li
719.316 121.735 li
717.075 121.735 li
cp
f
717.075 151.25 mo
719.316 151.25 li
719.316 121.735 li
717.075 121.735 li
cp
@
719.316 152.523 mo
721.557 152.523 li
721.557 119.767 li
719.316 119.767 li
cp
f
719.316 152.523 mo
721.557 152.523 li
721.557 119.767 li
719.316 119.767 li
cp
@
721.557 146.032 mo
723.798 146.032 li
723.798 111.595 li
721.557 111.595 li
cp
f
721.557 146.032 mo
723.798 146.032 li
723.798 111.595 li
721.557 111.595 li
cp
@
723.798 151.16 mo
726.039 151.16 li
726.039 122.325 li
723.798 122.325 li
cp
f
723.798 151.16 mo
726.039 151.16 li
726.039 122.325 li
723.798 122.325 li
cp
@
726.04 150.726 mo
728.281 150.726 li
728.281 116.892 li
726.04 116.892 li
cp
f
726.04 150.726 mo
728.281 150.726 li
728.281 116.892 li
726.04 116.892 li
cp
@
728.281 153.823 mo
730.522 153.823 li
730.522 123.145 li
728.281 123.145 li
cp
f
728.281 153.823 mo
730.522 153.823 li
730.522 123.145 li
728.281 123.145 li
cp
@
730.522 146.731 mo
732.763 146.731 li
732.763 116.116 li
730.522 116.116 li
cp
f
730.522 146.731 mo
732.763 146.731 li
732.763 116.116 li
730.522 116.116 li
cp
@
732.763 153.996 mo
735.004 153.996 li
735.004 119.803 li
732.763 119.803 li
cp
f
732.763 153.996 mo
735.004 153.996 li
735.004 119.803 li
732.763 119.803 li
cp
@
735.005 153.871 mo
737.246 153.871 li
737.246 124.463 li
735.005 124.463 li
cp
f
735.005 153.871 mo
737.246 153.871 li
737.246 124.463 li
735.005 124.463 li
cp
@
737.246 150.428 mo
739.487 150.428 li
739.487 120.397 li
737.246 120.397 li
cp
f
737.246 150.428 mo
739.487 150.428 li
739.487 120.397 li
737.246 120.397 li
cp
@
739.487 152.421 mo
741.728 152.421 li
741.728 122.099 li
739.487 122.099 li
cp
f
739.487 152.421 mo
741.728 152.421 li
741.728 122.099 li
739.487 122.099 li
cp
@
741.729 152.243 mo
743.97 152.243 li
743.97 122.775 li
741.729 122.775 li
cp
f
741.729 152.243 mo
743.97 152.243 li
743.97 122.775 li
741.729 122.775 li
cp
@
743.97 150.369 mo
746.211 150.369 li
746.211 118.637 li
743.97 118.637 li
cp
f
743.97 150.369 mo
746.211 150.369 li
746.211 118.637 li
743.97 118.637 li
cp
@
746.211 149.763 mo
748.452 149.763 li
748.452 118.255 li
746.211 118.255 li
cp
f
746.211 149.763 mo
748.452 149.763 li
748.452 118.255 li
746.211 118.255 li
cp
@
748.452 152.025 mo
750.693 152.025 li
750.693 119.896 li
748.452 119.896 li
cp
f
748.452 152.025 mo
750.693 152.025 li
750.693 119.896 li
748.452 119.896 li
cp
@
750.694 152.016 mo
752.935 152.016 li
752.935 121.817 li
750.694 121.817 li
cp
f
750.694 152.016 mo
752.935 152.016 li
752.935 121.817 li
750.694 121.817 li
cp
@
752.935 147.279 mo
755.176 147.279 li
755.176 115.967 li
752.935 115.967 li
cp
f
752.935 147.279 mo
755.176 147.279 li
755.176 115.967 li
752.935 115.967 li
cp
@
755.176 154.582 mo
757.417 154.582 li
757.417 125.028 li
755.176 125.028 li
cp
f
755.176 154.582 mo
757.417 154.582 li
757.417 125.028 li
755.176 125.028 li
cp
@
757.417 144.713 mo
759.658 144.713 li
759.658 113.488 li
757.417 113.488 li
cp
f
757.417 144.713 mo
759.658 144.713 li
759.658 113.488 li
757.417 113.488 li
cp
@
759.659 148.427 mo
761.9 148.427 li
761.9 116.036 li
759.659 116.036 li
cp
f
759.659 148.427 mo
761.9 148.427 li
761.9 116.036 li
759.659 116.036 li
cp
@
761.9 149.92 mo
764.141 149.92 li
764.141 120.723 li
761.9 120.723 li
cp
f
761.9 149.92 mo
764.141 149.92 li
764.141 120.723 li
761.9 120.723 li
cp
@
764.141 154.533 mo
766.382 154.533 li
766.382 125.696 li
764.141 125.696 li
cp
f
764.141 154.533 mo
766.382 154.533 li
766.382 125.696 li
764.141 125.696 li
cp
@
766.383 148.172 mo
768.624 148.172 li
768.624 114.856 li
766.383 114.856 li
cp
f
766.383 148.172 mo
768.624 148.172 li
768.624 114.856 li
766.383 114.856 li
cp
@
768.624 149.961 mo
770.865 149.961 li
770.865 121.937 li
768.624 121.937 li
cp
f
768.624 149.961 mo
770.865 149.961 li
770.865 121.937 li
768.624 121.937 li
cp
@
770.865 153.7 mo
773.106 153.7 li
773.106 124.448 li
770.865 124.448 li
cp
f
770.865 153.7 mo
773.106 153.7 li
773.106 124.448 li
770.865 124.448 li
cp
@
773.106 150.112 mo
775.347 150.112 li
775.347 121.09 li
773.106 121.09 li
cp
f
773.106 150.112 mo
775.347 150.112 li
775.347 121.09 li
773.106 121.09 li
cp
@
775.348 151.527 mo
777.589 151.527 li
777.589 115.859 li
775.348 115.859 li
cp
f
775.348 151.527 mo
777.589 151.527 li
777.589 115.859 li
775.348 115.859 li
cp
@
777.589 149.785 mo
779.83 149.785 li
779.83 120.76 li
777.589 120.76 li
cp
f
777.589 149.785 mo
779.83 149.785 li
779.83 120.76 li
777.589 120.76 li
cp
@
779.83 152.104 mo
782.071 152.104 li
782.071 125.558 li
779.83 125.558 li
cp
f
779.83 152.104 mo
782.071 152.104 li
782.071 125.558 li
779.83 125.558 li
cp
@
2 lc
1 lj
109.691 155.602 mo
111.932 155.602 li
0 .990631 1 .000396735 cmyk
@
111.932 157.061 mo
114.173 157.061 li
@
114.173 146.806 mo
116.414 146.806 li
@
116.414 158.777 mo
118.655 158.777 li
@
118.655 159.556 mo
120.896 159.556 li
@
120.896 152.814 mo
123.137 152.814 li
@
123.137 155.513 mo
125.378 155.513 li
@
125.378 151.15 mo
127.619 151.15 li
@
127.619 152.349 mo
129.86 152.349 li
@
129.86 151.394 mo
132.101 151.394 li
@
132.101 157.504 mo
134.342 157.504 li
@
134.342 154.631 mo
136.583 154.631 li
@
136.583 151.907 mo
138.824 151.907 li
@
138.824 147.104 mo
141.065 147.104 li
@
141.065 149.967 mo
143.306 149.967 li
@
143.306 150.479 mo
145.547 150.479 li
@
145.547 148.961 mo
147.788 148.961 li
@
147.788 154.471 mo
150.029 154.471 li
@
150.029 146.742 mo
152.27 146.742 li
@
152.27 148.346 mo
154.511 148.346 li
@
154.511 150.892 mo
156.752 150.892 li
@
156.752 146.685 mo
158.993 146.685 li
@
158.993 157.096 mo
161.234 157.096 li
@
161.234 152.793 mo
163.475 152.793 li
@
163.475 151.817 mo
165.716 151.817 li
@
165.716 151.334 mo
167.957 151.334 li
@
167.957 152.061 mo
170.198 152.061 li
@
170.198 153.821 mo
172.439 153.821 li
@
172.439 152.155 mo
174.68 152.155 li
@
174.68 151.972 mo
176.921 151.972 li
@
176.921 144.882 mo
179.162 144.882 li
@
179.162 152 mo
181.403 152 li
@
181.403 137.97 mo
183.644 137.97 li
@
183.644 143.862 mo
185.885 143.862 li
@
185.885 138.328 mo
188.126 138.328 li
@
188.126 142.429 mo
190.367 142.429 li
@
190.367 139.287 mo
192.608 139.287 li
@
192.608 143.45 mo
194.849 143.45 li
@
194.849 142.651 mo
197.09 142.651 li
@
197.09 147.557 mo
199.331 147.557 li
@
199.331 144.213 mo
201.572 144.213 li
@
201.572 144.094 mo
203.813 144.094 li
@
203.813 135.393 mo
206.054 135.393 li
@
206.054 138.835 mo
208.295 138.835 li
@
208.295 139.137 mo
210.536 139.137 li
@
210.536 143.251 mo
212.777 143.251 li
@
212.777 142.197 mo
215.018 142.197 li
@
215.018 131.944 mo
217.259 131.944 li
@
217.259 139.257 mo
219.5 139.257 li
@
219.5 126.777 mo
221.741 126.777 li
@
221.741 135.021 mo
223.982 135.021 li
@
223.982 137.515 mo
226.223 137.515 li
@
226.223 123.73 mo
228.464 123.73 li
@
228.464 120.48 mo
230.705 120.48 li
@
230.705 134.748 mo
232.946 134.748 li
@
232.946 135.939 mo
235.187 135.939 li
@
235.187 129.593 mo
237.428 129.593 li
@
237.428 131.043 mo
239.669 131.043 li
@
239.669 131.972 mo
241.91 131.972 li
@
241.91 132.842 mo
244.151 132.842 li
@
244.151 132.377 mo
246.392 132.377 li
@
246.392 129.663 mo
248.633 129.663 li
@
248.633 131.914 mo
250.874 131.914 li
@
250.874 135.619 mo
253.115 135.619 li
@
253.115 125.738 mo
255.356 125.738 li
@
255.356 131.668 mo
257.597 131.668 li
@
257.597 135.604 mo
259.838 135.604 li
@
259.838 137.298 mo
262.079 137.298 li
@
262.079 125.296 mo
264.32 125.296 li
@
264.32 133.496 mo
266.561 133.496 li
@
266.561 136.045 mo
268.802 136.045 li
@
268.802 134.816 mo
271.043 134.816 li
@
271.043 132.295 mo
273.284 132.295 li
@
273.284 122.01 mo
275.525 122.01 li
@
275.525 133.868 mo
277.766 133.868 li
@
277.766 131.632 mo
280.007 131.632 li
@
280.007 135.032 mo
282.248 135.032 li
@
282.248 127.188 mo
284.489 127.188 li
@
284.489 132.519 mo
286.73 132.519 li
@
286.73 137.91 mo
288.971 137.91 li
@
288.971 132.123 mo
291.212 132.123 li
@
291.212 134.091 mo
293.453 134.091 li
@
293.453 135.154 mo
295.694 135.154 li
@
295.694 131.836 mo
297.935 131.836 li
@
297.935 128.932 mo
300.176 128.932 li
@
300.176 132.42 mo
302.417 132.42 li
@
302.417 133.536 mo
304.658 133.536 li
@
304.658 126.096 mo
306.899 126.096 li
@
306.899 138.108 mo
309.14 138.108 li
@
309.14 123.399 mo
311.381 123.399 li
@
311.381 126.183 mo
313.622 126.183 li
@
313.622 130.613 mo
315.863 130.613 li
@
315.863 139.522 mo
318.104 139.522 li
@
318.104 128.034 mo
320.345 128.034 li
@
320.345 132.983 mo
322.586 132.983 li
@
322.586 136.698 mo
324.827 136.698 li
@
324.827 129.687 mo
327.068 129.687 li
@
327.068 127.333 mo
329.309 127.333 li
@
329.309 131.332 mo
331.55 131.332 li
@
331.55 136.213 mo
333.791 136.213 li
@
333.818 157.738 mo
336.059 157.738 li
.853361 .487251 .0680247 .00198367 cmyk
@
336.059 147.007 mo
338.3 147.007 li
@
338.3 137.701 mo
340.541 137.701 li
@
340.541 147.412 mo
342.782 147.412 li
@
342.782 148.69 mo
345.023 148.69 li
@
345.023 142.585 mo
347.264 142.585 li
@
347.264 146.198 mo
349.505 146.198 li
@
349.505 141.641 mo
351.746 141.641 li
@
351.746 144.575 mo
353.987 144.575 li
@
353.987 142.232 mo
356.228 142.232 li
@
356.228 147.945 mo
358.469 147.945 li
@
358.469 146.09 mo
360.71 146.09 li
@
360.71 144.942 mo
362.951 144.942 li
@
362.951 138.562 mo
365.192 138.562 li
@
365.192 141.192 mo
367.433 141.192 li
@
367.433 141.026 mo
369.674 141.026 li
@
369.674 138.307 mo
371.915 138.307 li
@
371.915 144.518 mo
374.156 144.518 li
@
374.156 137.949 mo
376.397 137.949 li
@
376.397 138.165 mo
378.638 138.165 li
@
378.638 143.176 mo
380.879 143.176 li
@
380.879 138.168 mo
383.12 138.168 li
@
383.12 147.426 mo
385.361 147.426 li
@
385.361 143.7 mo
387.602 143.7 li
@
387.602 141.541 mo
389.843 141.541 li
@
389.843 141.31 mo
392.084 141.31 li
@
392.084 142.183 mo
394.325 142.183 li
@
394.325 144.616 mo
396.566 144.616 li
@
396.566 142.19 mo
398.807 142.19 li
@
398.807 141.682 mo
401.048 141.682 li
@
401.048 136.62 mo
403.289 136.62 li
@
403.289 140.024 mo
405.53 140.024 li
@
405.53 126.801 mo
407.771 126.801 li
@
407.771 132.177 mo
410.012 132.177 li
@
410.012 124.885 mo
412.253 124.885 li
@
412.253 129.423 mo
414.494 129.423 li
@
414.494 126.362 mo
416.735 126.362 li
@
416.735 131.161 mo
418.976 131.161 li
@
418.976 131.182 mo
421.217 131.182 li
@
421.217 134.58 mo
423.458 134.58 li
@
423.458 131.788 mo
425.699 131.788 li
@
425.699 130.811 mo
427.94 130.811 li
@
427.94 121.985 mo
430.181 121.985 li
@
430.181 126.843 mo
432.422 126.843 li
@
432.422 128.621 mo
434.663 128.621 li
@
434.663 130.425 mo
436.904 130.425 li
@
436.904 130.62 mo
439.145 130.62 li
@
439.145 109.356 mo
441.386 109.356 li
@
441.386 125.489 mo
443.627 125.489 li
@
443.627 111.668 mo
445.868 111.668 li
@
445.868 122.639 mo
448.109 122.639 li
@
448.109 122.481 mo
450.35 122.481 li
@
450.35 111.873 mo
452.591 111.873 li
@
452.591 108.987 mo
454.832 108.987 li
@
454.832 122.461 mo
457.073 122.461 li
@
457.073 122.252 mo
459.314 122.252 li
@
459.314 116.88 mo
461.555 116.88 li
@
461.555 117.021 mo
463.796 117.021 li
@
463.796 120.266 mo
466.037 120.266 li
@
466.037 118.723 mo
468.278 118.723 li
@
468.278 117.854 mo
470.519 117.854 li
@
470.519 117.043 mo
472.76 117.043 li
@
472.76 119.473 mo
475.001 119.473 li
@
475.001 124.156 mo
477.242 124.156 li
@
477.242 113.292 mo
479.483 113.292 li
@
479.483 121.532 mo
481.724 121.532 li
@
481.724 123.249 mo
483.965 123.249 li
@
483.965 125.887 mo
486.206 125.887 li
@
486.206 115.202 mo
488.447 115.202 li
@
488.447 121.394 mo
490.688 121.394 li
@
490.688 122.373 mo
492.929 122.373 li
@
492.929 122.461 mo
495.17 122.461 li
@
495.17 121.17 mo
497.411 121.17 li
@
497.411 110.508 mo
499.652 110.508 li
@
499.652 121.557 mo
501.893 121.557 li
@
501.893 118.92 mo
504.134 118.92 li
@
504.134 123.794 mo
506.375 123.794 li
@
506.375 115.236 mo
508.616 115.236 li
@
508.616 122.558 mo
510.857 122.558 li
@
510.857 126.097 mo
513.098 126.097 li
@
513.098 120.346 mo
515.339 120.346 li
@
515.339 123.748 mo
517.58 123.748 li
@
517.58 122.3 mo
519.821 122.3 li
@
519.821 118.654 mo
522.062 118.654 li
@
522.062 117.394 mo
524.303 117.394 li
@
524.303 120.619 mo
526.544 120.619 li
@
526.544 121.707 mo
528.785 121.707 li
@
528.785 114.7 mo
531.026 114.7 li
@
531.026 124.567 mo
533.267 124.567 li
@
533.267 111.543 mo
535.508 111.543 li
@
535.508 116.507 mo
537.749 116.507 li
@
537.749 119.679 mo
539.99 119.679 li
@
539.99 127.096 mo
542.231 127.096 li
@
542.231 115.119 mo
544.472 115.119 li
@
544.472 120.8 mo
546.713 120.8 li
@
546.713 125.167 mo
548.954 125.167 li
@
548.954 119.724 mo
551.195 119.724 li
@
551.195 116.87 mo
553.436 116.87 li
@
553.436 118.852 mo
555.677 118.852 li
@
555.677 125.322 mo
557.918 125.322 li
@
557.944 162.004 mo
560.185 162.004 li
.878538 .2439 1 .131716 cmyk
@
560.185 155.035 mo
562.426 155.035 li
@
562.426 148.455 mo
564.667 148.455 li
@
564.667 155.603 mo
566.908 155.603 li
@
566.908 155.989 mo
569.149 155.989 li
@
569.149 152.047 mo
571.39 152.047 li
@
571.39 154.532 mo
573.631 154.532 li
@
573.631 151.258 mo
575.872 151.258 li
@
575.872 154.204 mo
578.113 154.204 li
@
578.113 152.243 mo
580.354 152.243 li
@
580.354 155.38 mo
582.595 155.38 li
@
582.595 153.851 mo
584.836 153.851 li
@
584.836 153.442 mo
587.077 153.442 li
@
587.077 148.678 mo
589.318 148.678 li
@
589.318 150.308 mo
591.559 150.308 li
@
591.559 150.73 mo
593.8 150.73 li
@
593.8 147.847 mo
596.041 147.847 li
@
596.041 152.512 mo
598.282 152.512 li
@
598.282 147.826 mo
600.523 147.826 li
@
600.523 148.143 mo
602.764 148.143 li
@
602.765 152.268 mo
605.005 152.268 li
@
605.006 147.656 mo
607.247 147.656 li
@
607.247 154.485 mo
609.488 154.485 li
@
609.488 152.068 mo
611.729 152.068 li
@
611.729 149.596 mo
613.97 149.596 li
@
613.97 149.88 mo
616.211 149.88 li
@
616.211 151.265 mo
618.452 151.265 li
@
618.452 153.076 mo
620.693 153.076 li
@
620.693 151.124 mo
622.934 151.124 li
@
622.934 150.6 mo
625.175 150.6 li
@
625.175 146.606 mo
627.416 146.606 li
@
627.416 149.075 mo
629.657 149.075 li
@
629.657 138.782 mo
631.898 138.782 li
@
631.898 143.132 mo
634.139 143.132 li
@
634.139 137.369 mo
636.38 137.369 li
@
636.38 140.898 mo
638.621 140.898 li
@
638.621 138.225 mo
640.862 138.225 li
@
640.862 142.135 mo
643.103 142.135 li
@
643.103 141.989 mo
645.344 141.989 li
@
645.344 144.86 mo
647.585 144.86 li
@
647.585 142.317 mo
649.826 142.317 li
@
649.826 141.885 mo
652.067 141.885 li
@
652.067 135.064 mo
654.308 135.064 li
@
654.308 138.177 mo
656.549 138.177 li
@
656.549 139.913 mo
658.79 139.913 li
@
658.79 141.245 mo
661.031 141.245 li
@
661.031 141.615 mo
663.272 141.615 li
@
663.272 124.641 mo
665.513 124.641 li
@
665.513 137.315 mo
667.754 137.315 li
@
667.754 127.449 mo
669.995 127.449 li
@
669.995 134.756 mo
672.236 134.756 li
@
672.236 134.843 mo
674.477 134.843 li
@
674.477 127.009 mo
676.718 127.009 li
@
676.718 124.562 mo
678.959 124.562 li
@
678.959 134.534 mo
681.2 134.534 li
@
681.201 134.482 mo
683.441 134.482 li
@
683.442 130.724 mo
685.682 130.724 li
@
685.683 130.295 mo
687.924 130.295 li
@
687.924 133.318 mo
690.165 133.318 li
@
690.165 132.499 mo
692.406 132.499 li
@
692.406 131.547 mo
694.647 131.547 li
@
694.647 130.69 mo
696.888 130.69 li
@
696.888 132.484 mo
699.129 132.484 li
@
699.129 137.007 mo
701.37 137.007 li
@
701.37 128.501 mo
703.611 128.501 li
@
703.611 134.446 mo
705.852 134.446 li
@
705.852 135.772 mo
708.093 135.772 li
@
708.093 137.784 mo
710.334 137.784 li
@
710.334 129.784 mo
712.575 129.784 li
@
712.575 133.733 mo
714.816 133.733 li
@
714.816 135.001 mo
717.057 135.001 li
@
717.057 135.289 mo
719.298 135.289 li
@
719.298 133.582 mo
721.539 133.582 li
@
721.539 126.115 mo
723.78 126.115 li
@
723.78 134.648 mo
726.021 134.648 li
@
726.021 132.268 mo
728.262 132.268 li
@
728.262 136.394 mo
730.503 136.394 li
@
730.503 128.984 mo
732.744 128.984 li
@
732.744 134.997 mo
734.985 134.997 li
@
734.985 137.741 mo
737.226 137.741 li
@
737.226 133.881 mo
739.467 133.881 li
@
739.467 136.336 mo
741.708 136.336 li
@
741.708 135.205 mo
743.949 135.205 li
@
743.949 131.631 mo
746.19 131.631 li
@
746.19 131.852 mo
748.431 131.852 li
@
748.431 133.927 mo
750.672 133.927 li
@
750.672 134.823 mo
752.913 134.823 li
@
752.913 129.494 mo
755.154 129.494 li
@
755.154 137.427 mo
757.395 137.427 li
@
757.395 128.023 mo
759.636 128.023 li
@
759.636 131.108 mo
761.877 131.108 li
@
761.878 133.251 mo
764.118 133.251 li
@
764.119 138.6 mo
766.359 138.6 li
@
766.36 129.879 mo
768.601 129.879 li
@
768.601 133.781 mo
770.842 133.781 li
@
770.842 137.095 mo
773.083 137.095 li
@
773.083 133.089 mo
775.324 133.089 li
@
775.324 130.607 mo
777.565 130.607 li
@
777.565 132.629 mo
779.806 132.629 li
@
779.806 137.709 mo
782.047 137.709 li
@
.8 lw
0 lj
108.57 238.702 mo
108.57 1.97318 li
1 /0 /CSD get_res sepcs
1 sep
@
783.192 238.702 mo
783.192 1.97318 li
@
108.57 238.702 mo
783.192 238.702 li
@
108.57 1.97318 mo
783.192 1.97318 li
@
307.475 24.6452 mo
584.287 24.6452 li
585.621 24.6452 586.287 23.9782 586.287 22.6452 cv
586.287 8.97318 li
586.287 7.6402 585.621 6.97318 584.287 6.97318 cv
307.475 6.97318 li
306.142 6.97318 305.475 7.6402 305.475 8.97318 cv
305.475 22.6452 li
305.475 23.9782 306.142 24.6452 307.475 24.6452 cv
cp
1 /0 /CSD get_res sepcs
0 sep
f
1 lw
0 lc
307.475 24.6452 mo
584.287 24.6452 li
585.621 24.6452 586.287 23.9782 586.287 22.6452 cv
586.287 8.97318 li
586.287 7.6402 585.621 6.97318 584.287 6.97318 cv
307.475 6.97318 li
306.142 6.97318 305.475 7.6402 305.475 8.97318 cv
305.475 22.6452 li
305.475 23.9782 306.142 24.6452 307.475 24.6452 cv
cp
1 /0 /CSD get_res sepcs
.2 sep
@
309.475 18.5672 mo
329.475 18.5672 li
329.475 11.5672 li
309.475 11.5672 li
cp
0 .990631 1 .000396735 cmyk
f
309.475 18.5672 mo
329.475 18.5672 li
329.475 11.5672 li
309.475 11.5672 li
cp
@
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: GCWIZY+ AddGlyphs
systemdict begin GCWIZZ+
/GlyphProcs get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/S {63.5 0 6.6 -1.3 57.9 74.2 setcachedevice
53.5 70.5 mo
53.5 60.9 li
49.7 62.7 46.2 64 42.9 64.9 cv
39.5 65.7 36.3 66.2 33.3 66.2 cv
27.9 66.2 23.7 65.1 20.8 63.1 cv
17.9 61 16.5 58 16.5 54.2 cv
16.5 51 17.4 48.5 19.4 46.9 cv
21.3 45.2 25 43.9 30.4 42.9 cv
36.4 41.7 li
43.7 40.3 49.1 37.8 52.6 34.3 cv
56.1 30.7 57.9 26 57.9 20.1 cv
57.9 13 55.5 7.7 50.8 4.1 cv
46 .5 39.1 -1.3 30 -1.3 cv
26.5 -1.3 22.8 -.900002 18.9 -.199997 cv
15 .5 11 1.6 6.9 3.2 cv
6.9 13.4 li
10.9 11.1 14.8 9.4 18.6 8.3 cv
22.4 7.1 26.2 6.6 30 6.6 cv
35.6 6.6 39.9 7.7 43 9.9 cv
46 12.1 47.6 15.2 47.6 19.4 cv
47.6 23 46.5 25.8 44.3 27.8 cv
42.1 29.8 38.5 31.3 33.5 32.3 cv
27.5 33.5 li
20.1 34.9 14.8 37.2 11.5 40.4 cv
8.2 43.5 6.6 47.8 6.6 53.4 cv
6.6 59.8 8.8 64.9 13.4 68.6 cv
17.9 72.3 24.2 74.2 32.2 74.2 cv
35.6 74.2 39 73.9 42.6 73.3 cv
46.1 72.7 49.7 71.7 53.5 70.5 cv
false sop
ef
}bind def
/i {27.8 0 9.4 0 18.4 76 setcachedevice
9.4 54.7 mo
18.4 54.7 li
18.4 0 li
9.4 0 li
9.4 54.7 li
9.4 76 mo
9.4 76 mo
18.4 76 li
18.4 64.6 li
9.4 64.6 li
cp
false sop
ef
}bind def
/t {39.2 0 2.7 0 36.8 70.2 setcachedevice
18.3 70.2 mo
18.3 54.7 li
36.8 54.7 li
36.8 47.7 li
18.3 47.7 li
18.3 18 li
18.3 13.5 18.9 10.6 20.1 9.4 cv
21.3 8.1 23.8 7.5 27.6 7.5 cv
36.8 7.5 li
36.8 0 li
27.6 0 li
20.6 0 15.8 1.3 13.2 3.89999 cv
10.6 6.5 9.3 11.2 9.3 18 cv
9.3 47.7 li
2.7 47.7 li
2.7 54.7 li
9.3 54.7 li
9.3 70.2 li
18.3 70.2 li
false sop
ef
}bind def
/e {61.5 0 5.5 -1.3 56.2 56 setcachedevice
56.2 29.6 mo
56.2 25.2 li
14.9 25.2 li
15.3 19 17.1 14.2 20.5 11 cv
23.8 7.8 28.4 6.2 34.4 6.2 cv
37.8 6.2 41.2 6.6 44.4 7.4 cv
47.6 8.2 50.9 9.5 54.1 11.3 cv
54.1 2.8 li
50.9 1.4 47.6 .300001 44.2 -.299999 cv
40.8 -.9 37.3 -1.3 33.9 -1.3 cv
25.1 -1.3 18.2 1.2 13.1 6.2 cv
8 11.2 5.5 18.1 5.5 26.8 cv
5.5 35.7 7.9 42.8 12.7 48.1 cv
17.5 53.3 24.1 56 32.3 56 cv
39.7 56 45.5 53.6 49.8 48.9 cv
54 44.1 56.2 37.7 56.2 29.6 cv
47.2 32.2 mo
47.1 37.1 45.7 41 43.1 44 cv
40.4 46.9 36.8 48.4 32.4 48.4 cv
27.4 48.4 23.4 46.9 20.4 44.1 cv
17.4 41.3 15.6 37.3 15.2 32.2 cv
47.2 32.2 li
false sop
ef
}bind def
/X {68.5 0 3 0 65.4 72.9 setcachedevice
6.3 72.9 mo
16.9 72.9 li
35 45.8 li
53.2 72.9 li
63.8 72.9 li
40.4 37.9 li
65.4 0 li
54.8 0 li
34.3 31 li
13.6 0 li
3 0 li
29 38.9 li
6.3 72.9 li
false sop
ef
}bind def
systemdict /gcheck known {setglobal} if end end
%ADOEndSubsetFont
/GCWIZZ+*1 
[32{/.notdef}rp /one /period /five /two /zero /three /S 
/i /t /e /X 213{/.notdef}rp]
GCWIZZ+ nf
GCWIZZ+*1 [10 0 0 -10 0 0 ]msf
337.475 18.5668 mo
(&'\(\)*)
[6.34894 2.77899 3.91901 9.33105 0 ]xsh
386.725 18.5672 mo
406.725 18.5672 li
406.725 11.5672 li
386.725 11.5672 li
cp
false sop
.853361 .487251 .0680247 .00198367 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
false sadj
386.725 18.5672 mo
406.725 18.5672 li
406.725 11.5672 li
386.725 11.5672 li
cp
@
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: GCWIZY+ AddGlyphs
systemdict begin GCWIZZ+
/GlyphProcs get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/Y {61.1 0 -.099994 0 61.3 72.9 setcachedevice
-.099994 72.9 mo
10.4 72.9 li
30.6 42.9 li
50.7 72.9 li
61.3 72.9 li
35.5 34.7 li
35.5 0 li
25.6 0 li
25.6 34.7 li
-.099994 72.9 li
false sop
ef
}bind def
systemdict /gcheck known {setglobal} if end end
%ADOEndSubsetFont
/GCWIZZ+*1 
[32{/.notdef}rp /one /period /five /two /zero /three /S 
/i /t /e /X /Y 212{/.notdef}rp]
GCWIZZ+ nf
GCWIZZ+*1 [10 0 0 -10 0 0 ]msf
414.725 18.5668 mo
(&'\(\)+)
[6.34894 2.77899 3.91901 9.33105 0 ]xsh
463.225 18.5672 mo
483.225 18.5672 li
483.225 11.5672 li
463.225 11.5672 li
cp
false sop
.878538 .2439 1 .131716 cmyk
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
false sadj
463.225 18.5672 mo
483.225 18.5672 li
483.225 11.5672 li
463.225 11.5672 li
cp
@
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: GCWIZY+ AddGlyphs
systemdict begin GCWIZZ+
/GlyphProcs get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/H {75.2 0 9.8 0 65.4 72.9 setcachedevice
9.8 72.9 mo
19.7 72.9 li
19.7 43 li
55.5 43 li
55.5 72.9 li
65.4 72.9 li
65.4 0 li
55.5 0 li
55.5 34.7 li
19.7 34.7 li
19.7 0 li
9.8 0 li
9.8 72.9 li
false sop
ef
}bind def
/a {61.3 0 6 -1.3 52.2 56 setcachedevice
34.3 27.5 mo
27 27.5 22 26.6 19.2 25 cv
16.4 23.3 15 20.5 15 16.5 cv
15 13.3 16 10.7 18.1 8.9 cv
20.2 7 23.1 6.1 26.7 6.1 cv
31.7 6.1 35.7 7.8 38.7 11.4 cv
41.7 14.9 43.2 19.6 43.2 25.5 cv
43.2 27.5 li
34.3 27.5 li
52.2 31.2 mo
52.2 0 li
43.2 0 li
43.2 8.3 li
41.1 4.9 38.5 2.5 35.5 1 cv
32.5 -.5 28.7 -1.3 24.3 -1.3 cv
18.7 -1.3 14.2 .200001 10.9 3.3 cv
7.6 6.4 6 10.6 6 15.9 cv
6 22 8 26.6 12.2 29.8 cv
16.3 32.9 22.4 34.5 30.6 34.5 cv
43.2 34.5 li
43.2 35.4 li
43.2 39.5 41.8 42.7 39.1 45 cv
36.4 47.2 32.6 48.4 27.7 48.4 cv
24.5 48.4 21.5 48 18.5 47.2 cv
15.5 46.4 12.7 45.3 10 43.9 cv
10 52.2 li
13.2 53.4 16.4 54.4 19.5 55 cv
22.6 55.6 25.6 56 28.6 56 cv
36.5 56 42.4 53.9 46.3 49.8 cv
50.2 45.7 52.2 39.5 52.2 31.2 cv
false sop
ef
}bind def
/r {41.1 0 9.1 0 41.1 56 setcachedevice
41.1 46.3 mo
40.1 46.9 39 47.3 37.8 47.6 cv
36.6 47.8 35.3 48 33.9 48 cv
28.8 48 24.9 46.3 22.2 43 cv
19.4 39.7 18.1 35 18.1 28.8 cv
18.1 0 li
9.1 0 li
9.1 54.7 li
18.1 54.7 li
18.1 46.2 li
19.9 49.5 22.4 52 25.4 53.6 cv
28.4 55.2 32.1 56 36.5 56 cv
37.1 56 37.8 55.9 38.6 55.9 cv
39.3 55.8 40.1 55.7 41.1 55.5 cv
41.1 46.3 li
false sop
ef
}bind def
/m {97.4 0 9.1 0 88.9 56 setcachedevice
52 44.2 mo
54.2 48.2 56.9 51.1 60 53.1 cv
63.1 55 66.8 56 71.1 56 cv
76.7 56 81.1 54 84.2 50 cv
87.3 46 88.9 40.3 88.9 33 cv
88.9 0 li
79.9 0 li
79.9 32.7 li
79.9 37.9 78.9 41.8 77.1 44.4 cv
75.2 46.9 72.4 48.2 68.6 48.2 cv
63.9 48.2 60.2 46.6 57.5 43.5 cv
54.8 40.4 53.5 36.2 53.5 30.9 cv
53.5 0 li
44.5 0 li
44.5 32.7 li
44.5 37.9 43.5 41.8 41.7 44.4 cv
39.8 46.9 36.9 48.2 33.1 48.2 cv
28.5 48.2 24.8 46.6 22.1 43.5 cv
19.4 40.4 18.1 36.2 18.1 30.9 cv
18.1 0 li
9.1 0 li
9.1 54.7 li
18.1 54.7 li
18.1 46.2 li
20.1 49.5 22.6 52 25.5 53.6 cv
28.3 55.2 31.7 56 35.7 56 cv
39.7 56 43 55 45.8 53 cv
48.6 51 50.6 48 52 44.2 cv
false sop
ef
}bind def
/o {61.2 0 5.5 -1.3 55.7 56 setcachedevice
30.6 48.4 mo
25.8 48.4 22 46.5 19.2 42.7 cv
16.4 38.9 15 33.8 15 27.3 cv
15 20.7 16.3 15.6 19.1 11.8 cv
21.9 8 25.7 6.2 30.6 6.2 cv
35.4 6.2 39.2 8 42 11.8 cv
44.8 15.6 46.2 20.7 46.2 27.3 cv
46.2 33.7 44.8 38.9 42 42.7 cv
39.2 46.5 35.4 48.4 30.6 48.4 cv
30.6 56 mo
38.4 56 44.5 53.4 49 48.4 cv
53.4 43.3 55.7 36.3 55.7 27.3 cv
55.7 18.3 53.4 11.3 49 6.3 cv
44.5 1.2 38.4 -1.3 30.6 -1.3 cv
22.7 -1.3 16.5 1.2 12.1 6.3 cv
7.7 11.3 5.5 18.3 5.5 27.3 cv
5.5 36.3 7.7 43.3 12.1 48.4 cv
16.5 53.4 22.7 56 30.6 56 cv
false sop
ef
}bind def
/n {63.4 0 9.1 0 54.9 56 setcachedevice
54.9 33 mo
54.9 0 li
45.9 0 li
45.9 32.7 li
45.9 37.9 44.8 41.7 42.8 44.3 cv
40.8 46.9 37.8 48.2 33.8 48.2 cv
28.9 48.2 25.1 46.6 22.3 43.5 cv
19.5 40.4 18.1 36.2 18.1 30.9 cv
18.1 0 li
9.1 0 li
9.1 54.7 li
18.1 54.7 li
18.1 46.2 li
20.2 49.4 22.7 51.9 25.7 53.5 cv
28.6 55.1 32 56 35.8 56 cv
42 56 46.8 54 50 50.1 cv
53.2 46.2 54.9 40.5 54.9 33 cv
false sop
ef
}bind def
/z {52.5 0 4.3 0 48.2 54.7 setcachedevice
5.5 54.7 mo
48.2 54.7 li
48.2 46.5 li
14.4 7.2 li
48.2 7.2 li
48.2 0 li
4.3 0 li
4.3 8.2 li
38.1 47.5 li
5.5 47.5 li
5.5 54.7 li
false sop
ef
}bind def
/d {63.5 0 5.5 -1.3 54.4 76 setcachedevice
45.4 46.4 mo
45.4 76 li
54.4 76 li
54.4 0 li
45.4 0 li
45.4 8.2 li
43.5 4.9 41.1 2.5 38.2 1 cv
35.3 -.5 31.9 -1.3 27.9 -1.3 cv
21.3 -1.3 15.9 1.3 11.7 6.5 cv
7.5 11.7 5.5 18.7 5.5 27.3 cv
5.5 35.9 7.5 42.8 11.7 48.1 cv
15.9 53.3 21.3 56 27.9 56 cv
31.9 56 35.3 55.2 38.2 53.6 cv
41.1 52 43.5 49.6 45.4 46.4 cv
14.8 27.3 mo
14.8 20.7 16.1 15.5 18.8 11.7 cv
21.5 7.9 25.3 6.1 30.1 6.1 cv
34.8 6.1 38.5 7.9 41.3 11.7 cv
44 15.5 45.4 20.7 45.4 27.3 cv
45.4 33.9 44 39 41.3 42.8 cv
38.5 46.6 34.8 48.5 30.1 48.5 cv
25.3 48.5 21.5 46.6 18.8 42.8 cv
16.1 39 14.8 33.9 14.8 27.3 cv
false sop
ef
}bind def
/s {52.1 0 5.4 -1.3 47.2 56 setcachedevice
44.3 53.1 mo
44.3 44.6 li
41.7 45.8 39.1 46.8 36.4 47.5 cv
33.6 48.1 30.8 48.5 27.9 48.5 cv
23.4 48.5 20 47.8 17.8 46.4 cv
15.6 45 14.5 43 14.5 40.3 cv
14.5 38.2 15.3 36.6 16.9 35.4 cv
18.5 34.2 21.7 33 26.5 32 cv
29.6 31.3 li
36 29.9 40.5 27.9 43.2 25.5 cv
45.8 23 47.2 19.5 47.2 15.1 cv
47.2 10 45.2 6 41.2 3.1 cv
37.2 .0999985 31.6 -1.3 24.6 -1.3 cv
21.6 -1.3 18.6 -1 15.4 -.5 cv
12.2 0 8.9 .799999 5.4 2 cv
5.4 11.3 li
8.7 9.5 12 8.2 15.2 7.4 cv
18.4 6.5 21.6 6.1 24.8 6.1 cv
29 6.1 32.3 6.8 34.6 8.2 cv
36.8 9.6 38 11.7 38 14.4 cv
38 16.8 37.1 18.7 35.5 20 cv
33.9 21.3 30.3 22.6 24.7 23.8 cv
21.6 24.5 li
16 25.7 11.9 27.5 9.5 29.9 cv
7 32.3 5.8 35.6 5.8 39.9 cv
5.8 45 7.6 49 11.2 51.8 cv
14.8 54.6 20 56 26.8 56 cv
30.1 56 33.2 55.7 36.2 55.2 cv
39.1 54.7 41.8 54 44.3 53.1 cv
false sop
ef
}bind def
systemdict /gcheck known {setglobal} if end end
%ADOEndSubsetFont
/GCWIZZ+*1 
[32{/.notdef}rp /one /period /five /two /zero /three /S 
/i /t /e /X /Y /H /a /r 
/m /o /n /z /d /s 203{/.notdef}rp]
GCWIZZ+ nf
GCWIZZ+*1 [10 0 0 -10 0 0 ]msf
491.225 18.5668 mo
(,-./01'2\)34'\(\)+)
[7.51999 6.13007 4.10995 9.73999 6.12 6.34003 2.78003 5.24988 6.15009 9.52594 5.20996 2.78003 
3.91998 9.33105 0 ]xsh
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
/GCWIZZ+*1 uf
/GCWIZZ+ uf
/ uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
